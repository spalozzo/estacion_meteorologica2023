
Test_SensoresFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d79c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  0800d940  0800d940  0001d940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd34  0800dd34  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd34  0800dd34  0001dd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd3c  0800dd3c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd3c  0800dd3c  0001dd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd40  0800dd40  0001dd40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800dd44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a68  200001d8  0800df1c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c40  0800df1c  00024c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bd49  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004370  00000000  00000000  0003bf94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001960  00000000  00000000  00040308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013c7  00000000  00000000  00041c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000661e  00000000  00000000  0004302f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020042  00000000  00000000  0004964d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a7bae  00000000  00000000  0006968f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a04  00000000  00000000  00111240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00118c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d924 	.word	0x0800d924

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800d924 	.word	0x0800d924

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	3301      	adds	r3, #1
 8000f66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f6a:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d007      	beq.n	8000f86 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	79f9      	ldrb	r1, [r7, #7]
 8000f7e:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <Uart_isr>:
	else return -1;
}


void Uart_isr (UART_HandleTypeDef *huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f003 0320 	and.w	r3, r3, #32
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d013      	beq.n	8000fde <Uart_isr+0x4a>
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	f003 0320 	and.w	r3, r3, #32
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00e      	beq.n	8000fde <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <Uart_isr+0xac>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ffbc 	bl	8000f54 <store_char>
        return;
 8000fdc:	e02c      	b.n	8001038 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d027      	beq.n	8001038 <Uart_isr+0xa4>
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d022      	beq.n	8001038 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <Uart_isr+0xb0>)
 8000ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <Uart_isr+0xb0>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d108      	bne.n	8001010 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800100c:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800100e:	e012      	b.n	8001036 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <Uart_isr+0xb0>)
 8001012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001014:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <Uart_isr+0xb0>)
 8001016:	5cd3      	ldrb	r3, [r2, r3]
 8001018:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <Uart_isr+0xb0>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	3301      	adds	r3, #1
 8001020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <Uart_isr+0xb0>)
 8001026:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	7bba      	ldrb	r2, [r7, #14]
 8001034:	605a      	str	r2, [r3, #4]
    	return;
 8001036:	bf00      	nop
    }
}
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000023c 	.word	0x2000023c
 8001044:	200001f4 	.word	0x200001f4

08001048 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <BH1750_Init+0x34>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8001056:	f000 f813 	bl	8001080 <BH1750_Reset>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d107      	bne.n	8001070 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8001060:	2045      	movs	r0, #69	; 0x45
 8001062:	f000 f859 	bl	8001118 <BH1750_SetMtreg>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <BH1750_Init+0x28>
			return BH1750_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	e000      	b.n	8001072 <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8001070:	2301      	movs	r3, #1
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000240 	.word	0x20000240

08001080 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8001086:	2307      	movs	r3, #7
 8001088:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <BH1750_Reset+0x30>)
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	1dfa      	adds	r2, r7, #7
 8001090:	230a      	movs	r3, #10
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	2146      	movs	r1, #70	; 0x46
 8001098:	f002 fdc4 	bl	8003c24 <HAL_I2C_Master_Transmit>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <BH1750_Reset+0x26>
	//if(HAL_OK == HAL_I2C_Master_Transmit_DMA(bh1750_i2c, BH1750_ADDRESS, &tmp, 1))
		return BH1750_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000240 	.word	0x20000240

080010b4 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(BH1750_MODE Mode)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	091b      	lsrs	r3, r3, #4
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d106      	bne.n	80010d6 <BH1750_SetMode+0x22>
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <BH1750_SetMode+0x22>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e018      	b.n	8001108 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 030c 	and.w	r3, r3, #12
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <BH1750_SetMode+0x30>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e011      	b.n	8001108 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 80010e4:	79fa      	ldrb	r2, [r7, #7]
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <BH1750_SetMode+0x5c>)
 80010e8:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <BH1750_SetMode+0x60>)
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	1dfa      	adds	r2, r7, #7
 80010f0:	230a      	movs	r3, #10
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	2146      	movs	r1, #70	; 0x46
 80010f8:	f002 fd94 	bl	8003c24 <HAL_I2C_Master_Transmit>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <BH1750_SetMode+0x52>
		return BH1750_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000244 	.word	0x20000244
 8001114:	20000240 	.word	0x20000240

08001118 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af02      	add	r7, sp, #8
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b1e      	cmp	r3, #30
 8001126:	d902      	bls.n	800112e <BH1750_SetMtreg+0x16>
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2bff      	cmp	r3, #255	; 0xff
 800112c:	d101      	bne.n	8001132 <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e037      	b.n	80011a2 <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 8001132:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <BH1750_SetMtreg+0x94>)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001142:	b2db      	uxtb	r3, r3
 8001144:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	f003 031f 	and.w	r3, r3, #31
 800114e:	b25b      	sxtb	r3, r3
 8001150:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001154:	b25b      	sxtb	r3, r3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <BH1750_SetMtreg+0x98>)
 800115c:	6818      	ldr	r0, [r3, #0]
 800115e:	f107 020c 	add.w	r2, r7, #12
 8001162:	230a      	movs	r3, #10
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2301      	movs	r3, #1
 8001168:	2146      	movs	r1, #70	; 0x46
 800116a:	f002 fd5b 	bl	8003c24 <HAL_I2C_Master_Transmit>
 800116e:	4603      	mov	r3, r0
 8001170:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e012      	b.n	80011a2 <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <BH1750_SetMtreg+0x98>)
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	230a      	movs	r3, #10
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	2146      	movs	r1, #70	; 0x46
 800118e:	f002 fd49 	bl	8003c24 <HAL_I2C_Master_Transmit>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	e000      	b.n	80011a2 <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 80011a0:	2301      	movs	r3, #1
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000245 	.word	0x20000245
 80011b0:	20000240 	.word	0x20000240

080011b4 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	float result;

	//if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
	if(HAL_OK == HAL_I2C_Master_Receive_IT(bh1750_i2c, BH1750_ADDRESS, tmp, 2))
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <BH1750_ReadLight+0x28>)
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	2302      	movs	r3, #2
 80011c2:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <BH1750_ReadLight+0x2c>)
 80011c4:	2146      	movs	r1, #70	; 0x46
 80011c6:	f002 fe2b 	bl	8003e20 <HAL_I2C_Master_Receive_IT>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <BH1750_ReadLight+0x20>

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
		return BH1750_OK;
	}
	return BH1750_ERROR;*/
		return BH1750_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	e7ff      	b.n	80011d4 <BH1750_ReadLight+0x20>
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000240 	.word	0x20000240
 80011e0:	20000248 	.word	0x20000248

080011e4 <CNY70_TIM_Callback>:
uint32_t flancosLeidosCNY70;
uint32_t rpmCNY70;
float windSpeed;

void CNY70_TIM_Callback(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
	rpmCNY70= flancosLeidosCNY70; //Guardo el valor de las rpm en el ultimo minuto
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <CNY70_TIM_Callback+0x1c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a05      	ldr	r2, [pc, #20]	; (8001204 <CNY70_TIM_Callback+0x20>)
 80011ee:	6013      	str	r3, [r2, #0]
	flancosLeidosCNY70= 0; //Reinicio el contador de flancos
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <CNY70_TIM_Callback+0x1c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	20000260 	.word	0x20000260
 8001204:	20000264 	.word	0x20000264

08001208 <CNY70_FlancosUp>:

void CNY70_FlancosUp(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
	flancosLeidosCNY70++; //Cuento cada revolucion del sensor
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <CNY70_FlancosUp+0x18>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	4a03      	ldr	r2, [pc, #12]	; (8001220 <CNY70_FlancosUp+0x18>)
 8001214:	6013      	str	r3, [r2, #0]
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	20000260 	.word	0x20000260
 8001224:	00000000 	.word	0x00000000

08001228 <CNY70_MedicionVelocidad>:

float CNY70_MedicionVelocidad(uint32_t rpm)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	return ( PI * DIAMETRO_EJE * rpm ) * 3.6/60; //Velocidad en m/s
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff f96f 	bl	8000514 <__aeabi_ui2d>
 8001236:	a313      	add	r3, pc, #76	; (adr r3, 8001284 <CNY70_MedicionVelocidad+0x5c>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f9e4 	bl	8000608 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	a310      	add	r3, pc, #64	; (adr r3, 800128c <CNY70_MedicionVelocidad+0x64>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff f9db 	bl	8000608 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <CNY70_MedicionVelocidad+0x58>)
 8001260:	f7ff fafc 	bl	800085c <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fca4 	bl	8000bb8 <__aeabi_d2f>
 8001270:	4603      	mov	r3, r0
 8001272:	ee07 3a90 	vmov	s15, r3
}
 8001276:	eeb0 0a67 	vmov.f32	s0, s15
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	404e0000 	.word	0x404e0000
 8001284:	74bc6a80 	.word	0x74bc6a80
 8001288:	3fd41893 	.word	0x3fd41893
 800128c:	cccccccd 	.word	0xcccccccd
 8001290:	400ccccc 	.word	0x400ccccc

08001294 <MQ135_NivelContaminacion>:

	GasesDetectados[0]= SCA_CO2 * pow(Rs_R0, EXP_CO2); //Concentracion CO2
}

uint32_t MQ135_NivelContaminacion(uint32_t cuentas)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	return cuentas * 100/4095;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2264      	movs	r2, #100	; 0x64
 80012a0:	fb03 f202 	mul.w	r2, r3, r2
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MQ135_NivelContaminacion+0x2c>)
 80012a6:	fba3 1302 	umull	r1, r3, r3, r2
 80012aa:	1ad2      	subs	r2, r2, r3
 80012ac:	0852      	lsrs	r2, r2, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	0adb      	lsrs	r3, r3, #11
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	00100101 	.word	0x00100101

080012c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80012d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <vApplicationGetIdleTaskMemory+0x30>)
 80012da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000268 	.word	0x20000268
 80012f4:	200002bc 	.word	0x200002bc

080012f8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4a07      	ldr	r2, [pc, #28]	; (8001324 <vApplicationGetTimerTaskMemory+0x2c>)
 8001308:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	4a06      	ldr	r2, [pc, #24]	; (8001328 <vApplicationGetTimerTaskMemory+0x30>)
 800130e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001316:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	200004bc 	.word	0x200004bc
 8001328:	20000510 	.word	0x20000510

0800132c <HAL_I2C_MemRxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a16      	ldr	r2, [pc, #88]	; (8001390 <HAL_I2C_MemRxCpltCallback+0x64>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d123      	bne.n	8001384 <HAL_I2C_MemRxCpltCallback+0x58>
	{
		/* Calculate the Raw data for the parameters
		* Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		*/
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_I2C_MemRxCpltCallback+0x68>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	031a      	lsls	r2, r3, #12
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_I2C_MemRxCpltCallback+0x68>)
 8001344:	785b      	ldrb	r3, [r3, #1]
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	4313      	orrs	r3, r2
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <HAL_I2C_MemRxCpltCallback+0x68>)
 800134c:	7892      	ldrb	r2, [r2, #2]
 800134e:	0912      	lsrs	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	4313      	orrs	r3, r2
 8001354:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_I2C_MemRxCpltCallback+0x6c>)
 8001356:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_I2C_MemRxCpltCallback+0x68>)
 800135a:	78db      	ldrb	r3, [r3, #3]
 800135c:	031a      	lsls	r2, r3, #12
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_I2C_MemRxCpltCallback+0x68>)
 8001360:	791b      	ldrb	r3, [r3, #4]
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	4313      	orrs	r3, r2
 8001366:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <HAL_I2C_MemRxCpltCallback+0x68>)
 8001368:	7952      	ldrb	r2, [r2, #5]
 800136a:	0912      	lsrs	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	4313      	orrs	r3, r2
 8001370:	4a0a      	ldr	r2, [pc, #40]	; (800139c <HAL_I2C_MemRxCpltCallback+0x70>)
 8001372:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <HAL_I2C_MemRxCpltCallback+0x68>)
 8001376:	799b      	ldrb	r3, [r3, #6]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_I2C_MemRxCpltCallback+0x68>)
 800137c:	79d2      	ldrb	r2, [r2, #7]
 800137e:	4313      	orrs	r3, r2
 8001380:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001382:	6013      	str	r3, [r2, #0]
	}
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	200009b8 	.word	0x200009b8
 8001394:	20000258 	.word	0x20000258
 8001398:	20000250 	.word	0x20000250
 800139c:	2000024c 	.word	0x2000024c
 80013a0:	20000254 	.word	0x20000254

080013a4 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	float result;

	result = (tmp[0] << 8) | (tmp[1]);
 80013ac:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_I2C_MasterRxCpltCallback+0x40>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <HAL_I2C_MasterRxCpltCallback+0x40>)
 80013b4:	7852      	ldrb	r2, [r2, #1]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c0:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
	{
		result /= 2.0;
	}*/

	LuzDetectada = result / (float)BH1750_CONVERSION_FACTOR;
 80013c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80013c8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80013e8 <HAL_I2C_MasterRxCpltCallback+0x44>
 80013cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_I2C_MasterRxCpltCallback+0x48>)
 80013d2:	edc3 7a00 	vstr	s15, [r3]

}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000248 	.word	0x20000248
 80013e8:	3f99999a 	.word	0x3f99999a
 80013ec:	20000c10 	.word	0x20000c10

080013f0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	CNY70_FlancosUp();
 80013f8:	f7ff ff06 	bl	8001208 <CNY70_FlancosUp>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <Task_ReadSensors>:

void Task_ReadSensors(void *pvParam)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, &ConversionGasADC, 1);
 800140c:	2201      	movs	r2, #1
 800140e:	491f      	ldr	r1, [pc, #124]	; (800148c <Task_ReadSensors+0x88>)
 8001410:	481f      	ldr	r0, [pc, #124]	; (8001490 <Task_ReadSensors+0x8c>)
 8001412:	f001 f885 	bl	8002520 <HAL_ADC_Start_DMA>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001416:	2108      	movs	r1, #8
 8001418:	481e      	ldr	r0, [pc, #120]	; (8001494 <Task_ReadSensors+0x90>)
 800141a:	f005 f91f 	bl	800665c <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800141e:	481e      	ldr	r0, [pc, #120]	; (8001498 <Task_ReadSensors+0x94>)
 8001420:	f005 f860 	bl	80064e4 <HAL_TIM_Base_Start_IT>

	while(1)
	{
		xSemaphoreTake(SEM_Mediciones, portMAX_DELAY);
 8001424:	4b1d      	ldr	r3, [pc, #116]	; (800149c <Task_ReadSensors+0x98>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	4618      	mov	r0, r3
 800142e:	f007 fb95 	bl	8008b5c <xQueueSemaphoreTake>
		//BME280_Measure();
		MedicionesEstacion.Temperature = Temperature;
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <Task_ReadSensors+0x9c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <Task_ReadSensors+0xa0>)
 8001438:	6013      	str	r3, [r2, #0]
		MedicionesEstacion.Pressure = Pressure;
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <Task_ReadSensors+0xa4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <Task_ReadSensors+0xa0>)
 8001440:	6053      	str	r3, [r2, #4]
		BH1750_ReadLight(&MedicionesEstacion.Light);
 8001442:	481a      	ldr	r0, [pc, #104]	; (80014ac <Task_ReadSensors+0xa8>)
 8001444:	f7ff feb6 	bl	80011b4 <BH1750_ReadLight>
		MedicionesEstacion.Light= LuzDetectada;
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <Task_ReadSensors+0xac>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <Task_ReadSensors+0xa0>)
 800144e:	60d3      	str	r3, [r2, #12]
		MedicionesEstacion.AirQuality= MQ135_NivelContaminacion(ConversionGasADC);
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <Task_ReadSensors+0x88>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff1d 	bl	8001294 <MQ135_NivelContaminacion>
 800145a:	4603      	mov	r3, r0
 800145c:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <Task_ReadSensors+0xa0>)
 800145e:	6113      	str	r3, [r2, #16]
		MedicionesEstacion.WindSpeed= CNY70_MedicionVelocidad(rpmCNY70);
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <Task_ReadSensors+0xb0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fedf 	bl	8001228 <CNY70_MedicionVelocidad>
 800146a:	eef0 7a40 	vmov.f32	s15, s0
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <Task_ReadSensors+0xa0>)
 8001470:	edc3 7a05 	vstr	s15, [r3, #20]

		xSemaphoreGive(SEM_Mediciones);
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <Task_ReadSensors+0x98>)
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	2300      	movs	r3, #0
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	f007 f8f3 	bl	8008668 <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8001482:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001486:	f007 ff8f 	bl	80093a8 <vTaskDelay>
		xSemaphoreTake(SEM_Mediciones, portMAX_DELAY);
 800148a:	e7cb      	b.n	8001424 <Task_ReadSensors+0x20>
 800148c:	20000c04 	.word	0x20000c04
 8001490:	20000910 	.word	0x20000910
 8001494:	20000acc 	.word	0x20000acc
 8001498:	20000b14 	.word	0x20000b14
 800149c:	20000be8 	.word	0x20000be8
 80014a0:	20000c08 	.word	0x20000c08
 80014a4:	20000bec 	.word	0x20000bec
 80014a8:	20000c0c 	.word	0x20000c0c
 80014ac:	20000bf8 	.word	0x20000bf8
 80014b0:	20000c10 	.word	0x20000c10
 80014b4:	20000264 	.word	0x20000264

080014b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b8:	b5b0      	push	{r4, r5, r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014be:	f000 ffa9 	bl	8002414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c2:	f000 f857 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c6:	f000 fae7 	bl	8001a98 <MX_GPIO_Init>
  MX_DMA_Init();
 80014ca:	f000 faa7 	bl	8001a1c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014ce:	f000 fa7b 	bl	80019c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80014d2:	f000 f95f 	bl	8001794 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80014d6:	f000 fa4d 	bl	8001974 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80014da:	f000 f8b5 	bl	8001648 <MX_ADC1_Init>
  MX_TIM2_Init();
 80014de:	f000 f987 	bl	80017f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014e2:	f000 f9f7 	bl	80018d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //Inicializacion BH1750
  BH1750_Init(&hi2c1);
 80014e6:	481d      	ldr	r0, [pc, #116]	; (800155c <main+0xa4>)
 80014e8:	f7ff fdae 	bl	8001048 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE);
 80014ec:	2010      	movs	r0, #16
 80014ee:	f7ff fde1 	bl	80010b4 <BH1750_SetMode>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  SEM_Mediciones= xSemaphoreCreateBinary();
 80014f2:	2203      	movs	r2, #3
 80014f4:	2100      	movs	r1, #0
 80014f6:	2001      	movs	r0, #1
 80014f8:	f007 f85c 	bl	80085b4 <xQueueGenericCreate>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a18      	ldr	r2, [pc, #96]	; (8001560 <main+0xa8>)
 8001500:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(SEM_Mediciones, 0);
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <main+0xa8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f007 fb27 	bl	8008b5c <xQueueSemaphoreTake>
  xSemaphoreGive(SEM_Mediciones);
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <main+0xa8>)
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	2300      	movs	r3, #0
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	f007 f8a6 	bl	8008668 <xQueueGenericSend>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <main+0xac>)
 800151e:	1d3c      	adds	r4, r7, #4
 8001520:	461d      	mov	r5, r3
 8001522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001526:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800152a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f006 fe49 	bl	80081ca <osThreadCreate>
 8001538:	4603      	mov	r3, r0
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <main+0xb0>)
 800153c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(Task_ReadSensors, "ReadSensors", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 800153e:	2300      	movs	r3, #0
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	2301      	movs	r3, #1
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2300      	movs	r3, #0
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	4908      	ldr	r1, [pc, #32]	; (800156c <main+0xb4>)
 800154c:	4808      	ldr	r0, [pc, #32]	; (8001570 <main+0xb8>)
 800154e:	f007 fdf4 	bl	800913a <xTaskCreate>
  //xTaskCreate(Task_SendDataToThingspeak, "SendDataToThingspeak", configMINIMAL_STACK_SIZE*5, NULL, tskIDLE_PRIORITY + 2, NULL);

  vTaskStartScheduler();
 8001552:	f007 ff5d 	bl	8009410 <vTaskStartScheduler>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001556:	f006 fe31 	bl	80081bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800155a:	e7fe      	b.n	800155a <main+0xa2>
 800155c:	200009b8 	.word	0x200009b8
 8001560:	20000be8 	.word	0x20000be8
 8001564:	0800d96c 	.word	0x0800d96c
 8001568:	20000be4 	.word	0x20000be4
 800156c:	0800d954 	.word	0x0800d954
 8001570:	08001405 	.word	0x08001405

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b094      	sub	sp, #80	; 0x50
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0320 	add.w	r3, r7, #32
 800157e:	2230      	movs	r2, #48	; 0x30
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f00a fa7d 	bl	800ba82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	4b28      	ldr	r3, [pc, #160]	; (8001640 <SystemClock_Config+0xcc>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	4a27      	ldr	r2, [pc, #156]	; (8001640 <SystemClock_Config+0xcc>)
 80015a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a6:	6413      	str	r3, [r2, #64]	; 0x40
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <SystemClock_Config+0xcc>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	4b22      	ldr	r3, [pc, #136]	; (8001644 <SystemClock_Config+0xd0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015c0:	4a20      	ldr	r2, [pc, #128]	; (8001644 <SystemClock_Config+0xd0>)
 80015c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <SystemClock_Config+0xd0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015d4:	2301      	movs	r3, #1
 80015d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015de:	2302      	movs	r3, #2
 80015e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015e8:	2304      	movs	r3, #4
 80015ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80015ec:	2354      	movs	r3, #84	; 0x54
 80015ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015f0:	2302      	movs	r3, #2
 80015f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015f4:	2307      	movs	r3, #7
 80015f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f8:	f107 0320 	add.w	r3, r7, #32
 80015fc:	4618      	mov	r0, r3
 80015fe:	f004 fa57 	bl	8005ab0 <HAL_RCC_OscConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001608:	f000 fad6 	bl	8001bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160c:	230f      	movs	r3, #15
 800160e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001610:	2302      	movs	r3, #2
 8001612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	2102      	movs	r1, #2
 8001628:	4618      	mov	r0, r3
 800162a:	f004 fcb9 	bl	8005fa0 <HAL_RCC_ClockConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001634:	f000 fac0 	bl	8001bb8 <Error_Handler>
  }
}
 8001638:	bf00      	nop
 800163a:	3750      	adds	r7, #80	; 0x50
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40023800 	.word	0x40023800
 8001644:	40007000 	.word	0x40007000

08001648 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800164e:	463b      	mov	r3, r7
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800165a:	4b4b      	ldr	r3, [pc, #300]	; (8001788 <MX_ADC1_Init+0x140>)
 800165c:	4a4b      	ldr	r2, [pc, #300]	; (800178c <MX_ADC1_Init+0x144>)
 800165e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001660:	4b49      	ldr	r3, [pc, #292]	; (8001788 <MX_ADC1_Init+0x140>)
 8001662:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001666:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001668:	4b47      	ldr	r3, [pc, #284]	; (8001788 <MX_ADC1_Init+0x140>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800166e:	4b46      	ldr	r3, [pc, #280]	; (8001788 <MX_ADC1_Init+0x140>)
 8001670:	2201      	movs	r2, #1
 8001672:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001674:	4b44      	ldr	r3, [pc, #272]	; (8001788 <MX_ADC1_Init+0x140>)
 8001676:	2201      	movs	r2, #1
 8001678:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800167a:	4b43      	ldr	r3, [pc, #268]	; (8001788 <MX_ADC1_Init+0x140>)
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001682:	4b41      	ldr	r3, [pc, #260]	; (8001788 <MX_ADC1_Init+0x140>)
 8001684:	2200      	movs	r2, #0
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001688:	4b3f      	ldr	r3, [pc, #252]	; (8001788 <MX_ADC1_Init+0x140>)
 800168a:	4a41      	ldr	r2, [pc, #260]	; (8001790 <MX_ADC1_Init+0x148>)
 800168c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800168e:	4b3e      	ldr	r3, [pc, #248]	; (8001788 <MX_ADC1_Init+0x140>)
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001694:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <MX_ADC1_Init+0x140>)
 8001696:	2208      	movs	r2, #8
 8001698:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800169a:	4b3b      	ldr	r3, [pc, #236]	; (8001788 <MX_ADC1_Init+0x140>)
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80016a2:	4b39      	ldr	r3, [pc, #228]	; (8001788 <MX_ADC1_Init+0x140>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016a8:	4837      	ldr	r0, [pc, #220]	; (8001788 <MX_ADC1_Init+0x140>)
 80016aa:	f000 fef5 	bl	8002498 <HAL_ADC_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016b4:	f000 fa80 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80016c0:	2307      	movs	r3, #7
 80016c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c4:	463b      	mov	r3, r7
 80016c6:	4619      	mov	r1, r3
 80016c8:	482f      	ldr	r0, [pc, #188]	; (8001788 <MX_ADC1_Init+0x140>)
 80016ca:	f001 f837 	bl	800273c <HAL_ADC_ConfigChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016d4:	f000 fa70 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80016d8:	2302      	movs	r3, #2
 80016da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	4619      	mov	r1, r3
 80016e0:	4829      	ldr	r0, [pc, #164]	; (8001788 <MX_ADC1_Init+0x140>)
 80016e2:	f001 f82b 	bl	800273c <HAL_ADC_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80016ec:	f000 fa64 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80016f0:	2303      	movs	r3, #3
 80016f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016f4:	463b      	mov	r3, r7
 80016f6:	4619      	mov	r1, r3
 80016f8:	4823      	ldr	r0, [pc, #140]	; (8001788 <MX_ADC1_Init+0x140>)
 80016fa:	f001 f81f 	bl	800273c <HAL_ADC_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8001704:	f000 fa58 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8001708:	2304      	movs	r3, #4
 800170a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800170c:	463b      	mov	r3, r7
 800170e:	4619      	mov	r1, r3
 8001710:	481d      	ldr	r0, [pc, #116]	; (8001788 <MX_ADC1_Init+0x140>)
 8001712:	f001 f813 	bl	800273c <HAL_ADC_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800171c:	f000 fa4c 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 8001720:	2305      	movs	r3, #5
 8001722:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001724:	463b      	mov	r3, r7
 8001726:	4619      	mov	r1, r3
 8001728:	4817      	ldr	r0, [pc, #92]	; (8001788 <MX_ADC1_Init+0x140>)
 800172a:	f001 f807 	bl	800273c <HAL_ADC_ConfigChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8001734:	f000 fa40 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 8001738:	2306      	movs	r3, #6
 800173a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800173c:	463b      	mov	r3, r7
 800173e:	4619      	mov	r1, r3
 8001740:	4811      	ldr	r0, [pc, #68]	; (8001788 <MX_ADC1_Init+0x140>)
 8001742:	f000 fffb 	bl	800273c <HAL_ADC_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 800174c:	f000 fa34 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 8001750:	2307      	movs	r3, #7
 8001752:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001754:	463b      	mov	r3, r7
 8001756:	4619      	mov	r1, r3
 8001758:	480b      	ldr	r0, [pc, #44]	; (8001788 <MX_ADC1_Init+0x140>)
 800175a:	f000 ffef 	bl	800273c <HAL_ADC_ConfigChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8001764:	f000 fa28 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 8;
 8001768:	2308      	movs	r3, #8
 800176a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800176c:	463b      	mov	r3, r7
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_ADC1_Init+0x140>)
 8001772:	f000 ffe3 	bl	800273c <HAL_ADC_ConfigChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800177c:	f000 fa1c 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000910 	.word	0x20000910
 800178c:	40012000 	.word	0x40012000
 8001790:	0f000001 	.word	0x0f000001

08001794 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <MX_I2C1_Init+0x50>)
 800179a:	4a13      	ldr	r2, [pc, #76]	; (80017e8 <MX_I2C1_Init+0x54>)
 800179c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_I2C1_Init+0x50>)
 80017a0:	4a12      	ldr	r2, [pc, #72]	; (80017ec <MX_I2C1_Init+0x58>)
 80017a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_I2C1_Init+0x50>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <MX_I2C1_Init+0x50>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_I2C1_Init+0x50>)
 80017b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <MX_I2C1_Init+0x50>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MX_I2C1_Init+0x50>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <MX_I2C1_Init+0x50>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <MX_I2C1_Init+0x50>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017d0:	4804      	ldr	r0, [pc, #16]	; (80017e4 <MX_I2C1_Init+0x50>)
 80017d2:	f002 f8e3 	bl	800399c <HAL_I2C_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017dc:	f000 f9ec 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	200009b8 	.word	0x200009b8
 80017e8:	40005400 	.word	0x40005400
 80017ec:	000186a0 	.word	0x000186a0

080017f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f6:	f107 0318 	add.w	r3, r7, #24
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800180e:	463b      	mov	r3, r7
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800181a:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <MX_TIM2_Init+0xe0>)
 800181c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001820:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000-1;
 8001822:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <MX_TIM2_Init+0xe0>)
 8001824:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001828:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182a:	4b29      	ldr	r3, [pc, #164]	; (80018d0 <MX_TIM2_Init+0xe0>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <MX_TIM2_Init+0xe0>)
 8001832:	f242 720f 	movw	r2, #9999	; 0x270f
 8001836:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <MX_TIM2_Init+0xe0>)
 800183a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <MX_TIM2_Init+0xe0>)
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001846:	4822      	ldr	r0, [pc, #136]	; (80018d0 <MX_TIM2_Init+0xe0>)
 8001848:	f004 fdfc 	bl	8006444 <HAL_TIM_Base_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001852:	f000 f9b1 	bl	8001bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800185c:	f107 0318 	add.w	r3, r7, #24
 8001860:	4619      	mov	r1, r3
 8001862:	481b      	ldr	r0, [pc, #108]	; (80018d0 <MX_TIM2_Init+0xe0>)
 8001864:	f005 f9b8 	bl	8006bd8 <HAL_TIM_ConfigClockSource>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800186e:	f000 f9a3 	bl	8001bb8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001872:	4817      	ldr	r0, [pc, #92]	; (80018d0 <MX_TIM2_Init+0xe0>)
 8001874:	f004 fe98 	bl	80065a8 <HAL_TIM_IC_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800187e:	f000 f99b 	bl	8001bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800188a:	f107 0310 	add.w	r3, r7, #16
 800188e:	4619      	mov	r1, r3
 8001890:	480f      	ldr	r0, [pc, #60]	; (80018d0 <MX_TIM2_Init+0xe0>)
 8001892:	f005 fce5 	bl	8007260 <HAL_TIMEx_MasterConfigSynchronization>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800189c:	f000 f98c 	bl	8001bb8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018a0:	2300      	movs	r3, #0
 80018a2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018a4:	2301      	movs	r3, #1
 80018a6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80018b0:	463b      	mov	r3, r7
 80018b2:	2208      	movs	r2, #8
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <MX_TIM2_Init+0xe0>)
 80018b8:	f005 f8f2 	bl	8006aa0 <HAL_TIM_IC_ConfigChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80018c2:	f000 f979 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	; 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000acc 	.word	0x20000acc

080018d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e8:	463b      	mov	r3, r7
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <MX_TIM3_Init+0x98>)
 80018f2:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <MX_TIM3_Init+0x9c>)
 80018f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 80018f6:	4b1d      	ldr	r3, [pc, #116]	; (800196c <MX_TIM3_Init+0x98>)
 80018f8:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80018fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <MX_TIM3_Init+0x98>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <MX_TIM3_Init+0x98>)
 8001906:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800190a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <MX_TIM3_Init+0x98>)
 800190e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001912:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <MX_TIM3_Init+0x98>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800191a:	4814      	ldr	r0, [pc, #80]	; (800196c <MX_TIM3_Init+0x98>)
 800191c:	f004 fd92 	bl	8006444 <HAL_TIM_Base_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001926:	f000 f947 	bl	8001bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	4619      	mov	r1, r3
 8001936:	480d      	ldr	r0, [pc, #52]	; (800196c <MX_TIM3_Init+0x98>)
 8001938:	f005 f94e 	bl	8006bd8 <HAL_TIM_ConfigClockSource>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001942:	f000 f939 	bl	8001bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800194e:	463b      	mov	r3, r7
 8001950:	4619      	mov	r1, r3
 8001952:	4806      	ldr	r0, [pc, #24]	; (800196c <MX_TIM3_Init+0x98>)
 8001954:	f005 fc84 	bl	8007260 <HAL_TIMEx_MasterConfigSynchronization>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800195e:	f000 f92b 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000b14 	.word	0x20000b14
 8001970:	40000400 	.word	0x40000400

08001974 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <MX_USART1_UART_Init+0x50>)
 800197c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 8001980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001984:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 800199a:	220c      	movs	r2, #12
 800199c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019aa:	4805      	ldr	r0, [pc, #20]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 80019ac:	f005 fcda 	bl	8007364 <HAL_UART_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019b6:	f000 f8ff 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000b5c 	.word	0x20000b5c
 80019c4:	40011000 	.word	0x40011000

080019c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <MX_USART2_UART_Init+0x50>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 8001a00:	f005 fcb0 	bl	8007364 <HAL_UART_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a0a:	f000 f8d5 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000ba0 	.word	0x20000ba0
 8001a18:	40004400 	.word	0x40004400

08001a1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <MX_DMA_Init+0x78>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a1a      	ldr	r2, [pc, #104]	; (8001a94 <MX_DMA_Init+0x78>)
 8001a2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <MX_DMA_Init+0x78>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <MX_DMA_Init+0x78>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a13      	ldr	r2, [pc, #76]	; (8001a94 <MX_DMA_Init+0x78>)
 8001a48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_DMA_Init+0x78>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2105      	movs	r1, #5
 8001a5e:	200b      	movs	r0, #11
 8001a60:	f001 f9c4 	bl	8002dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a64:	200b      	movs	r0, #11
 8001a66:	f001 f9dd 	bl	8002e24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2105      	movs	r1, #5
 8001a6e:	2011      	movs	r0, #17
 8001a70:	f001 f9bc 	bl	8002dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a74:	2011      	movs	r0, #17
 8001a76:	f001 f9d5 	bl	8002e24 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2105      	movs	r1, #5
 8001a7e:	2038      	movs	r0, #56	; 0x38
 8001a80:	f001 f9b4 	bl	8002dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a84:	2038      	movs	r0, #56	; 0x38
 8001a86:	f001 f9cd 	bl	8002e24 <HAL_NVIC_EnableIRQ>

}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800

08001a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <MX_GPIO_Init+0xd0>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a2c      	ldr	r2, [pc, #176]	; (8001b68 <MX_GPIO_Init+0xd0>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <MX_GPIO_Init+0xd0>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <MX_GPIO_Init+0xd0>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a25      	ldr	r2, [pc, #148]	; (8001b68 <MX_GPIO_Init+0xd0>)
 8001ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <MX_GPIO_Init+0xd0>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <MX_GPIO_Init+0xd0>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a1e      	ldr	r2, [pc, #120]	; (8001b68 <MX_GPIO_Init+0xd0>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <MX_GPIO_Init+0xd0>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <MX_GPIO_Init+0xd0>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <MX_GPIO_Init+0xd0>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <MX_GPIO_Init+0xd0>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2120      	movs	r1, #32
 8001b22:	4812      	ldr	r0, [pc, #72]	; (8001b6c <MX_GPIO_Init+0xd4>)
 8001b24:	f001 ff20 	bl	8003968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	480c      	ldr	r0, [pc, #48]	; (8001b70 <MX_GPIO_Init+0xd8>)
 8001b40:	f001 fd8e 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b44:	2320      	movs	r3, #32
 8001b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4804      	ldr	r0, [pc, #16]	; (8001b6c <MX_GPIO_Init+0xd4>)
 8001b5c:	f001 fd80 	bl	8003660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b60:	bf00      	nop
 8001b62:	3728      	adds	r7, #40	; 0x28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020800 	.word	0x40020800

08001b74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f006 fb70 	bl	8008262 <osDelay>
 8001b82:	e7fb      	b.n	8001b7c <StartDefaultTask+0x8>

08001b84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim == &htim3)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a08      	ldr	r2, [pc, #32]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d101      	bne.n	8001b98 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		CNY70_TIM_Callback();
 8001b94:	f7ff fb26 	bl	80011e4 <CNY70_TIM_Callback>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_TIM_PeriodElapsedCallback+0x22>
    HAL_IncTick();
 8001ba2:	f000 fc59 	bl	8002458 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000b14 	.word	0x20000b14
 8001bb4:	40010000 	.word	0x40010000

08001bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bbc:	b672      	cpsid	i
}
 8001bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <Error_Handler+0x8>
	...

08001bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_MspInit+0x54>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <HAL_MspInit+0x54>)
 8001bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_MspInit+0x54>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_MspInit+0x54>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_MspInit+0x54>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_MspInit+0x54>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	210f      	movs	r1, #15
 8001c06:	f06f 0001 	mvn.w	r0, #1
 8001c0a:	f001 f8ef 	bl	8002dec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800

08001c1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a2f      	ldr	r2, [pc, #188]	; (8001cf8 <HAL_ADC_MspInit+0xdc>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d157      	bne.n	8001cee <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <HAL_ADC_MspInit+0xe0>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a2d      	ldr	r2, [pc, #180]	; (8001cfc <HAL_ADC_MspInit+0xe0>)
 8001c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <HAL_ADC_MspInit+0xe0>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <HAL_ADC_MspInit+0xe0>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a26      	ldr	r2, [pc, #152]	; (8001cfc <HAL_ADC_MspInit+0xe0>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <HAL_ADC_MspInit+0xe0>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c76:	2301      	movs	r3, #1
 8001c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	4619      	mov	r1, r3
 8001c88:	481d      	ldr	r0, [pc, #116]	; (8001d00 <HAL_ADC_MspInit+0xe4>)
 8001c8a:	f001 fce9 	bl	8003660 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_ADC_MspInit+0xe8>)
 8001c90:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <HAL_ADC_MspInit+0xec>)
 8001c92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_ADC_MspInit+0xe8>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_ADC_MspInit+0xe8>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <HAL_ADC_MspInit+0xe8>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <HAL_ADC_MspInit+0xe8>)
 8001ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_ADC_MspInit+0xe8>)
 8001cb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cb4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <HAL_ADC_MspInit+0xe8>)
 8001cb8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_ADC_MspInit+0xe8>)
 8001cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cc4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_ADC_MspInit+0xe8>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <HAL_ADC_MspInit+0xe8>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cd2:	480c      	ldr	r0, [pc, #48]	; (8001d04 <HAL_ADC_MspInit+0xe8>)
 8001cd4:	f001 f8b4 	bl	8002e40 <HAL_DMA_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001cde:	f7ff ff6b 	bl	8001bb8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_ADC_MspInit+0xe8>)
 8001ce6:	639a      	str	r2, [r3, #56]	; 0x38
 8001ce8:	4a06      	ldr	r2, [pc, #24]	; (8001d04 <HAL_ADC_MspInit+0xe8>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cee:	bf00      	nop
 8001cf0:	3728      	adds	r7, #40	; 0x28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40012000 	.word	0x40012000
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40020000 	.word	0x40020000
 8001d04:	20000958 	.word	0x20000958
 8001d08:	40026410 	.word	0x40026410

08001d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a4d      	ldr	r2, [pc, #308]	; (8001e60 <HAL_I2C_MspInit+0x154>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	f040 8093 	bne.w	8001e56 <HAL_I2C_MspInit+0x14a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	4b4b      	ldr	r3, [pc, #300]	; (8001e64 <HAL_I2C_MspInit+0x158>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	4a4a      	ldr	r2, [pc, #296]	; (8001e64 <HAL_I2C_MspInit+0x158>)
 8001d3a:	f043 0302 	orr.w	r3, r3, #2
 8001d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d40:	4b48      	ldr	r3, [pc, #288]	; (8001e64 <HAL_I2C_MspInit+0x158>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d52:	2312      	movs	r3, #18
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d5e:	2304      	movs	r3, #4
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	483f      	ldr	r0, [pc, #252]	; (8001e68 <HAL_I2C_MspInit+0x15c>)
 8001d6a:	f001 fc79 	bl	8003660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <HAL_I2C_MspInit+0x158>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a3b      	ldr	r2, [pc, #236]	; (8001e64 <HAL_I2C_MspInit+0x158>)
 8001d78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <HAL_I2C_MspInit+0x158>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001d8a:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <HAL_I2C_MspInit+0x160>)
 8001d8c:	4a38      	ldr	r2, [pc, #224]	; (8001e70 <HAL_I2C_MspInit+0x164>)
 8001d8e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001d90:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <HAL_I2C_MspInit+0x160>)
 8001d92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d96:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d98:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <HAL_I2C_MspInit+0x160>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d9e:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <HAL_I2C_MspInit+0x160>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001da4:	4b31      	ldr	r3, [pc, #196]	; (8001e6c <HAL_I2C_MspInit+0x160>)
 8001da6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001daa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dac:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <HAL_I2C_MspInit+0x160>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001db2:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <HAL_I2C_MspInit+0x160>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8001db8:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <HAL_I2C_MspInit+0x160>)
 8001dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dbe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <HAL_I2C_MspInit+0x160>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dc6:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <HAL_I2C_MspInit+0x160>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001dcc:	4827      	ldr	r0, [pc, #156]	; (8001e6c <HAL_I2C_MspInit+0x160>)
 8001dce:	f001 f837 	bl	8002e40 <HAL_DMA_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8001dd8:	f7ff feee 	bl	8001bb8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a23      	ldr	r2, [pc, #140]	; (8001e6c <HAL_I2C_MspInit+0x160>)
 8001de0:	639a      	str	r2, [r3, #56]	; 0x38
 8001de2:	4a22      	ldr	r2, [pc, #136]	; (8001e6c <HAL_I2C_MspInit+0x160>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_I2C_MspInit+0x168>)
 8001dea:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <HAL_I2C_MspInit+0x16c>)
 8001dec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001dee:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <HAL_I2C_MspInit+0x168>)
 8001df0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001df6:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <HAL_I2C_MspInit+0x168>)
 8001df8:	2240      	movs	r2, #64	; 0x40
 8001dfa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dfc:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_I2C_MspInit+0x168>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <HAL_I2C_MspInit+0x168>)
 8001e04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e08:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <HAL_I2C_MspInit+0x168>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e10:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_I2C_MspInit+0x168>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_I2C_MspInit+0x168>)
 8001e18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <HAL_I2C_MspInit+0x168>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <HAL_I2C_MspInit+0x168>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001e2a:	4812      	ldr	r0, [pc, #72]	; (8001e74 <HAL_I2C_MspInit+0x168>)
 8001e2c:	f001 f808 	bl	8002e40 <HAL_DMA_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 8001e36:	f7ff febf 	bl	8001bb8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <HAL_I2C_MspInit+0x168>)
 8001e3e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e40:	4a0c      	ldr	r2, [pc, #48]	; (8001e74 <HAL_I2C_MspInit+0x168>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2105      	movs	r1, #5
 8001e4a:	201f      	movs	r0, #31
 8001e4c:	f000 ffce 	bl	8002dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e50:	201f      	movs	r0, #31
 8001e52:	f000 ffe7 	bl	8002e24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e56:	bf00      	nop
 8001e58:	3728      	adds	r7, #40	; 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40005400 	.word	0x40005400
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	20000a0c 	.word	0x20000a0c
 8001e70:	40026010 	.word	0x40026010
 8001e74:	20000a6c 	.word	0x20000a6c
 8001e78:	400260a0 	.word	0x400260a0

08001e7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9c:	d135      	bne.n	8001f0a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <HAL_TIM_Base_MspInit+0xcc>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a28      	ldr	r2, [pc, #160]	; (8001f48 <HAL_TIM_Base_MspInit+0xcc>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
 8001eae:	4b26      	ldr	r3, [pc, #152]	; (8001f48 <HAL_TIM_Base_MspInit+0xcc>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <HAL_TIM_Base_MspInit+0xcc>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a21      	ldr	r2, [pc, #132]	; (8001f48 <HAL_TIM_Base_MspInit+0xcc>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <HAL_TIM_Base_MspInit+0xcc>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = CNY70_Pin;
 8001ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CNY70_GPIO_Port, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4816      	ldr	r0, [pc, #88]	; (8001f4c <HAL_TIM_Base_MspInit+0xd0>)
 8001ef4:	f001 fbb4 	bl	8003660 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2105      	movs	r1, #5
 8001efc:	201c      	movs	r0, #28
 8001efe:	f000 ff75 	bl	8002dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f02:	201c      	movs	r0, #28
 8001f04:	f000 ff8e 	bl	8002e24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f08:	e01a      	b.n	8001f40 <HAL_TIM_Base_MspInit+0xc4>
  else if(htim_base->Instance==TIM3)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <HAL_TIM_Base_MspInit+0xd4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d115      	bne.n	8001f40 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_TIM_Base_MspInit+0xcc>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <HAL_TIM_Base_MspInit+0xcc>)
 8001f1e:	f043 0302 	orr.w	r3, r3, #2
 8001f22:	6413      	str	r3, [r2, #64]	; 0x40
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_TIM_Base_MspInit+0xcc>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2105      	movs	r1, #5
 8001f34:	201d      	movs	r0, #29
 8001f36:	f000 ff59 	bl	8002dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f3a:	201d      	movs	r0, #29
 8001f3c:	f000 ff72 	bl	8002e24 <HAL_NVIC_EnableIRQ>
}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020400 	.word	0x40020400
 8001f50:	40000400 	.word	0x40000400

08001f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08c      	sub	sp, #48	; 0x30
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a36      	ldr	r2, [pc, #216]	; (800204c <HAL_UART_MspInit+0xf8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d135      	bne.n	8001fe2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	4b35      	ldr	r3, [pc, #212]	; (8002050 <HAL_UART_MspInit+0xfc>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	4a34      	ldr	r2, [pc, #208]	; (8002050 <HAL_UART_MspInit+0xfc>)
 8001f80:	f043 0310 	orr.w	r3, r3, #16
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	4b32      	ldr	r3, [pc, #200]	; (8002050 <HAL_UART_MspInit+0xfc>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	61bb      	str	r3, [r7, #24]
 8001f90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <HAL_UART_MspInit+0xfc>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <HAL_UART_MspInit+0xfc>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_UART_MspInit+0xfc>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fc0:	2307      	movs	r3, #7
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 031c 	add.w	r3, r7, #28
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4822      	ldr	r0, [pc, #136]	; (8002054 <HAL_UART_MspInit+0x100>)
 8001fcc:	f001 fb48 	bl	8003660 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2105      	movs	r1, #5
 8001fd4:	2025      	movs	r0, #37	; 0x25
 8001fd6:	f000 ff09 	bl	8002dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fda:	2025      	movs	r0, #37	; 0x25
 8001fdc:	f000 ff22 	bl	8002e24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fe0:	e030      	b.n	8002044 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <HAL_UART_MspInit+0x104>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d12b      	bne.n	8002044 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_UART_MspInit+0xfc>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	4a16      	ldr	r2, [pc, #88]	; (8002050 <HAL_UART_MspInit+0xfc>)
 8001ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_UART_MspInit+0xfc>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_UART_MspInit+0xfc>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	4a0f      	ldr	r2, [pc, #60]	; (8002050 <HAL_UART_MspInit+0xfc>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6313      	str	r3, [r2, #48]	; 0x30
 8002018:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <HAL_UART_MspInit+0xfc>)
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002024:	230c      	movs	r3, #12
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002034:	2307      	movs	r3, #7
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	4805      	ldr	r0, [pc, #20]	; (8002054 <HAL_UART_MspInit+0x100>)
 8002040:	f001 fb0e 	bl	8003660 <HAL_GPIO_Init>
}
 8002044:	bf00      	nop
 8002046:	3730      	adds	r7, #48	; 0x30
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40011000 	.word	0x40011000
 8002050:	40023800 	.word	0x40023800
 8002054:	40020000 	.word	0x40020000
 8002058:	40004400 	.word	0x40004400

0800205c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	; 0x30
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	4b2e      	ldr	r3, [pc, #184]	; (800212c <HAL_InitTick+0xd0>)
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	4a2d      	ldr	r2, [pc, #180]	; (800212c <HAL_InitTick+0xd0>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6453      	str	r3, [r2, #68]	; 0x44
 800207c:	4b2b      	ldr	r3, [pc, #172]	; (800212c <HAL_InitTick+0xd0>)
 800207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002088:	f107 020c 	add.w	r2, r7, #12
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f004 f9a4 	bl	80063e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002098:	f004 f98e 	bl	80063b8 <HAL_RCC_GetPCLK2Freq>
 800209c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	4a23      	ldr	r2, [pc, #140]	; (8002130 <HAL_InitTick+0xd4>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0c9b      	lsrs	r3, r3, #18
 80020a8:	3b01      	subs	r3, #1
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_InitTick+0xd8>)
 80020ae:	4a22      	ldr	r2, [pc, #136]	; (8002138 <HAL_InitTick+0xdc>)
 80020b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80020b2:	4b20      	ldr	r3, [pc, #128]	; (8002134 <HAL_InitTick+0xd8>)
 80020b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80020ba:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <HAL_InitTick+0xd8>)
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80020c0:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <HAL_InitTick+0xd8>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_InitTick+0xd8>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_InitTick+0xd8>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80020d2:	4818      	ldr	r0, [pc, #96]	; (8002134 <HAL_InitTick+0xd8>)
 80020d4:	f004 f9b6 	bl	8006444 <HAL_TIM_Base_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80020de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d11b      	bne.n	800211e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80020e6:	4813      	ldr	r0, [pc, #76]	; (8002134 <HAL_InitTick+0xd8>)
 80020e8:	f004 f9fc 	bl	80064e4 <HAL_TIM_Base_Start_IT>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80020f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d111      	bne.n	800211e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020fa:	2019      	movs	r0, #25
 80020fc:	f000 fe92 	bl	8002e24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b0f      	cmp	r3, #15
 8002104:	d808      	bhi.n	8002118 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002106:	2200      	movs	r2, #0
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	2019      	movs	r0, #25
 800210c:	f000 fe6e 	bl	8002dec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002110:	4a0a      	ldr	r2, [pc, #40]	; (800213c <HAL_InitTick+0xe0>)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e002      	b.n	800211e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800211e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002122:	4618      	mov	r0, r3
 8002124:	3730      	adds	r7, #48	; 0x30
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800
 8002130:	431bde83 	.word	0x431bde83
 8002134:	20000c14 	.word	0x20000c14
 8002138:	40010000 	.word	0x40010000
 800213c:	20000004 	.word	0x20000004

08002140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <NMI_Handler+0x4>

08002146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800214a:	e7fe      	b.n	800214a <HardFault_Handler+0x4>

0800214c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <MemManage_Handler+0x4>

08002152 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002156:	e7fe      	b.n	8002156 <BusFault_Handler+0x4>

08002158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800215c:	e7fe      	b.n	800215c <UsageFault_Handler+0x4>

0800215e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <DMA1_Stream0_IRQHandler+0x10>)
 8002172:	f000 fffd 	bl	8003170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000a0c 	.word	0x20000a0c

08002180 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <DMA1_Stream6_IRQHandler+0x10>)
 8002186:	f000 fff3 	bl	8003170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000a6c 	.word	0x20000a6c

08002194 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800219a:	f004 fb79 	bl	8006890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000c14 	.word	0x20000c14

080021a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <TIM2_IRQHandler+0x10>)
 80021ae:	f004 fb6f 	bl	8006890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000acc 	.word	0x20000acc

080021bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <TIM3_IRQHandler+0x10>)
 80021c2:	f004 fb65 	bl	8006890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000b14 	.word	0x20000b14

080021d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <I2C1_EV_IRQHandler+0x10>)
 80021d6:	f001 fed1 	bl	8003f7c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200009b8 	.word	0x200009b8

080021e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (&huart1);
 80021e8:	4803      	ldr	r0, [pc, #12]	; (80021f8 <USART1_IRQHandler+0x14>)
 80021ea:	f7fe fed3 	bl	8000f94 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021ee:	4802      	ldr	r0, [pc, #8]	; (80021f8 <USART1_IRQHandler+0x14>)
 80021f0:	f005 f906 	bl	8007400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000b5c 	.word	0x20000b5c

080021fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <DMA2_Stream0_IRQHandler+0x10>)
 8002202:	f000 ffb5 	bl	8003170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000958 	.word	0x20000958

08002210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return 1;
 8002214:	2301      	movs	r3, #1
}
 8002216:	4618      	mov	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_kill>:

int _kill(int pid, int sig)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800222a:	f009 fc7d 	bl	800bb28 <__errno>
 800222e:	4603      	mov	r3, r0
 8002230:	2216      	movs	r2, #22
 8002232:	601a      	str	r2, [r3, #0]
  return -1;
 8002234:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <_exit>:

void _exit (int status)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002248:	f04f 31ff 	mov.w	r1, #4294967295
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ffe7 	bl	8002220 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002252:	e7fe      	b.n	8002252 <_exit+0x12>

08002254 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	e00a      	b.n	800227c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002266:	f3af 8000 	nop.w
 800226a:	4601      	mov	r1, r0
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	60ba      	str	r2, [r7, #8]
 8002272:	b2ca      	uxtb	r2, r1
 8002274:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	3301      	adds	r3, #1
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	dbf0      	blt.n	8002266 <_read+0x12>
  }

  return len;
 8002284:	687b      	ldr	r3, [r7, #4]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	e009      	b.n	80022b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	60ba      	str	r2, [r7, #8]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3301      	adds	r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	dbf1      	blt.n	80022a0 <_write+0x12>
  }
  return len;
 80022bc:	687b      	ldr	r3, [r7, #4]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_close>:

int _close(int file)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ee:	605a      	str	r2, [r3, #4]
  return 0;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <_isatty>:

int _isatty(int file)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002306:	2301      	movs	r3, #1
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002338:	4a14      	ldr	r2, [pc, #80]	; (800238c <_sbrk+0x5c>)
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <_sbrk+0x60>)
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <_sbrk+0x64>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <_sbrk+0x64>)
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <_sbrk+0x68>)
 8002350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <_sbrk+0x64>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	429a      	cmp	r2, r3
 800235e:	d207      	bcs.n	8002370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002360:	f009 fbe2 	bl	800bb28 <__errno>
 8002364:	4603      	mov	r3, r0
 8002366:	220c      	movs	r2, #12
 8002368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
 800236e:	e009      	b.n	8002384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <_sbrk+0x64>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <_sbrk+0x64>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	4a05      	ldr	r2, [pc, #20]	; (8002394 <_sbrk+0x64>)
 8002380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20018000 	.word	0x20018000
 8002390:	00000400 	.word	0x00000400
 8002394:	20000c5c 	.word	0x20000c5c
 8002398:	20004c40 	.word	0x20004c40

0800239c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <SystemInit+0x20>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	4a05      	ldr	r2, [pc, #20]	; (80023bc <SystemInit+0x20>)
 80023a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023c4:	480d      	ldr	r0, [pc, #52]	; (80023fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023c6:	490e      	ldr	r1, [pc, #56]	; (8002400 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023c8:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023cc:	e002      	b.n	80023d4 <LoopCopyDataInit>

080023ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d2:	3304      	adds	r3, #4

080023d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d8:	d3f9      	bcc.n	80023ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023da:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023dc:	4c0b      	ldr	r4, [pc, #44]	; (800240c <LoopFillZerobss+0x26>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e0:	e001      	b.n	80023e6 <LoopFillZerobss>

080023e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e4:	3204      	adds	r2, #4

080023e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e8:	d3fb      	bcc.n	80023e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023ea:	f7ff ffd7 	bl	800239c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ee:	f009 fba1 	bl	800bb34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023f2:	f7ff f861 	bl	80014b8 <main>
  bx  lr    
 80023f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80023fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002400:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002404:	0800dd44 	.word	0x0800dd44
  ldr r2, =_sbss
 8002408:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800240c:	20004c40 	.word	0x20004c40

08002410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002410:	e7fe      	b.n	8002410 <ADC_IRQHandler>
	...

08002414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_Init+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <HAL_Init+0x40>)
 800241e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002422:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_Init+0x40>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <HAL_Init+0x40>)
 800242a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800242e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_Init+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a07      	ldr	r2, [pc, #28]	; (8002454 <HAL_Init+0x40>)
 8002436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800243c:	2003      	movs	r0, #3
 800243e:	f000 fcca 	bl	8002dd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002442:	200f      	movs	r0, #15
 8002444:	f7ff fe0a 	bl	800205c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002448:	f7ff fbbc 	bl	8001bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40023c00 	.word	0x40023c00

08002458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_IncTick+0x20>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_IncTick+0x24>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4413      	add	r3, r2
 8002468:	4a04      	ldr	r2, [pc, #16]	; (800247c <HAL_IncTick+0x24>)
 800246a:	6013      	str	r3, [r2, #0]
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000008 	.word	0x20000008
 800247c:	20000c60 	.word	0x20000c60

08002480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return uwTick;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_GetTick+0x14>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000c60 	.word	0x20000c60

08002498 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e033      	b.n	8002516 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff fbb0 	bl	8001c1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d118      	bne.n	8002508 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024de:	f023 0302 	bic.w	r3, r3, #2
 80024e2:	f043 0202 	orr.w	r2, r3, #2
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fa48 	bl	8002980 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f023 0303 	bic.w	r3, r3, #3
 80024fe:	f043 0201 	orr.w	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	641a      	str	r2, [r3, #64]	; 0x40
 8002506:	e001      	b.n	800250c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_ADC_Start_DMA+0x1e>
 800253a:	2302      	movs	r3, #2
 800253c:	e0ce      	b.n	80026dc <HAL_ADC_Start_DMA+0x1bc>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b01      	cmp	r3, #1
 8002552:	d018      	beq.n	8002586 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002564:	4b5f      	ldr	r3, [pc, #380]	; (80026e4 <HAL_ADC_Start_DMA+0x1c4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a5f      	ldr	r2, [pc, #380]	; (80026e8 <HAL_ADC_Start_DMA+0x1c8>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	0c9a      	lsrs	r2, r3, #18
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002578:	e002      	b.n	8002580 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	3b01      	subs	r3, #1
 800257e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f9      	bne.n	800257a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002594:	d107      	bne.n	80025a6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	f040 8086 	bne.w	80026c2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d007      	beq.n	80025e8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f4:	d106      	bne.n	8002604 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f023 0206 	bic.w	r2, r3, #6
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	645a      	str	r2, [r3, #68]	; 0x44
 8002602:	e002      	b.n	800260a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002612:	4b36      	ldr	r3, [pc, #216]	; (80026ec <HAL_ADC_Start_DMA+0x1cc>)
 8002614:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261a:	4a35      	ldr	r2, [pc, #212]	; (80026f0 <HAL_ADC_Start_DMA+0x1d0>)
 800261c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	4a34      	ldr	r2, [pc, #208]	; (80026f4 <HAL_ADC_Start_DMA+0x1d4>)
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	4a33      	ldr	r2, [pc, #204]	; (80026f8 <HAL_ADC_Start_DMA+0x1d8>)
 800262c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002636:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002646:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002656:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	334c      	adds	r3, #76	; 0x4c
 8002662:	4619      	mov	r1, r3
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f000 fc98 	bl	8002f9c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10f      	bne.n	8002698 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d129      	bne.n	80026da <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	e020      	b.n	80026da <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a17      	ldr	r2, [pc, #92]	; (80026fc <HAL_ADC_Start_DMA+0x1dc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d11b      	bne.n	80026da <HAL_ADC_Start_DMA+0x1ba>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d114      	bne.n	80026da <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	e00b      	b.n	80026da <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f043 0210 	orr.w	r2, r3, #16
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f043 0201 	orr.w	r2, r3, #1
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000000 	.word	0x20000000
 80026e8:	431bde83 	.word	0x431bde83
 80026ec:	40012300 	.word	0x40012300
 80026f0:	08002b79 	.word	0x08002b79
 80026f4:	08002c33 	.word	0x08002c33
 80026f8:	08002c4f 	.word	0x08002c4f
 80026fc:	40012000 	.word	0x40012000

08002700 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x1c>
 8002754:	2302      	movs	r3, #2
 8002756:	e105      	b.n	8002964 <HAL_ADC_ConfigChannel+0x228>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b09      	cmp	r3, #9
 8002766:	d925      	bls.n	80027b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68d9      	ldr	r1, [r3, #12]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	b29b      	uxth	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	4613      	mov	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4413      	add	r3, r2
 800277c:	3b1e      	subs	r3, #30
 800277e:	2207      	movs	r2, #7
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43da      	mvns	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	400a      	ands	r2, r1
 800278c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68d9      	ldr	r1, [r3, #12]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	4618      	mov	r0, r3
 80027a0:	4603      	mov	r3, r0
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4403      	add	r3, r0
 80027a6:	3b1e      	subs	r3, #30
 80027a8:	409a      	lsls	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	e022      	b.n	80027fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6919      	ldr	r1, [r3, #16]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	4613      	mov	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4413      	add	r3, r2
 80027c8:	2207      	movs	r2, #7
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	400a      	ands	r2, r1
 80027d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6919      	ldr	r1, [r3, #16]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	4618      	mov	r0, r3
 80027ea:	4603      	mov	r3, r0
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4403      	add	r3, r0
 80027f0:	409a      	lsls	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b06      	cmp	r3, #6
 8002800:	d824      	bhi.n	800284c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	3b05      	subs	r3, #5
 8002814:	221f      	movs	r2, #31
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	400a      	ands	r2, r1
 8002822:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	4618      	mov	r0, r3
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	3b05      	subs	r3, #5
 800283e:	fa00 f203 	lsl.w	r2, r0, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	635a      	str	r2, [r3, #52]	; 0x34
 800284a:	e04c      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b0c      	cmp	r3, #12
 8002852:	d824      	bhi.n	800289e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	3b23      	subs	r3, #35	; 0x23
 8002866:	221f      	movs	r2, #31
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43da      	mvns	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	400a      	ands	r2, r1
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	b29b      	uxth	r3, r3
 8002882:	4618      	mov	r0, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	3b23      	subs	r3, #35	; 0x23
 8002890:	fa00 f203 	lsl.w	r2, r0, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	631a      	str	r2, [r3, #48]	; 0x30
 800289c:	e023      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	3b41      	subs	r3, #65	; 0x41
 80028b0:	221f      	movs	r2, #31
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43da      	mvns	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	400a      	ands	r2, r1
 80028be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	4618      	mov	r0, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	3b41      	subs	r3, #65	; 0x41
 80028da:	fa00 f203 	lsl.w	r2, r0, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028e6:	4b22      	ldr	r3, [pc, #136]	; (8002970 <HAL_ADC_ConfigChannel+0x234>)
 80028e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a21      	ldr	r2, [pc, #132]	; (8002974 <HAL_ADC_ConfigChannel+0x238>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d109      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1cc>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b12      	cmp	r3, #18
 80028fa:	d105      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a19      	ldr	r2, [pc, #100]	; (8002974 <HAL_ADC_ConfigChannel+0x238>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d123      	bne.n	800295a <HAL_ADC_ConfigChannel+0x21e>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b10      	cmp	r3, #16
 8002918:	d003      	beq.n	8002922 <HAL_ADC_ConfigChannel+0x1e6>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b11      	cmp	r3, #17
 8002920:	d11b      	bne.n	800295a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b10      	cmp	r3, #16
 8002934:	d111      	bne.n	800295a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_ADC_ConfigChannel+0x23c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a10      	ldr	r2, [pc, #64]	; (800297c <HAL_ADC_ConfigChannel+0x240>)
 800293c:	fba2 2303 	umull	r2, r3, r2, r3
 8002940:	0c9a      	lsrs	r2, r3, #18
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800294c:	e002      	b.n	8002954 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	3b01      	subs	r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f9      	bne.n	800294e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	40012300 	.word	0x40012300
 8002974:	40012000 	.word	0x40012000
 8002978:	20000000 	.word	0x20000000
 800297c:	431bde83 	.word	0x431bde83

08002980 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002988:	4b79      	ldr	r3, [pc, #484]	; (8002b70 <ADC_Init+0x1f0>)
 800298a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6859      	ldr	r1, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	021a      	lsls	r2, r3, #8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6899      	ldr	r1, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	4a58      	ldr	r2, [pc, #352]	; (8002b74 <ADC_Init+0x1f4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d022      	beq.n	8002a5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6899      	ldr	r1, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6899      	ldr	r1, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	e00f      	b.n	8002a7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0202 	bic.w	r2, r2, #2
 8002a8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6899      	ldr	r1, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	7e1b      	ldrb	r3, [r3, #24]
 8002a98:	005a      	lsls	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01b      	beq.n	8002ae4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002aca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6859      	ldr	r1, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	035a      	lsls	r2, r3, #13
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	e007      	b.n	8002af4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002af2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	051a      	lsls	r2, r3, #20
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6899      	ldr	r1, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b36:	025a      	lsls	r2, r3, #9
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6899      	ldr	r1, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	029a      	lsls	r2, r3, #10
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	609a      	str	r2, [r3, #8]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	40012300 	.word	0x40012300
 8002b74:	0f000001 	.word	0x0f000001

08002b78 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d13c      	bne.n	8002c0c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d12b      	bne.n	8002c04 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d127      	bne.n	8002c04 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d006      	beq.n	8002bd0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d119      	bne.n	8002c04 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0220 	bic.w	r2, r2, #32
 8002bde:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d105      	bne.n	8002c04 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	f043 0201 	orr.w	r2, r3, #1
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f7ff fd7b 	bl	8002700 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c0a:	e00e      	b.n	8002c2a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f7ff fd85 	bl	8002728 <HAL_ADC_ErrorCallback>
}
 8002c1e:	e004      	b.n	8002c2a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
}
 8002c2a:	bf00      	nop
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7ff fd67 	bl	8002714 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f043 0204 	orr.w	r2, r3, #4
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f7ff fd5a 	bl	8002728 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cae:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	60d3      	str	r3, [r2, #12]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <__NVIC_GetPriorityGrouping+0x18>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	0a1b      	lsrs	r3, r3, #8
 8002cce:	f003 0307 	and.w	r3, r3, #7
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	db0b      	blt.n	8002d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	f003 021f 	and.w	r2, r3, #31
 8002cf8:	4907      	ldr	r1, [pc, #28]	; (8002d18 <__NVIC_EnableIRQ+0x38>)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	2001      	movs	r0, #1
 8002d02:	fa00 f202 	lsl.w	r2, r0, r2
 8002d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	e000e100 	.word	0xe000e100

08002d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	6039      	str	r1, [r7, #0]
 8002d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	db0a      	blt.n	8002d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	490c      	ldr	r1, [pc, #48]	; (8002d68 <__NVIC_SetPriority+0x4c>)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	0112      	lsls	r2, r2, #4
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d44:	e00a      	b.n	8002d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	4908      	ldr	r1, [pc, #32]	; (8002d6c <__NVIC_SetPriority+0x50>)
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	3b04      	subs	r3, #4
 8002d54:	0112      	lsls	r2, r2, #4
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	440b      	add	r3, r1
 8002d5a:	761a      	strb	r2, [r3, #24]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000e100 	.word	0xe000e100
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	; 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f1c3 0307 	rsb	r3, r3, #7
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	bf28      	it	cs
 8002d8e:	2304      	movcs	r3, #4
 8002d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3304      	adds	r3, #4
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	d902      	bls.n	8002da0 <NVIC_EncodePriority+0x30>
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3b03      	subs	r3, #3
 8002d9e:	e000      	b.n	8002da2 <NVIC_EncodePriority+0x32>
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da4:	f04f 32ff 	mov.w	r2, #4294967295
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43da      	mvns	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	401a      	ands	r2, r3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002db8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc2:	43d9      	mvns	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc8:	4313      	orrs	r3, r2
         );
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3724      	adds	r7, #36	; 0x24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff ff4c 	bl	8002c7c <__NVIC_SetPriorityGrouping>
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dfe:	f7ff ff61 	bl	8002cc4 <__NVIC_GetPriorityGrouping>
 8002e02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	6978      	ldr	r0, [r7, #20]
 8002e0a:	f7ff ffb1 	bl	8002d70 <NVIC_EncodePriority>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff80 	bl	8002d1c <__NVIC_SetPriority>
}
 8002e1c:	bf00      	nop
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ff54 	bl	8002ce0 <__NVIC_EnableIRQ>
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e4c:	f7ff fb18 	bl	8002480 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e099      	b.n	8002f90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e7c:	e00f      	b.n	8002e9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e7e:	f7ff faff 	bl	8002480 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b05      	cmp	r3, #5
 8002e8a:	d908      	bls.n	8002e9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2203      	movs	r2, #3
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e078      	b.n	8002f90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e8      	bne.n	8002e7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4b38      	ldr	r3, [pc, #224]	; (8002f98 <HAL_DMA_Init+0x158>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d107      	bne.n	8002f08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	4313      	orrs	r3, r2
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f023 0307 	bic.w	r3, r3, #7
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d117      	bne.n	8002f62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00e      	beq.n	8002f62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fb0f 	bl	8003568 <DMA_CheckFifoParam>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2240      	movs	r2, #64	; 0x40
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e016      	b.n	8002f90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fac6 	bl	80034fc <DMA_CalcBaseAndBitshift>
 8002f70:	4603      	mov	r3, r0
 8002f72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	223f      	movs	r2, #63	; 0x3f
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	f010803f 	.word	0xf010803f

08002f9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_DMA_Start_IT+0x26>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e040      	b.n	8003044 <HAL_DMA_Start_IT+0xa8>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d12f      	bne.n	8003036 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fa58 	bl	80034a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff4:	223f      	movs	r2, #63	; 0x3f
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0216 	orr.w	r2, r2, #22
 800300a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0208 	orr.w	r2, r2, #8
 8003022:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e005      	b.n	8003042 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800303e:	2302      	movs	r3, #2
 8003040:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003042:	7dfb      	ldrb	r3, [r7, #23]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800305a:	f7ff fa11 	bl	8002480 <HAL_GetTick>
 800305e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d008      	beq.n	800307e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2280      	movs	r2, #128	; 0x80
 8003070:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e052      	b.n	8003124 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0216 	bic.w	r2, r2, #22
 800308c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800309c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d103      	bne.n	80030ae <HAL_DMA_Abort+0x62>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0208 	bic.w	r2, r2, #8
 80030bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0201 	bic.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ce:	e013      	b.n	80030f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030d0:	f7ff f9d6 	bl	8002480 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d90c      	bls.n	80030f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2203      	movs	r2, #3
 80030e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e015      	b.n	8003124 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1e4      	bne.n	80030d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310a:	223f      	movs	r2, #63	; 0x3f
 800310c:	409a      	lsls	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d004      	beq.n	800314a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2280      	movs	r2, #128	; 0x80
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e00c      	b.n	8003164 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2205      	movs	r2, #5
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0201 	bic.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800317c:	4b8e      	ldr	r3, [pc, #568]	; (80033b8 <HAL_DMA_IRQHandler+0x248>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a8e      	ldr	r2, [pc, #568]	; (80033bc <HAL_DMA_IRQHandler+0x24c>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	0a9b      	lsrs	r3, r3, #10
 8003188:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319a:	2208      	movs	r2, #8
 800319c:	409a      	lsls	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01a      	beq.n	80031dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0204 	bic.w	r2, r2, #4
 80031c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c8:	2208      	movs	r2, #8
 80031ca:	409a      	lsls	r2, r3
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d4:	f043 0201 	orr.w	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e0:	2201      	movs	r2, #1
 80031e2:	409a      	lsls	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d012      	beq.n	8003212 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fe:	2201      	movs	r2, #1
 8003200:	409a      	lsls	r2, r3
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320a:	f043 0202 	orr.w	r2, r3, #2
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003216:	2204      	movs	r2, #4
 8003218:	409a      	lsls	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4013      	ands	r3, r2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d012      	beq.n	8003248 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00b      	beq.n	8003248 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	2204      	movs	r2, #4
 8003236:	409a      	lsls	r2, r3
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	f043 0204 	orr.w	r2, r3, #4
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	2210      	movs	r2, #16
 800324e:	409a      	lsls	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4013      	ands	r3, r2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d043      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d03c      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326a:	2210      	movs	r2, #16
 800326c:	409a      	lsls	r2, r3
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d018      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d108      	bne.n	80032a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	d024      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
 800329e:	e01f      	b.n	80032e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01b      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	4798      	blx	r3
 80032b0:	e016      	b.n	80032e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d107      	bne.n	80032d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0208 	bic.w	r2, r2, #8
 80032ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e4:	2220      	movs	r2, #32
 80032e6:	409a      	lsls	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 808f 	beq.w	8003410 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8087 	beq.w	8003410 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003306:	2220      	movs	r2, #32
 8003308:	409a      	lsls	r2, r3
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b05      	cmp	r3, #5
 8003318:	d136      	bne.n	8003388 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0216 	bic.w	r2, r2, #22
 8003328:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003338:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d103      	bne.n	800334a <HAL_DMA_IRQHandler+0x1da>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003346:	2b00      	cmp	r3, #0
 8003348:	d007      	beq.n	800335a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0208 	bic.w	r2, r2, #8
 8003358:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335e:	223f      	movs	r2, #63	; 0x3f
 8003360:	409a      	lsls	r2, r3
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337a:	2b00      	cmp	r3, #0
 800337c:	d07e      	beq.n	800347c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	4798      	blx	r3
        }
        return;
 8003386:	e079      	b.n	800347c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01d      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d031      	beq.n	8003410 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4798      	blx	r3
 80033b4:	e02c      	b.n	8003410 <HAL_DMA_IRQHandler+0x2a0>
 80033b6:	bf00      	nop
 80033b8:	20000000 	.word	0x20000000
 80033bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d023      	beq.n	8003410 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
 80033d0:	e01e      	b.n	8003410 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10f      	bne.n	8003400 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0210 	bic.w	r2, r2, #16
 80033ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003414:	2b00      	cmp	r3, #0
 8003416:	d032      	beq.n	800347e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d022      	beq.n	800346a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2205      	movs	r2, #5
 8003428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	3301      	adds	r3, #1
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	429a      	cmp	r2, r3
 8003446:	d307      	bcc.n	8003458 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f2      	bne.n	800343c <HAL_DMA_IRQHandler+0x2cc>
 8003456:	e000      	b.n	800345a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003458:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	4798      	blx	r3
 800347a:	e000      	b.n	800347e <HAL_DMA_IRQHandler+0x30e>
        return;
 800347c:	bf00      	nop
    }
  }
}
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003492:	b2db      	uxtb	r3, r3
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b40      	cmp	r3, #64	; 0x40
 80034cc:	d108      	bne.n	80034e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034de:	e007      	b.n	80034f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	60da      	str	r2, [r3, #12]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	3b10      	subs	r3, #16
 800350c:	4a14      	ldr	r2, [pc, #80]	; (8003560 <DMA_CalcBaseAndBitshift+0x64>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	091b      	lsrs	r3, r3, #4
 8003514:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003516:	4a13      	ldr	r2, [pc, #76]	; (8003564 <DMA_CalcBaseAndBitshift+0x68>)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4413      	add	r3, r2
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b03      	cmp	r3, #3
 8003528:	d909      	bls.n	800353e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003532:	f023 0303 	bic.w	r3, r3, #3
 8003536:	1d1a      	adds	r2, r3, #4
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	659a      	str	r2, [r3, #88]	; 0x58
 800353c:	e007      	b.n	800354e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003546:	f023 0303 	bic.w	r3, r3, #3
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	aaaaaaab 	.word	0xaaaaaaab
 8003564:	0800d9b8 	.word	0x0800d9b8

08003568 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d11f      	bne.n	80035c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b03      	cmp	r3, #3
 8003586:	d856      	bhi.n	8003636 <DMA_CheckFifoParam+0xce>
 8003588:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <DMA_CheckFifoParam+0x28>)
 800358a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358e:	bf00      	nop
 8003590:	080035a1 	.word	0x080035a1
 8003594:	080035b3 	.word	0x080035b3
 8003598:	080035a1 	.word	0x080035a1
 800359c:	08003637 	.word	0x08003637
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d046      	beq.n	800363a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b0:	e043      	b.n	800363a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035ba:	d140      	bne.n	800363e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c0:	e03d      	b.n	800363e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ca:	d121      	bne.n	8003610 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d837      	bhi.n	8003642 <DMA_CheckFifoParam+0xda>
 80035d2:	a201      	add	r2, pc, #4	; (adr r2, 80035d8 <DMA_CheckFifoParam+0x70>)
 80035d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d8:	080035e9 	.word	0x080035e9
 80035dc:	080035ef 	.word	0x080035ef
 80035e0:	080035e9 	.word	0x080035e9
 80035e4:	08003601 	.word	0x08003601
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
      break;
 80035ec:	e030      	b.n	8003650 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d025      	beq.n	8003646 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035fe:	e022      	b.n	8003646 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003608:	d11f      	bne.n	800364a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800360e:	e01c      	b.n	800364a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d903      	bls.n	800361e <DMA_CheckFifoParam+0xb6>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b03      	cmp	r3, #3
 800361a:	d003      	beq.n	8003624 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800361c:	e018      	b.n	8003650 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
      break;
 8003622:	e015      	b.n	8003650 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00e      	beq.n	800364e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      break;
 8003634:	e00b      	b.n	800364e <DMA_CheckFifoParam+0xe6>
      break;
 8003636:	bf00      	nop
 8003638:	e00a      	b.n	8003650 <DMA_CheckFifoParam+0xe8>
      break;
 800363a:	bf00      	nop
 800363c:	e008      	b.n	8003650 <DMA_CheckFifoParam+0xe8>
      break;
 800363e:	bf00      	nop
 8003640:	e006      	b.n	8003650 <DMA_CheckFifoParam+0xe8>
      break;
 8003642:	bf00      	nop
 8003644:	e004      	b.n	8003650 <DMA_CheckFifoParam+0xe8>
      break;
 8003646:	bf00      	nop
 8003648:	e002      	b.n	8003650 <DMA_CheckFifoParam+0xe8>
      break;   
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <DMA_CheckFifoParam+0xe8>
      break;
 800364e:	bf00      	nop
    }
  } 
  
  return status; 
 8003650:	7bfb      	ldrb	r3, [r7, #15]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop

08003660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003660:	b480      	push	{r7}
 8003662:	b089      	sub	sp, #36	; 0x24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003672:	2300      	movs	r3, #0
 8003674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	e159      	b.n	8003930 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800367c:	2201      	movs	r2, #1
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	429a      	cmp	r2, r3
 8003696:	f040 8148 	bne.w	800392a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d005      	beq.n	80036b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d130      	bne.n	8003714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	2203      	movs	r2, #3
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036e8:	2201      	movs	r2, #1
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 0201 	and.w	r2, r3, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	2b03      	cmp	r3, #3
 800371e:	d017      	beq.n	8003750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	2203      	movs	r2, #3
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d123      	bne.n	80037a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	08da      	lsrs	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3208      	adds	r2, #8
 8003764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	220f      	movs	r2, #15
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	08da      	lsrs	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3208      	adds	r2, #8
 800379e:	69b9      	ldr	r1, [r7, #24]
 80037a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 0203 	and.w	r2, r3, #3
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80a2 	beq.w	800392a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	4b57      	ldr	r3, [pc, #348]	; (8003948 <HAL_GPIO_Init+0x2e8>)
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	4a56      	ldr	r2, [pc, #344]	; (8003948 <HAL_GPIO_Init+0x2e8>)
 80037f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f4:	6453      	str	r3, [r2, #68]	; 0x44
 80037f6:	4b54      	ldr	r3, [pc, #336]	; (8003948 <HAL_GPIO_Init+0x2e8>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003802:	4a52      	ldr	r2, [pc, #328]	; (800394c <HAL_GPIO_Init+0x2ec>)
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	089b      	lsrs	r3, r3, #2
 8003808:	3302      	adds	r3, #2
 800380a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	220f      	movs	r2, #15
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4013      	ands	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a49      	ldr	r2, [pc, #292]	; (8003950 <HAL_GPIO_Init+0x2f0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d019      	beq.n	8003862 <HAL_GPIO_Init+0x202>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a48      	ldr	r2, [pc, #288]	; (8003954 <HAL_GPIO_Init+0x2f4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <HAL_GPIO_Init+0x1fe>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a47      	ldr	r2, [pc, #284]	; (8003958 <HAL_GPIO_Init+0x2f8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00d      	beq.n	800385a <HAL_GPIO_Init+0x1fa>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a46      	ldr	r2, [pc, #280]	; (800395c <HAL_GPIO_Init+0x2fc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d007      	beq.n	8003856 <HAL_GPIO_Init+0x1f6>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a45      	ldr	r2, [pc, #276]	; (8003960 <HAL_GPIO_Init+0x300>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <HAL_GPIO_Init+0x1f2>
 800384e:	2304      	movs	r3, #4
 8003850:	e008      	b.n	8003864 <HAL_GPIO_Init+0x204>
 8003852:	2307      	movs	r3, #7
 8003854:	e006      	b.n	8003864 <HAL_GPIO_Init+0x204>
 8003856:	2303      	movs	r3, #3
 8003858:	e004      	b.n	8003864 <HAL_GPIO_Init+0x204>
 800385a:	2302      	movs	r3, #2
 800385c:	e002      	b.n	8003864 <HAL_GPIO_Init+0x204>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <HAL_GPIO_Init+0x204>
 8003862:	2300      	movs	r3, #0
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	f002 0203 	and.w	r2, r2, #3
 800386a:	0092      	lsls	r2, r2, #2
 800386c:	4093      	lsls	r3, r2
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003874:	4935      	ldr	r1, [pc, #212]	; (800394c <HAL_GPIO_Init+0x2ec>)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	089b      	lsrs	r3, r3, #2
 800387a:	3302      	adds	r3, #2
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003882:	4b38      	ldr	r3, [pc, #224]	; (8003964 <HAL_GPIO_Init+0x304>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	43db      	mvns	r3, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4013      	ands	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038a6:	4a2f      	ldr	r2, [pc, #188]	; (8003964 <HAL_GPIO_Init+0x304>)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038ac:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <HAL_GPIO_Init+0x304>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038d0:	4a24      	ldr	r2, [pc, #144]	; (8003964 <HAL_GPIO_Init+0x304>)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038d6:	4b23      	ldr	r3, [pc, #140]	; (8003964 <HAL_GPIO_Init+0x304>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038fa:	4a1a      	ldr	r2, [pc, #104]	; (8003964 <HAL_GPIO_Init+0x304>)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003900:	4b18      	ldr	r3, [pc, #96]	; (8003964 <HAL_GPIO_Init+0x304>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003924:	4a0f      	ldr	r2, [pc, #60]	; (8003964 <HAL_GPIO_Init+0x304>)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3301      	adds	r3, #1
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b0f      	cmp	r3, #15
 8003934:	f67f aea2 	bls.w	800367c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003938:	bf00      	nop
 800393a:	bf00      	nop
 800393c:	3724      	adds	r7, #36	; 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800
 800394c:	40013800 	.word	0x40013800
 8003950:	40020000 	.word	0x40020000
 8003954:	40020400 	.word	0x40020400
 8003958:	40020800 	.word	0x40020800
 800395c:	40020c00 	.word	0x40020c00
 8003960:	40021000 	.word	0x40021000
 8003964:	40013c00 	.word	0x40013c00

08003968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	807b      	strh	r3, [r7, #2]
 8003974:	4613      	mov	r3, r2
 8003976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003978:	787b      	ldrb	r3, [r7, #1]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800397e:	887a      	ldrh	r2, [r7, #2]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003984:	e003      	b.n	800398e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003986:	887b      	ldrh	r3, [r7, #2]
 8003988:	041a      	lsls	r2, r3, #16
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	619a      	str	r2, [r3, #24]
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e12b      	b.n	8003c06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fe f9a2 	bl	8001d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2224      	movs	r2, #36	; 0x24
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0201 	bic.w	r2, r2, #1
 80039de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a00:	f002 fcc6 	bl	8006390 <HAL_RCC_GetPCLK1Freq>
 8003a04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4a81      	ldr	r2, [pc, #516]	; (8003c10 <HAL_I2C_Init+0x274>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d807      	bhi.n	8003a20 <HAL_I2C_Init+0x84>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4a80      	ldr	r2, [pc, #512]	; (8003c14 <HAL_I2C_Init+0x278>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	bf94      	ite	ls
 8003a18:	2301      	movls	r3, #1
 8003a1a:	2300      	movhi	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	e006      	b.n	8003a2e <HAL_I2C_Init+0x92>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4a7d      	ldr	r2, [pc, #500]	; (8003c18 <HAL_I2C_Init+0x27c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	bf94      	ite	ls
 8003a28:	2301      	movls	r3, #1
 8003a2a:	2300      	movhi	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e0e7      	b.n	8003c06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4a78      	ldr	r2, [pc, #480]	; (8003c1c <HAL_I2C_Init+0x280>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	0c9b      	lsrs	r3, r3, #18
 8003a40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4a6a      	ldr	r2, [pc, #424]	; (8003c10 <HAL_I2C_Init+0x274>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d802      	bhi.n	8003a70 <HAL_I2C_Init+0xd4>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	e009      	b.n	8003a84 <HAL_I2C_Init+0xe8>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	4a69      	ldr	r2, [pc, #420]	; (8003c20 <HAL_I2C_Init+0x284>)
 8003a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a80:	099b      	lsrs	r3, r3, #6
 8003a82:	3301      	adds	r3, #1
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	495c      	ldr	r1, [pc, #368]	; (8003c10 <HAL_I2C_Init+0x274>)
 8003aa0:	428b      	cmp	r3, r1
 8003aa2:	d819      	bhi.n	8003ad8 <HAL_I2C_Init+0x13c>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1e59      	subs	r1, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ab2:	1c59      	adds	r1, r3, #1
 8003ab4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ab8:	400b      	ands	r3, r1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_I2C_Init+0x138>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1e59      	subs	r1, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003acc:	3301      	adds	r3, #1
 8003ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad2:	e051      	b.n	8003b78 <HAL_I2C_Init+0x1dc>
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	e04f      	b.n	8003b78 <HAL_I2C_Init+0x1dc>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d111      	bne.n	8003b04 <HAL_I2C_Init+0x168>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	1e58      	subs	r0, r3, #1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6859      	ldr	r1, [r3, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	440b      	add	r3, r1
 8003aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003af2:	3301      	adds	r3, #1
 8003af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e012      	b.n	8003b2a <HAL_I2C_Init+0x18e>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1e58      	subs	r0, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	0099      	lsls	r1, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_I2C_Init+0x196>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e022      	b.n	8003b78 <HAL_I2C_Init+0x1dc>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10e      	bne.n	8003b58 <HAL_I2C_Init+0x1bc>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1e58      	subs	r0, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6859      	ldr	r1, [r3, #4]
 8003b42:	460b      	mov	r3, r1
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	440b      	add	r3, r1
 8003b48:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b56:	e00f      	b.n	8003b78 <HAL_I2C_Init+0x1dc>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	1e58      	subs	r0, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6859      	ldr	r1, [r3, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	0099      	lsls	r1, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6e:	3301      	adds	r3, #1
 8003b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	6809      	ldr	r1, [r1, #0]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ba6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6911      	ldr	r1, [r2, #16]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68d2      	ldr	r2, [r2, #12]
 8003bb2:	4311      	orrs	r1, r2
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	000186a0 	.word	0x000186a0
 8003c14:	001e847f 	.word	0x001e847f
 8003c18:	003d08ff 	.word	0x003d08ff
 8003c1c:	431bde83 	.word	0x431bde83
 8003c20:	10624dd3 	.word	0x10624dd3

08003c24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	607a      	str	r2, [r7, #4]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	460b      	mov	r3, r1
 8003c32:	817b      	strh	r3, [r7, #10]
 8003c34:	4613      	mov	r3, r2
 8003c36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c38:	f7fe fc22 	bl	8002480 <HAL_GetTick>
 8003c3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b20      	cmp	r3, #32
 8003c48:	f040 80e0 	bne.w	8003e0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2319      	movs	r3, #25
 8003c52:	2201      	movs	r2, #1
 8003c54:	4970      	ldr	r1, [pc, #448]	; (8003e18 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f001 fd56 	bl	8005708 <I2C_WaitOnFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c62:	2302      	movs	r3, #2
 8003c64:	e0d3      	b.n	8003e0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_I2C_Master_Transmit+0x50>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e0cc      	b.n	8003e0e <HAL_I2C_Master_Transmit+0x1ea>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d007      	beq.n	8003c9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ca8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2221      	movs	r2, #33	; 0x21
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	893a      	ldrh	r2, [r7, #8]
 8003cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4a50      	ldr	r2, [pc, #320]	; (8003e1c <HAL_I2C_Master_Transmit+0x1f8>)
 8003cda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cdc:	8979      	ldrh	r1, [r7, #10]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	6a3a      	ldr	r2, [r7, #32]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f001 fbe6 	bl	80054b4 <I2C_MasterRequestWrite>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e08d      	b.n	8003e0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d08:	e066      	b.n	8003dd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	6a39      	ldr	r1, [r7, #32]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f001 fdd0 	bl	80058b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00d      	beq.n	8003d36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d107      	bne.n	8003d32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e06b      	b.n	8003e0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	781a      	ldrb	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d11b      	bne.n	8003dac <HAL_I2C_Master_Transmit+0x188>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d017      	beq.n	8003dac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	781a      	ldrb	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	6a39      	ldr	r1, [r7, #32]
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f001 fdc0 	bl	8005936 <I2C_WaitOnBTFFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00d      	beq.n	8003dd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d107      	bne.n	8003dd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e01a      	b.n	8003e0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d194      	bne.n	8003d0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e000      	b.n	8003e0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	00100002 	.word	0x00100002
 8003e1c:	ffff0000 	.word	0xffff0000

08003e20 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	607a      	str	r2, [r7, #4]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	817b      	strh	r3, [r7, #10]
 8003e30:	4613      	mov	r3, r2
 8003e32:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	f040 808d 	bne.w	8003f60 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e46:	4b4a      	ldr	r3, [pc, #296]	; (8003f70 <HAL_I2C_Master_Receive_IT+0x150>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	08db      	lsrs	r3, r3, #3
 8003e4c:	4a49      	ldr	r2, [pc, #292]	; (8003f74 <HAL_I2C_Master_Receive_IT+0x154>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	0a1a      	lsrs	r2, r3, #8
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	009a      	lsls	r2, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d116      	bne.n	8003e9a <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f043 0220 	orr.w	r2, r3, #32
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e063      	b.n	8003f62 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d0db      	beq.n	8003e60 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_I2C_Master_Receive_IT+0x96>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e055      	b.n	8003f62 <HAL_I2C_Master_Receive_IT+0x142>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d007      	beq.n	8003edc <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2222      	movs	r2, #34	; 0x22
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2210      	movs	r2, #16
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	893a      	ldrh	r2, [r7, #8]
 8003f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4a17      	ldr	r2, [pc, #92]	; (8003f78 <HAL_I2C_Master_Receive_IT+0x158>)
 8003f1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003f1e:	897a      	ldrh	r2, [r7, #10]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003f3a:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f4a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f5a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	e000      	b.n	8003f62 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8003f60:	2302      	movs	r3, #2
  }
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000000 	.word	0x20000000
 8003f74:	14f8b589 	.word	0x14f8b589
 8003f78:	ffff0000 	.word	0xffff0000

08003f7c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f9c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	2b10      	cmp	r3, #16
 8003faa:	d003      	beq.n	8003fb4 <HAL_I2C_EV_IRQHandler+0x38>
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	f040 80b1 	bne.w	8004116 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10d      	bne.n	8003fea <HAL_I2C_EV_IRQHandler+0x6e>
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003fd4:	d003      	beq.n	8003fde <HAL_I2C_EV_IRQHandler+0x62>
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2C_EV_IRQHandler+0x66>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_I2C_EV_IRQHandler+0x68>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	f000 8114 	beq.w	8004212 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00b      	beq.n	800400c <HAL_I2C_EV_IRQHandler+0x90>
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d006      	beq.n	800400c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f001 fd3b 	bl	8005a7a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fcab 	bl	8004960 <I2C_Master_SB>
 800400a:	e083      	b.n	8004114 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <HAL_I2C_EV_IRQHandler+0xac>
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fd23 	bl	8004a6c <I2C_Master_ADD10>
 8004026:	e075      	b.n	8004114 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_I2C_EV_IRQHandler+0xc8>
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fd3f 	bl	8004ac0 <I2C_Master_ADDR>
 8004042:	e067      	b.n	8004114 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	d036      	beq.n	80040bc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405c:	f000 80db 	beq.w	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00d      	beq.n	8004086 <HAL_I2C_EV_IRQHandler+0x10a>
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <HAL_I2C_EV_IRQHandler+0x10a>
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d103      	bne.n	8004086 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f923 	bl	80042ca <I2C_MasterTransmit_TXE>
 8004084:	e046      	b.n	8004114 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 80c2 	beq.w	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80bc 	beq.w	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800409e:	7bbb      	ldrb	r3, [r7, #14]
 80040a0:	2b21      	cmp	r3, #33	; 0x21
 80040a2:	d103      	bne.n	80040ac <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f9ac 	bl	8004402 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040aa:	e0b4      	b.n	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	f040 80b1 	bne.w	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fa1a 	bl	80044ee <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040ba:	e0ac      	b.n	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ca:	f000 80a4 	beq.w	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00d      	beq.n	80040f4 <HAL_I2C_EV_IRQHandler+0x178>
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d008      	beq.n	80040f4 <HAL_I2C_EV_IRQHandler+0x178>
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d103      	bne.n	80040f4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fa92 	bl	8004616 <I2C_MasterReceive_RXNE>
 80040f2:	e00f      	b.n	8004114 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 808b 	beq.w	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 8085 	beq.w	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fb3d 	bl	800478c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004112:	e080      	b.n	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
 8004114:	e07f      	b.n	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d004      	beq.n	8004128 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	e007      	b.n	8004138 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d011      	beq.n	8004166 <HAL_I2C_EV_IRQHandler+0x1ea>
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00c      	beq.n	8004166 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800415c:	69b9      	ldr	r1, [r7, #24]
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fefd 	bl	8004f5e <I2C_Slave_ADDR>
 8004164:	e05a      	b.n	800421c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	f003 0310 	and.w	r3, r3, #16
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_I2C_EV_IRQHandler+0x206>
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 ff38 	bl	8004ff0 <I2C_Slave_STOPF>
 8004180:	e04c      	b.n	800421c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004182:	7bbb      	ldrb	r3, [r7, #14]
 8004184:	2b21      	cmp	r3, #33	; 0x21
 8004186:	d002      	beq.n	800418e <HAL_I2C_EV_IRQHandler+0x212>
 8004188:	7bbb      	ldrb	r3, [r7, #14]
 800418a:	2b29      	cmp	r3, #41	; 0x29
 800418c:	d120      	bne.n	80041d0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00d      	beq.n	80041b4 <HAL_I2C_EV_IRQHandler+0x238>
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d008      	beq.n	80041b4 <HAL_I2C_EV_IRQHandler+0x238>
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d103      	bne.n	80041b4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fe18 	bl	8004de2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041b2:	e032      	b.n	800421a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d02d      	beq.n	800421a <HAL_I2C_EV_IRQHandler+0x29e>
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d028      	beq.n	800421a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fe47 	bl	8004e5c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041ce:	e024      	b.n	800421a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00d      	beq.n	80041f6 <HAL_I2C_EV_IRQHandler+0x27a>
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_I2C_EV_IRQHandler+0x27a>
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d103      	bne.n	80041f6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fe55 	bl	8004e9e <I2C_SlaveReceive_RXNE>
 80041f4:	e012      	b.n	800421c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00d      	beq.n	800421c <HAL_I2C_EV_IRQHandler+0x2a0>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004206:	2b00      	cmp	r3, #0
 8004208:	d008      	beq.n	800421c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fe85 	bl	8004f1a <I2C_SlaveReceive_BTF>
 8004210:	e004      	b.n	800421c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004212:	bf00      	nop
 8004214:	e002      	b.n	800421c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004216:	bf00      	nop
 8004218:	e000      	b.n	800421c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800421a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	460b      	mov	r3, r1
 8004268:	70fb      	strb	r3, [r7, #3]
 800426a:	4613      	mov	r3, r2
 800426c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b084      	sub	sp, #16
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042e0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d150      	bne.n	8004392 <I2C_MasterTransmit_TXE+0xc8>
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b21      	cmp	r3, #33	; 0x21
 80042f4:	d14d      	bne.n	8004392 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d01d      	beq.n	8004338 <I2C_MasterTransmit_TXE+0x6e>
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b20      	cmp	r3, #32
 8004300:	d01a      	beq.n	8004338 <I2C_MasterTransmit_TXE+0x6e>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004308:	d016      	beq.n	8004338 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004318:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2211      	movs	r2, #17
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff ff76 	bl	8004222 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004336:	e060      	b.n	80043fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004346:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004356:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b40      	cmp	r3, #64	; 0x40
 8004370:	d107      	bne.n	8004382 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff ff87 	bl	800428e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004380:	e03b      	b.n	80043fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff ff49 	bl	8004222 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004390:	e033      	b.n	80043fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	2b21      	cmp	r3, #33	; 0x21
 8004396:	d005      	beq.n	80043a4 <I2C_MasterTransmit_TXE+0xda>
 8004398:	7bbb      	ldrb	r3, [r7, #14]
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d12d      	bne.n	80043fa <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	2b22      	cmp	r3, #34	; 0x22
 80043a2:	d12a      	bne.n	80043fa <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d108      	bne.n	80043c0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043bc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80043be:	e01c      	b.n	80043fa <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b40      	cmp	r3, #64	; 0x40
 80043ca:	d103      	bne.n	80043d4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f88e 	bl	80044ee <I2C_MemoryTransmit_TXE_BTF>
}
 80043d2:	e012      	b.n	80043fa <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80043f8:	e7ff      	b.n	80043fa <I2C_MasterTransmit_TXE+0x130>
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b21      	cmp	r3, #33	; 0x21
 800441a:	d164      	bne.n	80044e6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d012      	beq.n	800444c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	781a      	ldrb	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800444a:	e04c      	b.n	80044e6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b08      	cmp	r3, #8
 8004450:	d01d      	beq.n	800448e <I2C_MasterTransmit_BTF+0x8c>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b20      	cmp	r3, #32
 8004456:	d01a      	beq.n	800448e <I2C_MasterTransmit_BTF+0x8c>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800445e:	d016      	beq.n	800448e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800446e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2211      	movs	r2, #17
 8004474:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff fecb 	bl	8004222 <HAL_I2C_MasterTxCpltCallback>
}
 800448c:	e02b      	b.n	80044e6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800449c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ac:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b40      	cmp	r3, #64	; 0x40
 80044c6:	d107      	bne.n	80044d8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff fedc 	bl	800428e <HAL_I2C_MemTxCpltCallback>
}
 80044d6:	e006      	b.n	80044e6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff fe9e 	bl	8004222 <HAL_I2C_MasterTxCpltCallback>
}
 80044e6:	bf00      	nop
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b084      	sub	sp, #16
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004502:	2b00      	cmp	r3, #0
 8004504:	d11d      	bne.n	8004542 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450a:	2b01      	cmp	r3, #1
 800450c:	d10b      	bne.n	8004526 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004512:	b2da      	uxtb	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800451e:	1c9a      	adds	r2, r3, #2
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004524:	e073      	b.n	800460e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452a:	b29b      	uxth	r3, r3
 800452c:	121b      	asrs	r3, r3, #8
 800452e:	b2da      	uxtb	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004540:	e065      	b.n	800460e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004546:	2b01      	cmp	r3, #1
 8004548:	d10b      	bne.n	8004562 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800454e:	b2da      	uxtb	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004560:	e055      	b.n	800460e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004566:	2b02      	cmp	r3, #2
 8004568:	d151      	bne.n	800460e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	2b22      	cmp	r3, #34	; 0x22
 800456e:	d10d      	bne.n	800458c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800457e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	651a      	str	r2, [r3, #80]	; 0x50
}
 800458a:	e040      	b.n	800460e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d015      	beq.n	80045c2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	2b21      	cmp	r3, #33	; 0x21
 800459a:	d112      	bne.n	80045c2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	781a      	ldrb	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045c0:	e025      	b.n	800460e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d120      	bne.n	800460e <I2C_MemoryTransmit_TXE_BTF+0x120>
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	2b21      	cmp	r3, #33	; 0x21
 80045d0:	d11d      	bne.n	800460e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045e0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff fe40 	bl	800428e <HAL_I2C_MemTxCpltCallback>
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b22      	cmp	r3, #34	; 0x22
 8004628:	f040 80ac 	bne.w	8004784 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b03      	cmp	r3, #3
 8004638:	d921      	bls.n	800467e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b03      	cmp	r3, #3
 8004668:	f040 808c 	bne.w	8004784 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800467a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800467c:	e082      	b.n	8004784 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	2b02      	cmp	r3, #2
 8004684:	d075      	beq.n	8004772 <I2C_MasterReceive_RXNE+0x15c>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d002      	beq.n	8004692 <I2C_MasterReceive_RXNE+0x7c>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d16f      	bne.n	8004772 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f001 f990 	bl	80059b8 <I2C_WaitOnSTOPRequestThroughIT>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d142      	bne.n	8004724 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ac:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691a      	ldr	r2, [r3, #16]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d10a      	bne.n	800470e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fc fe10 	bl	800132c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800470c:	e03a      	b.n	8004784 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2212      	movs	r2, #18
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7fc fe41 	bl	80013a4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004722:	e02f      	b.n	8004784 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004732:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff fd99 	bl	80042a2 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004770:	e008      	b.n	8004784 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004780:	605a      	str	r2, [r3, #4]
}
 8004782:	e7ff      	b.n	8004784 <I2C_MasterReceive_RXNE+0x16e>
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d11b      	bne.n	80047dc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80047da:	e0bd      	b.n	8004958 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d129      	bne.n	800483a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d00a      	beq.n	8004812 <I2C_MasterReceive_BTF+0x86>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d007      	beq.n	8004812 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004810:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004838:	e08e      	b.n	8004958 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d176      	bne.n	8004932 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d002      	beq.n	8004850 <I2C_MasterReceive_BTF+0xc4>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b10      	cmp	r3, #16
 800484e:	d108      	bne.n	8004862 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	e019      	b.n	8004896 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b04      	cmp	r3, #4
 8004866:	d002      	beq.n	800486e <I2C_MasterReceive_BTF+0xe2>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d108      	bne.n	8004880 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e00a      	b.n	8004896 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b10      	cmp	r3, #16
 8004884:	d007      	beq.n	8004896 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004894:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048f0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b40      	cmp	r3, #64	; 0x40
 8004904:	d10a      	bne.n	800491c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7fc fd09 	bl	800132c <HAL_I2C_MemRxCpltCallback>
}
 800491a:	e01d      	b.n	8004958 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2212      	movs	r2, #18
 8004928:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fc fd3a 	bl	80013a4 <HAL_I2C_MasterRxCpltCallback>
}
 8004930:	e012      	b.n	8004958 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004958:	bf00      	nop
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b40      	cmp	r3, #64	; 0x40
 8004972:	d117      	bne.n	80049a4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004978:	2b00      	cmp	r3, #0
 800497a:	d109      	bne.n	8004990 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004980:	b2db      	uxtb	r3, r3
 8004982:	461a      	mov	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800498c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800498e:	e067      	b.n	8004a60 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f043 0301 	orr.w	r3, r3, #1
 800499a:	b2da      	uxtb	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	611a      	str	r2, [r3, #16]
}
 80049a2:	e05d      	b.n	8004a60 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049ac:	d133      	bne.n	8004a16 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b21      	cmp	r3, #33	; 0x21
 80049b8:	d109      	bne.n	80049ce <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049ca:	611a      	str	r2, [r3, #16]
 80049cc:	e008      	b.n	80049e0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d004      	beq.n	80049f2 <I2C_Master_SB+0x92>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d108      	bne.n	8004a04 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d032      	beq.n	8004a60 <I2C_Master_SB+0x100>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d02d      	beq.n	8004a60 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a12:	605a      	str	r2, [r3, #4]
}
 8004a14:	e024      	b.n	8004a60 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10e      	bne.n	8004a3c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	11db      	asrs	r3, r3, #7
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	f003 0306 	and.w	r3, r3, #6
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f063 030f 	orn	r3, r3, #15
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	611a      	str	r2, [r3, #16]
}
 8004a3a:	e011      	b.n	8004a60 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d10d      	bne.n	8004a60 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	11db      	asrs	r3, r3, #7
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	f003 0306 	and.w	r3, r3, #6
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	f063 030e 	orn	r3, r3, #14
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	611a      	str	r2, [r3, #16]
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d004      	beq.n	8004a92 <I2C_Master_ADD10+0x26>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d108      	bne.n	8004aa4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00c      	beq.n	8004ab4 <I2C_Master_ADD10+0x48>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ab2:	605a      	str	r2, [r3, #4]
  }
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b091      	sub	sp, #68	; 0x44
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ace:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b22      	cmp	r3, #34	; 0x22
 8004ae8:	f040 8169 	bne.w	8004dbe <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10f      	bne.n	8004b14 <I2C_Master_ADDR+0x54>
 8004af4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004af8:	2b40      	cmp	r3, #64	; 0x40
 8004afa:	d10b      	bne.n	8004b14 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004afc:	2300      	movs	r3, #0
 8004afe:	633b      	str	r3, [r7, #48]	; 0x30
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	633b      	str	r3, [r7, #48]	; 0x30
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	e160      	b.n	8004dd6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d11d      	bne.n	8004b58 <I2C_Master_ADDR+0x98>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b24:	d118      	bne.n	8004b58 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b26:	2300      	movs	r3, #0
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b4a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	651a      	str	r2, [r3, #80]	; 0x50
 8004b56:	e13e      	b.n	8004dd6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d113      	bne.n	8004b8a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b62:	2300      	movs	r3, #0
 8004b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	e115      	b.n	8004db6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	f040 808a 	bne.w	8004caa <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b9c:	d137      	bne.n	8004c0e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bac:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bbc:	d113      	bne.n	8004be6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bcc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bce:	2300      	movs	r3, #0
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	e0e7      	b.n	8004db6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be6:	2300      	movs	r3, #0
 8004be8:	623b      	str	r3, [r7, #32]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	623b      	str	r3, [r7, #32]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	623b      	str	r3, [r7, #32]
 8004bfa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	e0d3      	b.n	8004db6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d02e      	beq.n	8004c72 <I2C_Master_ADDR+0x1b2>
 8004c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d02b      	beq.n	8004c72 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1c:	2b12      	cmp	r3, #18
 8004c1e:	d102      	bne.n	8004c26 <I2C_Master_ADDR+0x166>
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d125      	bne.n	8004c72 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d00e      	beq.n	8004c4a <I2C_Master_ADDR+0x18a>
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d00b      	beq.n	8004c4a <I2C_Master_ADDR+0x18a>
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	d008      	beq.n	8004c4a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	e007      	b.n	8004c5a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c58:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	e0a1      	b.n	8004db6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c80:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c82:	2300      	movs	r3, #0
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	61bb      	str	r3, [r7, #24]
 8004c96:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	e085      	b.n	8004db6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d14d      	bne.n	8004d50 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d016      	beq.n	8004ce8 <I2C_Master_ADDR+0x228>
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d013      	beq.n	8004ce8 <I2C_Master_ADDR+0x228>
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	2b10      	cmp	r3, #16
 8004cc4:	d010      	beq.n	8004ce8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	e007      	b.n	8004cf8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cf6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d06:	d117      	bne.n	8004d38 <I2C_Master_ADDR+0x278>
 8004d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d0e:	d00b      	beq.n	8004d28 <I2C_Master_ADDR+0x268>
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d008      	beq.n	8004d28 <I2C_Master_ADDR+0x268>
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d005      	beq.n	8004d28 <I2C_Master_ADDR+0x268>
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	2b10      	cmp	r3, #16
 8004d20:	d002      	beq.n	8004d28 <I2C_Master_ADDR+0x268>
 8004d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d107      	bne.n	8004d38 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d36:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	e032      	b.n	8004db6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d5e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d6e:	d117      	bne.n	8004da0 <I2C_Master_ADDR+0x2e0>
 8004d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d76:	d00b      	beq.n	8004d90 <I2C_Master_ADDR+0x2d0>
 8004d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d008      	beq.n	8004d90 <I2C_Master_ADDR+0x2d0>
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d005      	beq.n	8004d90 <I2C_Master_ADDR+0x2d0>
 8004d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d86:	2b10      	cmp	r3, #16
 8004d88:	d002      	beq.n	8004d90 <I2C_Master_ADDR+0x2d0>
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d107      	bne.n	8004da0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d9e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da0:	2300      	movs	r3, #0
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004dbc:	e00b      	b.n	8004dd6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
}
 8004dd4:	e7ff      	b.n	8004dd6 <I2C_Master_ADDR+0x316>
 8004dd6:	bf00      	nop
 8004dd8:	3744      	adds	r7, #68	; 0x44
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d02b      	beq.n	8004e54 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	781a      	ldrb	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d114      	bne.n	8004e54 <I2C_SlaveTransmit_TXE+0x72>
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
 8004e2c:	2b29      	cmp	r3, #41	; 0x29
 8004e2e:	d111      	bne.n	8004e54 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e3e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2221      	movs	r2, #33	; 0x21
 8004e44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2228      	movs	r2, #40	; 0x28
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff f9f1 	bl	8004236 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d011      	beq.n	8004e92 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	781a      	ldrb	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d02c      	beq.n	8004f12 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d114      	bne.n	8004f12 <I2C_SlaveReceive_RXNE+0x74>
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	2b2a      	cmp	r3, #42	; 0x2a
 8004eec:	d111      	bne.n	8004f12 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2222      	movs	r2, #34	; 0x22
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2228      	movs	r2, #40	; 0x28
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff f99c 	bl	800424a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004f12:	bf00      	nop
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d012      	beq.n	8004f52 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f78:	2b28      	cmp	r3, #40	; 0x28
 8004f7a:	d125      	bne.n	8004fc8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f8a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004f96:	2301      	movs	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d103      	bne.n	8004fac <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	81bb      	strh	r3, [r7, #12]
 8004faa:	e002      	b.n	8004fb2 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004fba:	89ba      	ldrh	r2, [r7, #12]
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7ff f94c 	bl	800425e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004fc6:	e00e      	b.n	8004fe6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60bb      	str	r3, [r7, #8]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	60bb      	str	r3, [r7, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	60bb      	str	r3, [r7, #8]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004fe6:	bf00      	nop
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ffe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800500e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005010:	2300      	movs	r3, #0
 8005012:	60bb      	str	r3, [r7, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	60bb      	str	r3, [r7, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800504c:	d172      	bne.n	8005134 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	2b22      	cmp	r3, #34	; 0x22
 8005052:	d002      	beq.n	800505a <I2C_Slave_STOPF+0x6a>
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	2b2a      	cmp	r3, #42	; 0x2a
 8005058:	d135      	bne.n	80050c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	b29a      	uxth	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f043 0204 	orr.w	r2, r3, #4
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800508c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	4618      	mov	r0, r3
 8005094:	f7fe f9f6 	bl	8003484 <HAL_DMA_GetState>
 8005098:	4603      	mov	r3, r0
 800509a:	2b01      	cmp	r3, #1
 800509c:	d049      	beq.n	8005132 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a2:	4a69      	ldr	r2, [pc, #420]	; (8005248 <I2C_Slave_STOPF+0x258>)
 80050a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fe f83e 	bl	800312c <HAL_DMA_Abort_IT>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d03d      	beq.n	8005132 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050c0:	4610      	mov	r0, r2
 80050c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050c4:	e035      	b.n	8005132 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d005      	beq.n	80050ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	f043 0204 	orr.w	r2, r3, #4
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe f9c0 	bl	8003484 <HAL_DMA_GetState>
 8005104:	4603      	mov	r3, r0
 8005106:	2b01      	cmp	r3, #1
 8005108:	d014      	beq.n	8005134 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510e:	4a4e      	ldr	r2, [pc, #312]	; (8005248 <I2C_Slave_STOPF+0x258>)
 8005110:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe f808 	bl	800312c <HAL_DMA_Abort_IT>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d008      	beq.n	8005134 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800512c:	4610      	mov	r0, r2
 800512e:	4798      	blx	r3
 8005130:	e000      	b.n	8005134 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005132:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d03e      	beq.n	80051bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b04      	cmp	r3, #4
 800514a:	d112      	bne.n	8005172 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005168:	b29b      	uxth	r3, r3
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517c:	2b40      	cmp	r3, #64	; 0x40
 800517e:	d112      	bne.n	80051a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691a      	ldr	r2, [r3, #16]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	f043 0204 	orr.w	r2, r3, #4
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f843 	bl	8005250 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80051ca:	e039      	b.n	8005240 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	2b2a      	cmp	r3, #42	; 0x2a
 80051d0:	d109      	bne.n	80051e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2228      	movs	r2, #40	; 0x28
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff f832 	bl	800424a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b28      	cmp	r3, #40	; 0x28
 80051f0:	d111      	bne.n	8005216 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a15      	ldr	r2, [pc, #84]	; (800524c <I2C_Slave_STOPF+0x25c>)
 80051f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff f833 	bl	800427a <HAL_I2C_ListenCpltCallback>
}
 8005214:	e014      	b.n	8005240 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	2b22      	cmp	r3, #34	; 0x22
 800521c:	d002      	beq.n	8005224 <I2C_Slave_STOPF+0x234>
 800521e:	7bfb      	ldrb	r3, [r7, #15]
 8005220:	2b22      	cmp	r3, #34	; 0x22
 8005222:	d10d      	bne.n	8005240 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff f805 	bl	800424a <HAL_I2C_SlaveRxCpltCallback>
}
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	080055b9 	.word	0x080055b9
 800524c:	ffff0000 	.word	0xffff0000

08005250 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005266:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005268:	7bbb      	ldrb	r3, [r7, #14]
 800526a:	2b10      	cmp	r3, #16
 800526c:	d002      	beq.n	8005274 <I2C_ITError+0x24>
 800526e:	7bbb      	ldrb	r3, [r7, #14]
 8005270:	2b40      	cmp	r3, #64	; 0x40
 8005272:	d10a      	bne.n	800528a <I2C_ITError+0x3a>
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	2b22      	cmp	r3, #34	; 0x22
 8005278:	d107      	bne.n	800528a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005288:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005290:	2b28      	cmp	r3, #40	; 0x28
 8005292:	d107      	bne.n	80052a4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2228      	movs	r2, #40	; 0x28
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052a2:	e015      	b.n	80052d0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b2:	d00a      	beq.n	80052ca <I2C_ITError+0x7a>
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	2b60      	cmp	r3, #96	; 0x60
 80052b8:	d007      	beq.n	80052ca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052de:	d162      	bne.n	80053a6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052ee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d020      	beq.n	8005340 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005302:	4a6a      	ldr	r2, [pc, #424]	; (80054ac <I2C_ITError+0x25c>)
 8005304:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530a:	4618      	mov	r0, r3
 800530c:	f7fd ff0e 	bl	800312c <HAL_DMA_Abort_IT>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 8089 	beq.w	800542a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0201 	bic.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800533a:	4610      	mov	r0, r2
 800533c:	4798      	blx	r3
 800533e:	e074      	b.n	800542a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	4a59      	ldr	r2, [pc, #356]	; (80054ac <I2C_ITError+0x25c>)
 8005346:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	4618      	mov	r0, r3
 800534e:	f7fd feed 	bl	800312c <HAL_DMA_Abort_IT>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d068      	beq.n	800542a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005362:	2b40      	cmp	r3, #64	; 0x40
 8005364:	d10b      	bne.n	800537e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0201 	bic.w	r2, r2, #1
 800538c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053a0:	4610      	mov	r0, r2
 80053a2:	4798      	blx	r3
 80053a4:	e041      	b.n	800542a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b60      	cmp	r3, #96	; 0x60
 80053b0:	d125      	bne.n	80053fe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ca:	2b40      	cmp	r3, #64	; 0x40
 80053cc:	d10b      	bne.n	80053e6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0201 	bic.w	r2, r2, #1
 80053f4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fe ff5d 	bl	80042b6 <HAL_I2C_AbortCpltCallback>
 80053fc:	e015      	b.n	800542a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d10b      	bne.n	8005424 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fe ff3c 	bl	80042a2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10e      	bne.n	8005458 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005440:	2b00      	cmp	r3, #0
 8005442:	d109      	bne.n	8005458 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800544a:	2b00      	cmp	r3, #0
 800544c:	d104      	bne.n	8005458 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005454:	2b00      	cmp	r3, #0
 8005456:	d007      	beq.n	8005468 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005466:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800546e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b04      	cmp	r3, #4
 800547a:	d113      	bne.n	80054a4 <I2C_ITError+0x254>
 800547c:	7bfb      	ldrb	r3, [r7, #15]
 800547e:	2b28      	cmp	r3, #40	; 0x28
 8005480:	d110      	bne.n	80054a4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a0a      	ldr	r2, [pc, #40]	; (80054b0 <I2C_ITError+0x260>)
 8005486:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2220      	movs	r2, #32
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fe feeb 	bl	800427a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054a4:	bf00      	nop
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	080055b9 	.word	0x080055b9
 80054b0:	ffff0000 	.word	0xffff0000

080054b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	607a      	str	r2, [r7, #4]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	460b      	mov	r3, r1
 80054c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d006      	beq.n	80054de <I2C_MasterRequestWrite+0x2a>
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d003      	beq.n	80054de <I2C_MasterRequestWrite+0x2a>
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054dc:	d108      	bne.n	80054f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e00b      	b.n	8005508 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	2b12      	cmp	r3, #18
 80054f6:	d107      	bne.n	8005508 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005506:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f8f7 	bl	8005708 <I2C_WaitOnFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00d      	beq.n	800553c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800552e:	d103      	bne.n	8005538 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005536:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e035      	b.n	80055a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005544:	d108      	bne.n	8005558 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005546:	897b      	ldrh	r3, [r7, #10]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	461a      	mov	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005554:	611a      	str	r2, [r3, #16]
 8005556:	e01b      	b.n	8005590 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005558:	897b      	ldrh	r3, [r7, #10]
 800555a:	11db      	asrs	r3, r3, #7
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f003 0306 	and.w	r3, r3, #6
 8005562:	b2db      	uxtb	r3, r3
 8005564:	f063 030f 	orn	r3, r3, #15
 8005568:	b2da      	uxtb	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	490e      	ldr	r1, [pc, #56]	; (80055b0 <I2C_MasterRequestWrite+0xfc>)
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 f91d 	bl	80057b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e010      	b.n	80055a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005586:	897b      	ldrh	r3, [r7, #10]
 8005588:	b2da      	uxtb	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	4907      	ldr	r1, [pc, #28]	; (80055b4 <I2C_MasterRequestWrite+0x100>)
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f90d 	bl	80057b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	00010008 	.word	0x00010008
 80055b4:	00010002 	.word	0x00010002

080055b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80055d2:	4b4b      	ldr	r3, [pc, #300]	; (8005700 <I2C_DMAAbort+0x148>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	08db      	lsrs	r3, r3, #3
 80055d8:	4a4a      	ldr	r2, [pc, #296]	; (8005704 <I2C_DMAAbort+0x14c>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	0a1a      	lsrs	r2, r3, #8
 80055e0:	4613      	mov	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	00da      	lsls	r2, r3, #3
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f043 0220 	orr.w	r2, r3, #32
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80055fe:	e00a      	b.n	8005616 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3b01      	subs	r3, #1
 8005604:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005614:	d0ea      	beq.n	80055ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005622:	2200      	movs	r2, #0
 8005624:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	2200      	movs	r2, #0
 8005634:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005644:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2200      	movs	r2, #0
 800564a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005658:	2200      	movs	r2, #0
 800565a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	2200      	movs	r2, #0
 800566a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0201 	bic.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b60      	cmp	r3, #96	; 0x60
 8005686:	d10e      	bne.n	80056a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2200      	movs	r2, #0
 800569c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800569e:	6978      	ldr	r0, [r7, #20]
 80056a0:	f7fe fe09 	bl	80042b6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056a4:	e027      	b.n	80056f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056a6:	7cfb      	ldrb	r3, [r7, #19]
 80056a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056ac:	2b28      	cmp	r3, #40	; 0x28
 80056ae:	d117      	bne.n	80056e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2200      	movs	r2, #0
 80056d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2228      	movs	r2, #40	; 0x28
 80056da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80056de:	e007      	b.n	80056f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80056f0:	6978      	ldr	r0, [r7, #20]
 80056f2:	f7fe fdd6 	bl	80042a2 <HAL_I2C_ErrorCallback>
}
 80056f6:	bf00      	nop
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	20000000 	.word	0x20000000
 8005704:	14f8b589 	.word	0x14f8b589

08005708 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	4613      	mov	r3, r2
 8005716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005718:	e025      	b.n	8005766 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005720:	d021      	beq.n	8005766 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005722:	f7fc fead 	bl	8002480 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d302      	bcc.n	8005738 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d116      	bne.n	8005766 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f043 0220 	orr.w	r2, r3, #32
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e023      	b.n	80057ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	0c1b      	lsrs	r3, r3, #16
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b01      	cmp	r3, #1
 800576e:	d10d      	bne.n	800578c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	43da      	mvns	r2, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	4013      	ands	r3, r2
 800577c:	b29b      	uxth	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	bf0c      	ite	eq
 8005782:	2301      	moveq	r3, #1
 8005784:	2300      	movne	r3, #0
 8005786:	b2db      	uxtb	r3, r3
 8005788:	461a      	mov	r2, r3
 800578a:	e00c      	b.n	80057a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	43da      	mvns	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4013      	ands	r3, r2
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	bf0c      	ite	eq
 800579e:	2301      	moveq	r3, #1
 80057a0:	2300      	movne	r3, #0
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	461a      	mov	r2, r3
 80057a6:	79fb      	ldrb	r3, [r7, #7]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d0b6      	beq.n	800571a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	607a      	str	r2, [r7, #4]
 80057c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057c4:	e051      	b.n	800586a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d4:	d123      	bne.n	800581e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f043 0204 	orr.w	r2, r3, #4
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e046      	b.n	80058ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005824:	d021      	beq.n	800586a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005826:	f7fc fe2b 	bl	8002480 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	429a      	cmp	r2, r3
 8005834:	d302      	bcc.n	800583c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d116      	bne.n	800586a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f043 0220 	orr.w	r2, r3, #32
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e020      	b.n	80058ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	0c1b      	lsrs	r3, r3, #16
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b01      	cmp	r3, #1
 8005872:	d10c      	bne.n	800588e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	43da      	mvns	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4013      	ands	r3, r2
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	bf14      	ite	ne
 8005886:	2301      	movne	r3, #1
 8005888:	2300      	moveq	r3, #0
 800588a:	b2db      	uxtb	r3, r3
 800588c:	e00b      	b.n	80058a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	43da      	mvns	r2, r3
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	4013      	ands	r3, r2
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	bf14      	ite	ne
 80058a0:	2301      	movne	r3, #1
 80058a2:	2300      	moveq	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d18d      	bne.n	80057c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058c0:	e02d      	b.n	800591e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 f8aa 	bl	8005a1c <I2C_IsAcknowledgeFailed>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e02d      	b.n	800592e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d8:	d021      	beq.n	800591e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058da:	f7fc fdd1 	bl	8002480 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d302      	bcc.n	80058f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d116      	bne.n	800591e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f043 0220 	orr.w	r2, r3, #32
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e007      	b.n	800592e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005928:	2b80      	cmp	r3, #128	; 0x80
 800592a:	d1ca      	bne.n	80058c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005942:	e02d      	b.n	80059a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 f869 	bl	8005a1c <I2C_IsAcknowledgeFailed>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e02d      	b.n	80059b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595a:	d021      	beq.n	80059a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800595c:	f7fc fd90 	bl	8002480 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	429a      	cmp	r2, r3
 800596a:	d302      	bcc.n	8005972 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d116      	bne.n	80059a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	f043 0220 	orr.w	r2, r3, #32
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e007      	b.n	80059b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d1ca      	bne.n	8005944 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80059c4:	4b13      	ldr	r3, [pc, #76]	; (8005a14 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	08db      	lsrs	r3, r3, #3
 80059ca:	4a13      	ldr	r2, [pc, #76]	; (8005a18 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80059cc:	fba2 2303 	umull	r2, r3, r2, r3
 80059d0:	0a1a      	lsrs	r2, r3, #8
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3b01      	subs	r3, #1
 80059de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d107      	bne.n	80059f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	f043 0220 	orr.w	r2, r3, #32
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e008      	b.n	8005a08 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a04:	d0e9      	beq.n	80059da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	20000000 	.word	0x20000000
 8005a18:	14f8b589 	.word	0x14f8b589

08005a1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a32:	d11b      	bne.n	8005a6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a58:	f043 0204 	orr.w	r2, r3, #4
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e000      	b.n	8005a6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005a8a:	d103      	bne.n	8005a94 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a92:	e007      	b.n	8005aa4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a98:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005a9c:	d102      	bne.n	8005aa4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2208      	movs	r2, #8
 8005aa2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e267      	b.n	8005f92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d075      	beq.n	8005bba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ace:	4b88      	ldr	r3, [pc, #544]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 030c 	and.w	r3, r3, #12
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d00c      	beq.n	8005af4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ada:	4b85      	ldr	r3, [pc, #532]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ae2:	2b08      	cmp	r3, #8
 8005ae4:	d112      	bne.n	8005b0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ae6:	4b82      	ldr	r3, [pc, #520]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005af2:	d10b      	bne.n	8005b0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005af4:	4b7e      	ldr	r3, [pc, #504]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d05b      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x108>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d157      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e242      	b.n	8005f92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b14:	d106      	bne.n	8005b24 <HAL_RCC_OscConfig+0x74>
 8005b16:	4b76      	ldr	r3, [pc, #472]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a75      	ldr	r2, [pc, #468]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	e01d      	b.n	8005b60 <HAL_RCC_OscConfig+0xb0>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b2c:	d10c      	bne.n	8005b48 <HAL_RCC_OscConfig+0x98>
 8005b2e:	4b70      	ldr	r3, [pc, #448]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a6f      	ldr	r2, [pc, #444]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	4b6d      	ldr	r3, [pc, #436]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a6c      	ldr	r2, [pc, #432]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	e00b      	b.n	8005b60 <HAL_RCC_OscConfig+0xb0>
 8005b48:	4b69      	ldr	r3, [pc, #420]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a68      	ldr	r2, [pc, #416]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b52:	6013      	str	r3, [r2, #0]
 8005b54:	4b66      	ldr	r3, [pc, #408]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a65      	ldr	r2, [pc, #404]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d013      	beq.n	8005b90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b68:	f7fc fc8a 	bl	8002480 <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b6e:	e008      	b.n	8005b82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b70:	f7fc fc86 	bl	8002480 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b64      	cmp	r3, #100	; 0x64
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e207      	b.n	8005f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b82:	4b5b      	ldr	r3, [pc, #364]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0f0      	beq.n	8005b70 <HAL_RCC_OscConfig+0xc0>
 8005b8e:	e014      	b.n	8005bba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b90:	f7fc fc76 	bl	8002480 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b98:	f7fc fc72 	bl	8002480 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b64      	cmp	r3, #100	; 0x64
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e1f3      	b.n	8005f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005baa:	4b51      	ldr	r3, [pc, #324]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f0      	bne.n	8005b98 <HAL_RCC_OscConfig+0xe8>
 8005bb6:	e000      	b.n	8005bba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d063      	beq.n	8005c8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bc6:	4b4a      	ldr	r3, [pc, #296]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 030c 	and.w	r3, r3, #12
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00b      	beq.n	8005bea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bd2:	4b47      	ldr	r3, [pc, #284]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bda:	2b08      	cmp	r3, #8
 8005bdc:	d11c      	bne.n	8005c18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bde:	4b44      	ldr	r3, [pc, #272]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d116      	bne.n	8005c18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bea:	4b41      	ldr	r3, [pc, #260]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d005      	beq.n	8005c02 <HAL_RCC_OscConfig+0x152>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d001      	beq.n	8005c02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e1c7      	b.n	8005f92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c02:	4b3b      	ldr	r3, [pc, #236]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	4937      	ldr	r1, [pc, #220]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c16:	e03a      	b.n	8005c8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d020      	beq.n	8005c62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c20:	4b34      	ldr	r3, [pc, #208]	; (8005cf4 <HAL_RCC_OscConfig+0x244>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c26:	f7fc fc2b 	bl	8002480 <HAL_GetTick>
 8005c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c2c:	e008      	b.n	8005c40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c2e:	f7fc fc27 	bl	8002480 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e1a8      	b.n	8005f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c40:	4b2b      	ldr	r3, [pc, #172]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0f0      	beq.n	8005c2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c4c:	4b28      	ldr	r3, [pc, #160]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	4925      	ldr	r1, [pc, #148]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	600b      	str	r3, [r1, #0]
 8005c60:	e015      	b.n	8005c8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c62:	4b24      	ldr	r3, [pc, #144]	; (8005cf4 <HAL_RCC_OscConfig+0x244>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c68:	f7fc fc0a 	bl	8002480 <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c70:	f7fc fc06 	bl	8002480 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e187      	b.n	8005f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c82:	4b1b      	ldr	r3, [pc, #108]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1f0      	bne.n	8005c70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0308 	and.w	r3, r3, #8
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d036      	beq.n	8005d08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d016      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ca2:	4b15      	ldr	r3, [pc, #84]	; (8005cf8 <HAL_RCC_OscConfig+0x248>)
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca8:	f7fc fbea 	bl	8002480 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cb0:	f7fc fbe6 	bl	8002480 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e167      	b.n	8005f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cc2:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <HAL_RCC_OscConfig+0x240>)
 8005cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0f0      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x200>
 8005cce:	e01b      	b.n	8005d08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cd0:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <HAL_RCC_OscConfig+0x248>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cd6:	f7fc fbd3 	bl	8002480 <HAL_GetTick>
 8005cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cdc:	e00e      	b.n	8005cfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cde:	f7fc fbcf 	bl	8002480 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d907      	bls.n	8005cfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e150      	b.n	8005f92 <HAL_RCC_OscConfig+0x4e2>
 8005cf0:	40023800 	.word	0x40023800
 8005cf4:	42470000 	.word	0x42470000
 8005cf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cfc:	4b88      	ldr	r3, [pc, #544]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1ea      	bne.n	8005cde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8097 	beq.w	8005e44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d16:	2300      	movs	r3, #0
 8005d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d1a:	4b81      	ldr	r3, [pc, #516]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10f      	bne.n	8005d46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d26:	2300      	movs	r3, #0
 8005d28:	60bb      	str	r3, [r7, #8]
 8005d2a:	4b7d      	ldr	r3, [pc, #500]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	4a7c      	ldr	r2, [pc, #496]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d34:	6413      	str	r3, [r2, #64]	; 0x40
 8005d36:	4b7a      	ldr	r3, [pc, #488]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3e:	60bb      	str	r3, [r7, #8]
 8005d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d42:	2301      	movs	r3, #1
 8005d44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d46:	4b77      	ldr	r3, [pc, #476]	; (8005f24 <HAL_RCC_OscConfig+0x474>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d118      	bne.n	8005d84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d52:	4b74      	ldr	r3, [pc, #464]	; (8005f24 <HAL_RCC_OscConfig+0x474>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a73      	ldr	r2, [pc, #460]	; (8005f24 <HAL_RCC_OscConfig+0x474>)
 8005d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d5e:	f7fc fb8f 	bl	8002480 <HAL_GetTick>
 8005d62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d64:	e008      	b.n	8005d78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d66:	f7fc fb8b 	bl	8002480 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d901      	bls.n	8005d78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e10c      	b.n	8005f92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d78:	4b6a      	ldr	r3, [pc, #424]	; (8005f24 <HAL_RCC_OscConfig+0x474>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0f0      	beq.n	8005d66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d106      	bne.n	8005d9a <HAL_RCC_OscConfig+0x2ea>
 8005d8c:	4b64      	ldr	r3, [pc, #400]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d90:	4a63      	ldr	r2, [pc, #396]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005d92:	f043 0301 	orr.w	r3, r3, #1
 8005d96:	6713      	str	r3, [r2, #112]	; 0x70
 8005d98:	e01c      	b.n	8005dd4 <HAL_RCC_OscConfig+0x324>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	2b05      	cmp	r3, #5
 8005da0:	d10c      	bne.n	8005dbc <HAL_RCC_OscConfig+0x30c>
 8005da2:	4b5f      	ldr	r3, [pc, #380]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da6:	4a5e      	ldr	r2, [pc, #376]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005da8:	f043 0304 	orr.w	r3, r3, #4
 8005dac:	6713      	str	r3, [r2, #112]	; 0x70
 8005dae:	4b5c      	ldr	r3, [pc, #368]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db2:	4a5b      	ldr	r2, [pc, #364]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005db4:	f043 0301 	orr.w	r3, r3, #1
 8005db8:	6713      	str	r3, [r2, #112]	; 0x70
 8005dba:	e00b      	b.n	8005dd4 <HAL_RCC_OscConfig+0x324>
 8005dbc:	4b58      	ldr	r3, [pc, #352]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc0:	4a57      	ldr	r2, [pc, #348]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005dc2:	f023 0301 	bic.w	r3, r3, #1
 8005dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8005dc8:	4b55      	ldr	r3, [pc, #340]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dcc:	4a54      	ldr	r2, [pc, #336]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005dce:	f023 0304 	bic.w	r3, r3, #4
 8005dd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d015      	beq.n	8005e08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ddc:	f7fc fb50 	bl	8002480 <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de2:	e00a      	b.n	8005dfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005de4:	f7fc fb4c 	bl	8002480 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e0cb      	b.n	8005f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dfa:	4b49      	ldr	r3, [pc, #292]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0ee      	beq.n	8005de4 <HAL_RCC_OscConfig+0x334>
 8005e06:	e014      	b.n	8005e32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e08:	f7fc fb3a 	bl	8002480 <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e0e:	e00a      	b.n	8005e26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e10:	f7fc fb36 	bl	8002480 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e0b5      	b.n	8005f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e26:	4b3e      	ldr	r3, [pc, #248]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1ee      	bne.n	8005e10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e32:	7dfb      	ldrb	r3, [r7, #23]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d105      	bne.n	8005e44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e38:	4b39      	ldr	r3, [pc, #228]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	4a38      	ldr	r2, [pc, #224]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 80a1 	beq.w	8005f90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e4e:	4b34      	ldr	r3, [pc, #208]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 030c 	and.w	r3, r3, #12
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d05c      	beq.n	8005f14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d141      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e62:	4b31      	ldr	r3, [pc, #196]	; (8005f28 <HAL_RCC_OscConfig+0x478>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e68:	f7fc fb0a 	bl	8002480 <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e70:	f7fc fb06 	bl	8002480 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e087      	b.n	8005f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e82:	4b27      	ldr	r3, [pc, #156]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f0      	bne.n	8005e70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	69da      	ldr	r2, [r3, #28]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	019b      	lsls	r3, r3, #6
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea4:	085b      	lsrs	r3, r3, #1
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	041b      	lsls	r3, r3, #16
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb0:	061b      	lsls	r3, r3, #24
 8005eb2:	491b      	ldr	r1, [pc, #108]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eb8:	4b1b      	ldr	r3, [pc, #108]	; (8005f28 <HAL_RCC_OscConfig+0x478>)
 8005eba:	2201      	movs	r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ebe:	f7fc fadf 	bl	8002480 <HAL_GetTick>
 8005ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec6:	f7fc fadb 	bl	8002480 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e05c      	b.n	8005f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ed8:	4b11      	ldr	r3, [pc, #68]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0f0      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x416>
 8005ee4:	e054      	b.n	8005f90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ee6:	4b10      	ldr	r3, [pc, #64]	; (8005f28 <HAL_RCC_OscConfig+0x478>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eec:	f7fc fac8 	bl	8002480 <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ef2:	e008      	b.n	8005f06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ef4:	f7fc fac4 	bl	8002480 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e045      	b.n	8005f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f06:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <HAL_RCC_OscConfig+0x470>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1f0      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x444>
 8005f12:	e03d      	b.n	8005f90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d107      	bne.n	8005f2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e038      	b.n	8005f92 <HAL_RCC_OscConfig+0x4e2>
 8005f20:	40023800 	.word	0x40023800
 8005f24:	40007000 	.word	0x40007000
 8005f28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f2c:	4b1b      	ldr	r3, [pc, #108]	; (8005f9c <HAL_RCC_OscConfig+0x4ec>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d028      	beq.n	8005f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d121      	bne.n	8005f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d11a      	bne.n	8005f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d111      	bne.n	8005f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f72:	085b      	lsrs	r3, r3, #1
 8005f74:	3b01      	subs	r3, #1
 8005f76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d107      	bne.n	8005f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d001      	beq.n	8005f90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e000      	b.n	8005f92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	40023800 	.word	0x40023800

08005fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e0cc      	b.n	800614e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fb4:	4b68      	ldr	r3, [pc, #416]	; (8006158 <HAL_RCC_ClockConfig+0x1b8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d90c      	bls.n	8005fdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc2:	4b65      	ldr	r3, [pc, #404]	; (8006158 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fca:	4b63      	ldr	r3, [pc, #396]	; (8006158 <HAL_RCC_ClockConfig+0x1b8>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0307 	and.w	r3, r3, #7
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d001      	beq.n	8005fdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e0b8      	b.n	800614e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d020      	beq.n	800602a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ff4:	4b59      	ldr	r3, [pc, #356]	; (800615c <HAL_RCC_ClockConfig+0x1bc>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	4a58      	ldr	r2, [pc, #352]	; (800615c <HAL_RCC_ClockConfig+0x1bc>)
 8005ffa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ffe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0308 	and.w	r3, r3, #8
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800600c:	4b53      	ldr	r3, [pc, #332]	; (800615c <HAL_RCC_ClockConfig+0x1bc>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	4a52      	ldr	r2, [pc, #328]	; (800615c <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006016:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006018:	4b50      	ldr	r3, [pc, #320]	; (800615c <HAL_RCC_ClockConfig+0x1bc>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	494d      	ldr	r1, [pc, #308]	; (800615c <HAL_RCC_ClockConfig+0x1bc>)
 8006026:	4313      	orrs	r3, r2
 8006028:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d044      	beq.n	80060c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d107      	bne.n	800604e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800603e:	4b47      	ldr	r3, [pc, #284]	; (800615c <HAL_RCC_ClockConfig+0x1bc>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d119      	bne.n	800607e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e07f      	b.n	800614e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d003      	beq.n	800605e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800605a:	2b03      	cmp	r3, #3
 800605c:	d107      	bne.n	800606e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800605e:	4b3f      	ldr	r3, [pc, #252]	; (800615c <HAL_RCC_ClockConfig+0x1bc>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d109      	bne.n	800607e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e06f      	b.n	800614e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800606e:	4b3b      	ldr	r3, [pc, #236]	; (800615c <HAL_RCC_ClockConfig+0x1bc>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e067      	b.n	800614e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800607e:	4b37      	ldr	r3, [pc, #220]	; (800615c <HAL_RCC_ClockConfig+0x1bc>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f023 0203 	bic.w	r2, r3, #3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	4934      	ldr	r1, [pc, #208]	; (800615c <HAL_RCC_ClockConfig+0x1bc>)
 800608c:	4313      	orrs	r3, r2
 800608e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006090:	f7fc f9f6 	bl	8002480 <HAL_GetTick>
 8006094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006096:	e00a      	b.n	80060ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006098:	f7fc f9f2 	bl	8002480 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e04f      	b.n	800614e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ae:	4b2b      	ldr	r3, [pc, #172]	; (800615c <HAL_RCC_ClockConfig+0x1bc>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 020c 	and.w	r2, r3, #12
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	429a      	cmp	r2, r3
 80060be:	d1eb      	bne.n	8006098 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060c0:	4b25      	ldr	r3, [pc, #148]	; (8006158 <HAL_RCC_ClockConfig+0x1b8>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d20c      	bcs.n	80060e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ce:	4b22      	ldr	r3, [pc, #136]	; (8006158 <HAL_RCC_ClockConfig+0x1b8>)
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d6:	4b20      	ldr	r3, [pc, #128]	; (8006158 <HAL_RCC_ClockConfig+0x1b8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d001      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e032      	b.n	800614e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d008      	beq.n	8006106 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060f4:	4b19      	ldr	r3, [pc, #100]	; (800615c <HAL_RCC_ClockConfig+0x1bc>)
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	4916      	ldr	r1, [pc, #88]	; (800615c <HAL_RCC_ClockConfig+0x1bc>)
 8006102:	4313      	orrs	r3, r2
 8006104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0308 	and.w	r3, r3, #8
 800610e:	2b00      	cmp	r3, #0
 8006110:	d009      	beq.n	8006126 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006112:	4b12      	ldr	r3, [pc, #72]	; (800615c <HAL_RCC_ClockConfig+0x1bc>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	490e      	ldr	r1, [pc, #56]	; (800615c <HAL_RCC_ClockConfig+0x1bc>)
 8006122:	4313      	orrs	r3, r2
 8006124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006126:	f000 f821 	bl	800616c <HAL_RCC_GetSysClockFreq>
 800612a:	4602      	mov	r2, r0
 800612c:	4b0b      	ldr	r3, [pc, #44]	; (800615c <HAL_RCC_ClockConfig+0x1bc>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	091b      	lsrs	r3, r3, #4
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	490a      	ldr	r1, [pc, #40]	; (8006160 <HAL_RCC_ClockConfig+0x1c0>)
 8006138:	5ccb      	ldrb	r3, [r1, r3]
 800613a:	fa22 f303 	lsr.w	r3, r2, r3
 800613e:	4a09      	ldr	r2, [pc, #36]	; (8006164 <HAL_RCC_ClockConfig+0x1c4>)
 8006140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006142:	4b09      	ldr	r3, [pc, #36]	; (8006168 <HAL_RCC_ClockConfig+0x1c8>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4618      	mov	r0, r3
 8006148:	f7fb ff88 	bl	800205c <HAL_InitTick>

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	40023c00 	.word	0x40023c00
 800615c:	40023800 	.word	0x40023800
 8006160:	0800d9a0 	.word	0x0800d9a0
 8006164:	20000000 	.word	0x20000000
 8006168:	20000004 	.word	0x20000004

0800616c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800616c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006170:	b094      	sub	sp, #80	; 0x50
 8006172:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	647b      	str	r3, [r7, #68]	; 0x44
 8006178:	2300      	movs	r3, #0
 800617a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800617c:	2300      	movs	r3, #0
 800617e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006184:	4b79      	ldr	r3, [pc, #484]	; (800636c <HAL_RCC_GetSysClockFreq+0x200>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 030c 	and.w	r3, r3, #12
 800618c:	2b08      	cmp	r3, #8
 800618e:	d00d      	beq.n	80061ac <HAL_RCC_GetSysClockFreq+0x40>
 8006190:	2b08      	cmp	r3, #8
 8006192:	f200 80e1 	bhi.w	8006358 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <HAL_RCC_GetSysClockFreq+0x34>
 800619a:	2b04      	cmp	r3, #4
 800619c:	d003      	beq.n	80061a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800619e:	e0db      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061a0:	4b73      	ldr	r3, [pc, #460]	; (8006370 <HAL_RCC_GetSysClockFreq+0x204>)
 80061a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80061a4:	e0db      	b.n	800635e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061a6:	4b73      	ldr	r3, [pc, #460]	; (8006374 <HAL_RCC_GetSysClockFreq+0x208>)
 80061a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061aa:	e0d8      	b.n	800635e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061ac:	4b6f      	ldr	r3, [pc, #444]	; (800636c <HAL_RCC_GetSysClockFreq+0x200>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061b6:	4b6d      	ldr	r3, [pc, #436]	; (800636c <HAL_RCC_GetSysClockFreq+0x200>)
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d063      	beq.n	800628a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061c2:	4b6a      	ldr	r3, [pc, #424]	; (800636c <HAL_RCC_GetSysClockFreq+0x200>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	099b      	lsrs	r3, r3, #6
 80061c8:	2200      	movs	r2, #0
 80061ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80061cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d4:	633b      	str	r3, [r7, #48]	; 0x30
 80061d6:	2300      	movs	r3, #0
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
 80061da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80061de:	4622      	mov	r2, r4
 80061e0:	462b      	mov	r3, r5
 80061e2:	f04f 0000 	mov.w	r0, #0
 80061e6:	f04f 0100 	mov.w	r1, #0
 80061ea:	0159      	lsls	r1, r3, #5
 80061ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061f0:	0150      	lsls	r0, r2, #5
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	4621      	mov	r1, r4
 80061f8:	1a51      	subs	r1, r2, r1
 80061fa:	6139      	str	r1, [r7, #16]
 80061fc:	4629      	mov	r1, r5
 80061fe:	eb63 0301 	sbc.w	r3, r3, r1
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	f04f 0300 	mov.w	r3, #0
 800620c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006210:	4659      	mov	r1, fp
 8006212:	018b      	lsls	r3, r1, #6
 8006214:	4651      	mov	r1, sl
 8006216:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800621a:	4651      	mov	r1, sl
 800621c:	018a      	lsls	r2, r1, #6
 800621e:	4651      	mov	r1, sl
 8006220:	ebb2 0801 	subs.w	r8, r2, r1
 8006224:	4659      	mov	r1, fp
 8006226:	eb63 0901 	sbc.w	r9, r3, r1
 800622a:	f04f 0200 	mov.w	r2, #0
 800622e:	f04f 0300 	mov.w	r3, #0
 8006232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800623a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800623e:	4690      	mov	r8, r2
 8006240:	4699      	mov	r9, r3
 8006242:	4623      	mov	r3, r4
 8006244:	eb18 0303 	adds.w	r3, r8, r3
 8006248:	60bb      	str	r3, [r7, #8]
 800624a:	462b      	mov	r3, r5
 800624c:	eb49 0303 	adc.w	r3, r9, r3
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	f04f 0200 	mov.w	r2, #0
 8006256:	f04f 0300 	mov.w	r3, #0
 800625a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800625e:	4629      	mov	r1, r5
 8006260:	024b      	lsls	r3, r1, #9
 8006262:	4621      	mov	r1, r4
 8006264:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006268:	4621      	mov	r1, r4
 800626a:	024a      	lsls	r2, r1, #9
 800626c:	4610      	mov	r0, r2
 800626e:	4619      	mov	r1, r3
 8006270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006272:	2200      	movs	r2, #0
 8006274:	62bb      	str	r3, [r7, #40]	; 0x28
 8006276:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006278:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800627c:	f7fa fcec 	bl	8000c58 <__aeabi_uldivmod>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4613      	mov	r3, r2
 8006286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006288:	e058      	b.n	800633c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800628a:	4b38      	ldr	r3, [pc, #224]	; (800636c <HAL_RCC_GetSysClockFreq+0x200>)
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	099b      	lsrs	r3, r3, #6
 8006290:	2200      	movs	r2, #0
 8006292:	4618      	mov	r0, r3
 8006294:	4611      	mov	r1, r2
 8006296:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800629a:	623b      	str	r3, [r7, #32]
 800629c:	2300      	movs	r3, #0
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
 80062a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80062a4:	4642      	mov	r2, r8
 80062a6:	464b      	mov	r3, r9
 80062a8:	f04f 0000 	mov.w	r0, #0
 80062ac:	f04f 0100 	mov.w	r1, #0
 80062b0:	0159      	lsls	r1, r3, #5
 80062b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062b6:	0150      	lsls	r0, r2, #5
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4641      	mov	r1, r8
 80062be:	ebb2 0a01 	subs.w	sl, r2, r1
 80062c2:	4649      	mov	r1, r9
 80062c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80062c8:	f04f 0200 	mov.w	r2, #0
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062dc:	ebb2 040a 	subs.w	r4, r2, sl
 80062e0:	eb63 050b 	sbc.w	r5, r3, fp
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	00eb      	lsls	r3, r5, #3
 80062ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062f2:	00e2      	lsls	r2, r4, #3
 80062f4:	4614      	mov	r4, r2
 80062f6:	461d      	mov	r5, r3
 80062f8:	4643      	mov	r3, r8
 80062fa:	18e3      	adds	r3, r4, r3
 80062fc:	603b      	str	r3, [r7, #0]
 80062fe:	464b      	mov	r3, r9
 8006300:	eb45 0303 	adc.w	r3, r5, r3
 8006304:	607b      	str	r3, [r7, #4]
 8006306:	f04f 0200 	mov.w	r2, #0
 800630a:	f04f 0300 	mov.w	r3, #0
 800630e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006312:	4629      	mov	r1, r5
 8006314:	028b      	lsls	r3, r1, #10
 8006316:	4621      	mov	r1, r4
 8006318:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800631c:	4621      	mov	r1, r4
 800631e:	028a      	lsls	r2, r1, #10
 8006320:	4610      	mov	r0, r2
 8006322:	4619      	mov	r1, r3
 8006324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006326:	2200      	movs	r2, #0
 8006328:	61bb      	str	r3, [r7, #24]
 800632a:	61fa      	str	r2, [r7, #28]
 800632c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006330:	f7fa fc92 	bl	8000c58 <__aeabi_uldivmod>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4613      	mov	r3, r2
 800633a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800633c:	4b0b      	ldr	r3, [pc, #44]	; (800636c <HAL_RCC_GetSysClockFreq+0x200>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	0c1b      	lsrs	r3, r3, #16
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	3301      	adds	r3, #1
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800634c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800634e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006350:	fbb2 f3f3 	udiv	r3, r2, r3
 8006354:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006356:	e002      	b.n	800635e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006358:	4b05      	ldr	r3, [pc, #20]	; (8006370 <HAL_RCC_GetSysClockFreq+0x204>)
 800635a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800635c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800635e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006360:	4618      	mov	r0, r3
 8006362:	3750      	adds	r7, #80	; 0x50
 8006364:	46bd      	mov	sp, r7
 8006366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800636a:	bf00      	nop
 800636c:	40023800 	.word	0x40023800
 8006370:	00f42400 	.word	0x00f42400
 8006374:	007a1200 	.word	0x007a1200

08006378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800637c:	4b03      	ldr	r3, [pc, #12]	; (800638c <HAL_RCC_GetHCLKFreq+0x14>)
 800637e:	681b      	ldr	r3, [r3, #0]
}
 8006380:	4618      	mov	r0, r3
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	20000000 	.word	0x20000000

08006390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006394:	f7ff fff0 	bl	8006378 <HAL_RCC_GetHCLKFreq>
 8006398:	4602      	mov	r2, r0
 800639a:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	0a9b      	lsrs	r3, r3, #10
 80063a0:	f003 0307 	and.w	r3, r3, #7
 80063a4:	4903      	ldr	r1, [pc, #12]	; (80063b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063a6:	5ccb      	ldrb	r3, [r1, r3]
 80063a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	40023800 	.word	0x40023800
 80063b4:	0800d9b0 	.word	0x0800d9b0

080063b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063bc:	f7ff ffdc 	bl	8006378 <HAL_RCC_GetHCLKFreq>
 80063c0:	4602      	mov	r2, r0
 80063c2:	4b05      	ldr	r3, [pc, #20]	; (80063d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	0b5b      	lsrs	r3, r3, #13
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	4903      	ldr	r1, [pc, #12]	; (80063dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80063ce:	5ccb      	ldrb	r3, [r1, r3]
 80063d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40023800 	.word	0x40023800
 80063dc:	0800d9b0 	.word	0x0800d9b0

080063e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	220f      	movs	r2, #15
 80063ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80063f0:	4b12      	ldr	r3, [pc, #72]	; (800643c <HAL_RCC_GetClockConfig+0x5c>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f003 0203 	and.w	r2, r3, #3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80063fc:	4b0f      	ldr	r3, [pc, #60]	; (800643c <HAL_RCC_GetClockConfig+0x5c>)
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006408:	4b0c      	ldr	r3, [pc, #48]	; (800643c <HAL_RCC_GetClockConfig+0x5c>)
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006414:	4b09      	ldr	r3, [pc, #36]	; (800643c <HAL_RCC_GetClockConfig+0x5c>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	08db      	lsrs	r3, r3, #3
 800641a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006422:	4b07      	ldr	r3, [pc, #28]	; (8006440 <HAL_RCC_GetClockConfig+0x60>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0207 	and.w	r2, r3, #7
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	601a      	str	r2, [r3, #0]
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40023800 	.word	0x40023800
 8006440:	40023c00 	.word	0x40023c00

08006444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e041      	b.n	80064da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fb fd06 	bl	8001e7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3304      	adds	r3, #4
 8006480:	4619      	mov	r1, r3
 8006482:	4610      	mov	r0, r2
 8006484:	f000 fc8e 	bl	8006da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d001      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e044      	b.n	8006586 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0201 	orr.w	r2, r2, #1
 8006512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a1e      	ldr	r2, [pc, #120]	; (8006594 <HAL_TIM_Base_Start_IT+0xb0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d018      	beq.n	8006550 <HAL_TIM_Base_Start_IT+0x6c>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006526:	d013      	beq.n	8006550 <HAL_TIM_Base_Start_IT+0x6c>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a1a      	ldr	r2, [pc, #104]	; (8006598 <HAL_TIM_Base_Start_IT+0xb4>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d00e      	beq.n	8006550 <HAL_TIM_Base_Start_IT+0x6c>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a19      	ldr	r2, [pc, #100]	; (800659c <HAL_TIM_Base_Start_IT+0xb8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d009      	beq.n	8006550 <HAL_TIM_Base_Start_IT+0x6c>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a17      	ldr	r2, [pc, #92]	; (80065a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d004      	beq.n	8006550 <HAL_TIM_Base_Start_IT+0x6c>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a16      	ldr	r2, [pc, #88]	; (80065a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d111      	bne.n	8006574 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b06      	cmp	r3, #6
 8006560:	d010      	beq.n	8006584 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0201 	orr.w	r2, r2, #1
 8006570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006572:	e007      	b.n	8006584 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f042 0201 	orr.w	r2, r2, #1
 8006582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40010000 	.word	0x40010000
 8006598:	40000400 	.word	0x40000400
 800659c:	40000800 	.word	0x40000800
 80065a0:	40000c00 	.word	0x40000c00
 80065a4:	40014000 	.word	0x40014000

080065a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e041      	b.n	800663e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f839 	bl	8006646 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3304      	adds	r3, #4
 80065e4:	4619      	mov	r1, r3
 80065e6:	4610      	mov	r0, r2
 80065e8:	f000 fbdc 	bl	8006da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
	...

0800665c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d104      	bne.n	800667a <HAL_TIM_IC_Start_IT+0x1e>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006676:	b2db      	uxtb	r3, r3
 8006678:	e013      	b.n	80066a2 <HAL_TIM_IC_Start_IT+0x46>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b04      	cmp	r3, #4
 800667e:	d104      	bne.n	800668a <HAL_TIM_IC_Start_IT+0x2e>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006686:	b2db      	uxtb	r3, r3
 8006688:	e00b      	b.n	80066a2 <HAL_TIM_IC_Start_IT+0x46>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b08      	cmp	r3, #8
 800668e:	d104      	bne.n	800669a <HAL_TIM_IC_Start_IT+0x3e>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006696:	b2db      	uxtb	r3, r3
 8006698:	e003      	b.n	80066a2 <HAL_TIM_IC_Start_IT+0x46>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <HAL_TIM_IC_Start_IT+0x58>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	e013      	b.n	80066dc <HAL_TIM_IC_Start_IT+0x80>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d104      	bne.n	80066c4 <HAL_TIM_IC_Start_IT+0x68>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	e00b      	b.n	80066dc <HAL_TIM_IC_Start_IT+0x80>
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d104      	bne.n	80066d4 <HAL_TIM_IC_Start_IT+0x78>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	e003      	b.n	80066dc <HAL_TIM_IC_Start_IT+0x80>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80066de:	7bbb      	ldrb	r3, [r7, #14]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d102      	bne.n	80066ea <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80066e4:	7b7b      	ldrb	r3, [r7, #13]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d001      	beq.n	80066ee <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e0c2      	b.n	8006874 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d104      	bne.n	80066fe <HAL_TIM_IC_Start_IT+0xa2>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066fc:	e013      	b.n	8006726 <HAL_TIM_IC_Start_IT+0xca>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b04      	cmp	r3, #4
 8006702:	d104      	bne.n	800670e <HAL_TIM_IC_Start_IT+0xb2>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800670c:	e00b      	b.n	8006726 <HAL_TIM_IC_Start_IT+0xca>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b08      	cmp	r3, #8
 8006712:	d104      	bne.n	800671e <HAL_TIM_IC_Start_IT+0xc2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800671c:	e003      	b.n	8006726 <HAL_TIM_IC_Start_IT+0xca>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2202      	movs	r2, #2
 8006722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d104      	bne.n	8006736 <HAL_TIM_IC_Start_IT+0xda>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006734:	e013      	b.n	800675e <HAL_TIM_IC_Start_IT+0x102>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b04      	cmp	r3, #4
 800673a:	d104      	bne.n	8006746 <HAL_TIM_IC_Start_IT+0xea>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006744:	e00b      	b.n	800675e <HAL_TIM_IC_Start_IT+0x102>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b08      	cmp	r3, #8
 800674a:	d104      	bne.n	8006756 <HAL_TIM_IC_Start_IT+0xfa>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006754:	e003      	b.n	800675e <HAL_TIM_IC_Start_IT+0x102>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b0c      	cmp	r3, #12
 8006762:	d841      	bhi.n	80067e8 <HAL_TIM_IC_Start_IT+0x18c>
 8006764:	a201      	add	r2, pc, #4	; (adr r2, 800676c <HAL_TIM_IC_Start_IT+0x110>)
 8006766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676a:	bf00      	nop
 800676c:	080067a1 	.word	0x080067a1
 8006770:	080067e9 	.word	0x080067e9
 8006774:	080067e9 	.word	0x080067e9
 8006778:	080067e9 	.word	0x080067e9
 800677c:	080067b3 	.word	0x080067b3
 8006780:	080067e9 	.word	0x080067e9
 8006784:	080067e9 	.word	0x080067e9
 8006788:	080067e9 	.word	0x080067e9
 800678c:	080067c5 	.word	0x080067c5
 8006790:	080067e9 	.word	0x080067e9
 8006794:	080067e9 	.word	0x080067e9
 8006798:	080067e9 	.word	0x080067e9
 800679c:	080067d7 	.word	0x080067d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0202 	orr.w	r2, r2, #2
 80067ae:	60da      	str	r2, [r3, #12]
      break;
 80067b0:	e01d      	b.n	80067ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0204 	orr.w	r2, r2, #4
 80067c0:	60da      	str	r2, [r3, #12]
      break;
 80067c2:	e014      	b.n	80067ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0208 	orr.w	r2, r2, #8
 80067d2:	60da      	str	r2, [r3, #12]
      break;
 80067d4:	e00b      	b.n	80067ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0210 	orr.w	r2, r2, #16
 80067e4:	60da      	str	r2, [r3, #12]
      break;
 80067e6:	e002      	b.n	80067ee <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	73fb      	strb	r3, [r7, #15]
      break;
 80067ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d13e      	bne.n	8006872 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2201      	movs	r2, #1
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 fd09 	bl	8007214 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a1d      	ldr	r2, [pc, #116]	; (800687c <HAL_TIM_IC_Start_IT+0x220>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d018      	beq.n	800683e <HAL_TIM_IC_Start_IT+0x1e2>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006814:	d013      	beq.n	800683e <HAL_TIM_IC_Start_IT+0x1e2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a19      	ldr	r2, [pc, #100]	; (8006880 <HAL_TIM_IC_Start_IT+0x224>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d00e      	beq.n	800683e <HAL_TIM_IC_Start_IT+0x1e2>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a17      	ldr	r2, [pc, #92]	; (8006884 <HAL_TIM_IC_Start_IT+0x228>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d009      	beq.n	800683e <HAL_TIM_IC_Start_IT+0x1e2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a16      	ldr	r2, [pc, #88]	; (8006888 <HAL_TIM_IC_Start_IT+0x22c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d004      	beq.n	800683e <HAL_TIM_IC_Start_IT+0x1e2>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a14      	ldr	r2, [pc, #80]	; (800688c <HAL_TIM_IC_Start_IT+0x230>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d111      	bne.n	8006862 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f003 0307 	and.w	r3, r3, #7
 8006848:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2b06      	cmp	r3, #6
 800684e:	d010      	beq.n	8006872 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f042 0201 	orr.w	r2, r2, #1
 800685e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006860:	e007      	b.n	8006872 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f042 0201 	orr.w	r2, r2, #1
 8006870:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006872:	7bfb      	ldrb	r3, [r7, #15]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	40010000 	.word	0x40010000
 8006880:	40000400 	.word	0x40000400
 8006884:	40000800 	.word	0x40000800
 8006888:	40000c00 	.word	0x40000c00
 800688c:	40014000 	.word	0x40014000

08006890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d122      	bne.n	80068ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d11b      	bne.n	80068ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f06f 0202 	mvn.w	r2, #2
 80068bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7fa fd8c 	bl	80013f0 <HAL_TIM_IC_CaptureCallback>
 80068d8:	e005      	b.n	80068e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fa43 	bl	8006d66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fa4a 	bl	8006d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	f003 0304 	and.w	r3, r3, #4
 80068f6:	2b04      	cmp	r3, #4
 80068f8:	d122      	bne.n	8006940 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b04      	cmp	r3, #4
 8006906:	d11b      	bne.n	8006940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f06f 0204 	mvn.w	r2, #4
 8006910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2202      	movs	r2, #2
 8006916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7fa fd62 	bl	80013f0 <HAL_TIM_IC_CaptureCallback>
 800692c:	e005      	b.n	800693a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fa19 	bl	8006d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fa20 	bl	8006d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f003 0308 	and.w	r3, r3, #8
 800694a:	2b08      	cmp	r3, #8
 800694c:	d122      	bne.n	8006994 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f003 0308 	and.w	r3, r3, #8
 8006958:	2b08      	cmp	r3, #8
 800695a:	d11b      	bne.n	8006994 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f06f 0208 	mvn.w	r2, #8
 8006964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2204      	movs	r2, #4
 800696a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fa fd38 	bl	80013f0 <HAL_TIM_IC_CaptureCallback>
 8006980:	e005      	b.n	800698e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f9ef 	bl	8006d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f9f6 	bl	8006d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f003 0310 	and.w	r3, r3, #16
 800699e:	2b10      	cmp	r3, #16
 80069a0:	d122      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f003 0310 	and.w	r3, r3, #16
 80069ac:	2b10      	cmp	r3, #16
 80069ae:	d11b      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f06f 0210 	mvn.w	r2, #16
 80069b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2208      	movs	r2, #8
 80069be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7fa fd0e 	bl	80013f0 <HAL_TIM_IC_CaptureCallback>
 80069d4:	e005      	b.n	80069e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f9c5 	bl	8006d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f9cc 	bl	8006d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d10e      	bne.n	8006a14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d107      	bne.n	8006a14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0201 	mvn.w	r2, #1
 8006a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7fb f8b8 	bl	8001b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1e:	2b80      	cmp	r3, #128	; 0x80
 8006a20:	d10e      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2c:	2b80      	cmp	r3, #128	; 0x80
 8006a2e:	d107      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fc88 	bl	8007350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4a:	2b40      	cmp	r3, #64	; 0x40
 8006a4c:	d10e      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a58:	2b40      	cmp	r3, #64	; 0x40
 8006a5a:	d107      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f991 	bl	8006d8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	d10e      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	d107      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f06f 0220 	mvn.w	r2, #32
 8006a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fc52 	bl	800733c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_TIM_IC_ConfigChannel+0x1e>
 8006aba:	2302      	movs	r3, #2
 8006abc:	e088      	b.n	8006bd0 <HAL_TIM_IC_ConfigChannel+0x130>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d11b      	bne.n	8006b04 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	6819      	ldr	r1, [r3, #0]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f000 f9e2 	bl	8006ea4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699a      	ldr	r2, [r3, #24]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 020c 	bic.w	r2, r2, #12
 8006aee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6999      	ldr	r1, [r3, #24]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	619a      	str	r2, [r3, #24]
 8006b02:	e060      	b.n	8006bc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d11c      	bne.n	8006b44 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6818      	ldr	r0, [r3, #0]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	6819      	ldr	r1, [r3, #0]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f000 fa5a 	bl	8006fd2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699a      	ldr	r2, [r3, #24]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6999      	ldr	r1, [r3, #24]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	021a      	lsls	r2, r3, #8
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	619a      	str	r2, [r3, #24]
 8006b42:	e040      	b.n	8006bc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b08      	cmp	r3, #8
 8006b48:	d11b      	bne.n	8006b82 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	6819      	ldr	r1, [r3, #0]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f000 faa7 	bl	80070ac <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	69da      	ldr	r2, [r3, #28]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 020c 	bic.w	r2, r2, #12
 8006b6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	69d9      	ldr	r1, [r3, #28]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	61da      	str	r2, [r3, #28]
 8006b80:	e021      	b.n	8006bc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b0c      	cmp	r3, #12
 8006b86:	d11c      	bne.n	8006bc2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	6819      	ldr	r1, [r3, #0]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f000 fac4 	bl	8007124 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	69da      	ldr	r2, [r3, #28]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006baa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69d9      	ldr	r1, [r3, #28]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	021a      	lsls	r2, r3, #8
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	61da      	str	r2, [r3, #28]
 8006bc0:	e001      	b.n	8006bc6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d101      	bne.n	8006bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	e0b4      	b.n	8006d5e <HAL_TIM_ConfigClockSource+0x186>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c2c:	d03e      	beq.n	8006cac <HAL_TIM_ConfigClockSource+0xd4>
 8006c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c32:	f200 8087 	bhi.w	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c3a:	f000 8086 	beq.w	8006d4a <HAL_TIM_ConfigClockSource+0x172>
 8006c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c42:	d87f      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c44:	2b70      	cmp	r3, #112	; 0x70
 8006c46:	d01a      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0xa6>
 8006c48:	2b70      	cmp	r3, #112	; 0x70
 8006c4a:	d87b      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c4c:	2b60      	cmp	r3, #96	; 0x60
 8006c4e:	d050      	beq.n	8006cf2 <HAL_TIM_ConfigClockSource+0x11a>
 8006c50:	2b60      	cmp	r3, #96	; 0x60
 8006c52:	d877      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c54:	2b50      	cmp	r3, #80	; 0x50
 8006c56:	d03c      	beq.n	8006cd2 <HAL_TIM_ConfigClockSource+0xfa>
 8006c58:	2b50      	cmp	r3, #80	; 0x50
 8006c5a:	d873      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c5c:	2b40      	cmp	r3, #64	; 0x40
 8006c5e:	d058      	beq.n	8006d12 <HAL_TIM_ConfigClockSource+0x13a>
 8006c60:	2b40      	cmp	r3, #64	; 0x40
 8006c62:	d86f      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c64:	2b30      	cmp	r3, #48	; 0x30
 8006c66:	d064      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x15a>
 8006c68:	2b30      	cmp	r3, #48	; 0x30
 8006c6a:	d86b      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d060      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x15a>
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d867      	bhi.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d05c      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x15a>
 8006c78:	2b10      	cmp	r3, #16
 8006c7a:	d05a      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x15a>
 8006c7c:	e062      	b.n	8006d44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	6899      	ldr	r1, [r3, #8]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f000 faa1 	bl	80071d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ca0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	609a      	str	r2, [r3, #8]
      break;
 8006caa:	e04f      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	6899      	ldr	r1, [r3, #8]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f000 fa8a 	bl	80071d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cce:	609a      	str	r2, [r3, #8]
      break;
 8006cd0:	e03c      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6818      	ldr	r0, [r3, #0]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	6859      	ldr	r1, [r3, #4]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f000 f948 	bl	8006f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2150      	movs	r1, #80	; 0x50
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fa57 	bl	800719e <TIM_ITRx_SetConfig>
      break;
 8006cf0:	e02c      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6818      	ldr	r0, [r3, #0]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	6859      	ldr	r1, [r3, #4]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f000 f9a4 	bl	800704c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2160      	movs	r1, #96	; 0x60
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 fa47 	bl	800719e <TIM_ITRx_SetConfig>
      break;
 8006d10:	e01c      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	6859      	ldr	r1, [r3, #4]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f000 f928 	bl	8006f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2140      	movs	r1, #64	; 0x40
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fa37 	bl	800719e <TIM_ITRx_SetConfig>
      break;
 8006d30:	e00c      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	f000 fa2e 	bl	800719e <TIM_ITRx_SetConfig>
      break;
 8006d42:	e003      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	73fb      	strb	r3, [r7, #15]
      break;
 8006d48:	e000      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d6e:	bf00      	nop
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d96:	bf00      	nop
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
	...

08006da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a34      	ldr	r2, [pc, #208]	; (8006e88 <TIM_Base_SetConfig+0xe4>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d00f      	beq.n	8006ddc <TIM_Base_SetConfig+0x38>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc2:	d00b      	beq.n	8006ddc <TIM_Base_SetConfig+0x38>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a31      	ldr	r2, [pc, #196]	; (8006e8c <TIM_Base_SetConfig+0xe8>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d007      	beq.n	8006ddc <TIM_Base_SetConfig+0x38>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a30      	ldr	r2, [pc, #192]	; (8006e90 <TIM_Base_SetConfig+0xec>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d003      	beq.n	8006ddc <TIM_Base_SetConfig+0x38>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a2f      	ldr	r2, [pc, #188]	; (8006e94 <TIM_Base_SetConfig+0xf0>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d108      	bne.n	8006dee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a25      	ldr	r2, [pc, #148]	; (8006e88 <TIM_Base_SetConfig+0xe4>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d01b      	beq.n	8006e2e <TIM_Base_SetConfig+0x8a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dfc:	d017      	beq.n	8006e2e <TIM_Base_SetConfig+0x8a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a22      	ldr	r2, [pc, #136]	; (8006e8c <TIM_Base_SetConfig+0xe8>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d013      	beq.n	8006e2e <TIM_Base_SetConfig+0x8a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a21      	ldr	r2, [pc, #132]	; (8006e90 <TIM_Base_SetConfig+0xec>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d00f      	beq.n	8006e2e <TIM_Base_SetConfig+0x8a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a20      	ldr	r2, [pc, #128]	; (8006e94 <TIM_Base_SetConfig+0xf0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d00b      	beq.n	8006e2e <TIM_Base_SetConfig+0x8a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a1f      	ldr	r2, [pc, #124]	; (8006e98 <TIM_Base_SetConfig+0xf4>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d007      	beq.n	8006e2e <TIM_Base_SetConfig+0x8a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a1e      	ldr	r2, [pc, #120]	; (8006e9c <TIM_Base_SetConfig+0xf8>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d003      	beq.n	8006e2e <TIM_Base_SetConfig+0x8a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a1d      	ldr	r2, [pc, #116]	; (8006ea0 <TIM_Base_SetConfig+0xfc>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d108      	bne.n	8006e40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a08      	ldr	r2, [pc, #32]	; (8006e88 <TIM_Base_SetConfig+0xe4>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d103      	bne.n	8006e74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	691a      	ldr	r2, [r3, #16]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	615a      	str	r2, [r3, #20]
}
 8006e7a:	bf00      	nop
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	40010000 	.word	0x40010000
 8006e8c:	40000400 	.word	0x40000400
 8006e90:	40000800 	.word	0x40000800
 8006e94:	40000c00 	.word	0x40000c00
 8006e98:	40014000 	.word	0x40014000
 8006e9c:	40014400 	.word	0x40014400
 8006ea0:	40014800 	.word	0x40014800

08006ea4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	f023 0201 	bic.w	r2, r3, #1
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4a24      	ldr	r2, [pc, #144]	; (8006f60 <TIM_TI1_SetConfig+0xbc>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d013      	beq.n	8006efa <TIM_TI1_SetConfig+0x56>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed8:	d00f      	beq.n	8006efa <TIM_TI1_SetConfig+0x56>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4a21      	ldr	r2, [pc, #132]	; (8006f64 <TIM_TI1_SetConfig+0xc0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00b      	beq.n	8006efa <TIM_TI1_SetConfig+0x56>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4a20      	ldr	r2, [pc, #128]	; (8006f68 <TIM_TI1_SetConfig+0xc4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d007      	beq.n	8006efa <TIM_TI1_SetConfig+0x56>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4a1f      	ldr	r2, [pc, #124]	; (8006f6c <TIM_TI1_SetConfig+0xc8>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d003      	beq.n	8006efa <TIM_TI1_SetConfig+0x56>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4a1e      	ldr	r2, [pc, #120]	; (8006f70 <TIM_TI1_SetConfig+0xcc>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d101      	bne.n	8006efe <TIM_TI1_SetConfig+0x5a>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <TIM_TI1_SetConfig+0x5c>
 8006efe:	2300      	movs	r3, #0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d008      	beq.n	8006f16 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f023 0303 	bic.w	r3, r3, #3
 8006f0a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	e003      	b.n	8006f1e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f043 0301 	orr.w	r3, r3, #1
 8006f1c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	011b      	lsls	r3, r3, #4
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f023 030a 	bic.w	r3, r3, #10
 8006f38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f003 030a 	and.w	r3, r3, #10
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	621a      	str	r2, [r3, #32]
}
 8006f52:	bf00      	nop
 8006f54:	371c      	adds	r7, #28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	40010000 	.word	0x40010000
 8006f64:	40000400 	.word	0x40000400
 8006f68:	40000800 	.word	0x40000800
 8006f6c:	40000c00 	.word	0x40000c00
 8006f70:	40014000 	.word	0x40014000

08006f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	f023 0201 	bic.w	r2, r3, #1
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f023 030a 	bic.w	r3, r3, #10
 8006fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	621a      	str	r2, [r3, #32]
}
 8006fc6:	bf00      	nop
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b087      	sub	sp, #28
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	607a      	str	r2, [r7, #4]
 8006fde:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	f023 0210 	bic.w	r2, r3, #16
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ffe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	4313      	orrs	r3, r2
 8007008:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007010:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	031b      	lsls	r3, r3, #12
 8007016:	b29b      	uxth	r3, r3
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007024:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	4313      	orrs	r3, r2
 8007032:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	621a      	str	r2, [r3, #32]
}
 8007040:	bf00      	nop
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	f023 0210 	bic.w	r2, r3, #16
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007076:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	031b      	lsls	r3, r3, #12
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	4313      	orrs	r3, r2
 8007080:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007088:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	011b      	lsls	r3, r3, #4
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	4313      	orrs	r3, r2
 8007092:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	621a      	str	r2, [r3, #32]
}
 80070a0:	bf00      	nop
 80070a2:	371c      	adds	r7, #28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f023 0303 	bic.w	r3, r3, #3
 80070d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4313      	orrs	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	011b      	lsls	r3, r3, #4
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80070fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	021b      	lsls	r3, r3, #8
 8007102:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4313      	orrs	r3, r2
 800710a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	621a      	str	r2, [r3, #32]
}
 8007118:	bf00      	nop
 800711a:	371c      	adds	r7, #28
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
 8007130:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007150:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	021b      	lsls	r3, r3, #8
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	4313      	orrs	r3, r2
 800715a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007162:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	031b      	lsls	r3, r3, #12
 8007168:	b29b      	uxth	r3, r3
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007176:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	031b      	lsls	r3, r3, #12
 800717c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	4313      	orrs	r3, r2
 8007184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	621a      	str	r2, [r3, #32]
}
 8007192:	bf00      	nop
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800719e:	b480      	push	{r7}
 80071a0:	b085      	sub	sp, #20
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	f043 0307 	orr.w	r3, r3, #7
 80071c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	609a      	str	r2, [r3, #8]
}
 80071c8:	bf00      	nop
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
 80071e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	021a      	lsls	r2, r3, #8
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	431a      	orrs	r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	4313      	orrs	r3, r2
 8007200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	609a      	str	r2, [r3, #8]
}
 8007208:	bf00      	nop
 800720a:	371c      	adds	r7, #28
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	f003 031f 	and.w	r3, r3, #31
 8007226:	2201      	movs	r2, #1
 8007228:	fa02 f303 	lsl.w	r3, r2, r3
 800722c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6a1a      	ldr	r2, [r3, #32]
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	43db      	mvns	r3, r3
 8007236:	401a      	ands	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a1a      	ldr	r2, [r3, #32]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f003 031f 	and.w	r3, r3, #31
 8007246:	6879      	ldr	r1, [r7, #4]
 8007248:	fa01 f303 	lsl.w	r3, r1, r3
 800724c:	431a      	orrs	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	621a      	str	r2, [r3, #32]
}
 8007252:	bf00      	nop
 8007254:	371c      	adds	r7, #28
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
	...

08007260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007270:	2b01      	cmp	r3, #1
 8007272:	d101      	bne.n	8007278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007274:	2302      	movs	r3, #2
 8007276:	e050      	b.n	800731a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a1c      	ldr	r2, [pc, #112]	; (8007328 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d018      	beq.n	80072ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c4:	d013      	beq.n	80072ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a18      	ldr	r2, [pc, #96]	; (800732c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d00e      	beq.n	80072ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a16      	ldr	r2, [pc, #88]	; (8007330 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d009      	beq.n	80072ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a15      	ldr	r2, [pc, #84]	; (8007334 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d004      	beq.n	80072ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a13      	ldr	r2, [pc, #76]	; (8007338 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d10c      	bne.n	8007308 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	40010000 	.word	0x40010000
 800732c:	40000400 	.word	0x40000400
 8007330:	40000800 	.word	0x40000800
 8007334:	40000c00 	.word	0x40000c00
 8007338:	40014000 	.word	0x40014000

0800733c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e03f      	b.n	80073f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fa fde2 	bl	8001f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2224      	movs	r2, #36	; 0x24
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68da      	ldr	r2, [r3, #12]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fc7b 	bl	8007ca4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	691a      	ldr	r2, [r3, #16]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	695a      	ldr	r2, [r3, #20]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68da      	ldr	r2, [r3, #12]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b0ba      	sub	sp, #232	; 0xe8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007426:	2300      	movs	r3, #0
 8007428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800742c:	2300      	movs	r3, #0
 800742e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007436:	f003 030f 	and.w	r3, r3, #15
 800743a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800743e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10f      	bne.n	8007466 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800744a:	f003 0320 	and.w	r3, r3, #32
 800744e:	2b00      	cmp	r3, #0
 8007450:	d009      	beq.n	8007466 <HAL_UART_IRQHandler+0x66>
 8007452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007456:	f003 0320 	and.w	r3, r3, #32
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fb65 	bl	8007b2e <UART_Receive_IT>
      return;
 8007464:	e256      	b.n	8007914 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 80de 	beq.w	800762c <HAL_UART_IRQHandler+0x22c>
 8007470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d106      	bne.n	800748a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800747c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007480:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 80d1 	beq.w	800762c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800748a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00b      	beq.n	80074ae <HAL_UART_IRQHandler+0xae>
 8007496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800749a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a6:	f043 0201 	orr.w	r2, r3, #1
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b2:	f003 0304 	and.w	r3, r3, #4
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00b      	beq.n	80074d2 <HAL_UART_IRQHandler+0xd2>
 80074ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d005      	beq.n	80074d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	f043 0202 	orr.w	r2, r3, #2
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00b      	beq.n	80074f6 <HAL_UART_IRQHandler+0xf6>
 80074de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ee:	f043 0204 	orr.w	r2, r3, #4
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80074f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074fa:	f003 0308 	and.w	r3, r3, #8
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d011      	beq.n	8007526 <HAL_UART_IRQHandler+0x126>
 8007502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007506:	f003 0320 	and.w	r3, r3, #32
 800750a:	2b00      	cmp	r3, #0
 800750c:	d105      	bne.n	800751a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800750e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d005      	beq.n	8007526 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	f043 0208 	orr.w	r2, r3, #8
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 81ed 	beq.w	800790a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d008      	beq.n	800754e <HAL_UART_IRQHandler+0x14e>
 800753c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 faf0 	bl	8007b2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007558:	2b40      	cmp	r3, #64	; 0x40
 800755a:	bf0c      	ite	eq
 800755c:	2301      	moveq	r3, #1
 800755e:	2300      	movne	r3, #0
 8007560:	b2db      	uxtb	r3, r3
 8007562:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d103      	bne.n	800757a <HAL_UART_IRQHandler+0x17a>
 8007572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007576:	2b00      	cmp	r3, #0
 8007578:	d04f      	beq.n	800761a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f9f8 	bl	8007970 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758a:	2b40      	cmp	r3, #64	; 0x40
 800758c:	d141      	bne.n	8007612 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3314      	adds	r3, #20
 8007594:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3314      	adds	r3, #20
 80075b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80075d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1d9      	bne.n	800758e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d013      	beq.n	800760a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e6:	4a7d      	ldr	r2, [pc, #500]	; (80077dc <HAL_UART_IRQHandler+0x3dc>)
 80075e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fb fd9c 	bl	800312c <HAL_DMA_Abort_IT>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d016      	beq.n	8007628 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007604:	4610      	mov	r0, r2
 8007606:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007608:	e00e      	b.n	8007628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f99a 	bl	8007944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007610:	e00a      	b.n	8007628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f996 	bl	8007944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007618:	e006      	b.n	8007628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f992 	bl	8007944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007626:	e170      	b.n	800790a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007628:	bf00      	nop
    return;
 800762a:	e16e      	b.n	800790a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007630:	2b01      	cmp	r3, #1
 8007632:	f040 814a 	bne.w	80078ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800763a:	f003 0310 	and.w	r3, r3, #16
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 8143 	beq.w	80078ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007648:	f003 0310 	and.w	r3, r3, #16
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 813c 	beq.w	80078ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007652:	2300      	movs	r3, #0
 8007654:	60bb      	str	r3, [r7, #8]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60bb      	str	r3, [r7, #8]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	60bb      	str	r3, [r7, #8]
 8007666:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007672:	2b40      	cmp	r3, #64	; 0x40
 8007674:	f040 80b4 	bne.w	80077e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007684:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 8140 	beq.w	800790e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007696:	429a      	cmp	r2, r3
 8007698:	f080 8139 	bcs.w	800790e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ae:	f000 8088 	beq.w	80077c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	330c      	adds	r3, #12
 80076b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	330c      	adds	r3, #12
 80076da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80076de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80076e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80076ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80076f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1d9      	bne.n	80076b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3314      	adds	r3, #20
 8007704:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007708:	e853 3f00 	ldrex	r3, [r3]
 800770c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800770e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007710:	f023 0301 	bic.w	r3, r3, #1
 8007714:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3314      	adds	r3, #20
 800771e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007722:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007726:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800772a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e1      	bne.n	80076fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3314      	adds	r3, #20
 8007740:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800774a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800774c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3314      	adds	r3, #20
 800775a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800775e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007760:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007764:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800776c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e3      	bne.n	800773a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2220      	movs	r2, #32
 8007776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	330c      	adds	r3, #12
 8007786:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800778a:	e853 3f00 	ldrex	r3, [r3]
 800778e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007792:	f023 0310 	bic.w	r3, r3, #16
 8007796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	330c      	adds	r3, #12
 80077a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80077a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80077a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077ac:	e841 2300 	strex	r3, r2, [r1]
 80077b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e3      	bne.n	8007780 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fb fc45 	bl	800304c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f8c0 	bl	8007958 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077d8:	e099      	b.n	800790e <HAL_UART_IRQHandler+0x50e>
 80077da:	bf00      	nop
 80077dc:	08007a37 	.word	0x08007a37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 808b 	beq.w	8007912 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80077fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 8086 	beq.w	8007912 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	330c      	adds	r3, #12
 800780c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007818:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800781c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	330c      	adds	r3, #12
 8007826:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800782a:	647a      	str	r2, [r7, #68]	; 0x44
 800782c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e3      	bne.n	8007806 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3314      	adds	r3, #20
 8007844:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	623b      	str	r3, [r7, #32]
   return(result);
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	f023 0301 	bic.w	r3, r3, #1
 8007854:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3314      	adds	r3, #20
 800785e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007862:	633a      	str	r2, [r7, #48]	; 0x30
 8007864:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e3      	bne.n	800783e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2220      	movs	r2, #32
 800787a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	330c      	adds	r3, #12
 800788a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	60fb      	str	r3, [r7, #12]
   return(result);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f023 0310 	bic.w	r3, r3, #16
 800789a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	330c      	adds	r3, #12
 80078a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80078a8:	61fa      	str	r2, [r7, #28]
 80078aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	69b9      	ldr	r1, [r7, #24]
 80078ae:	69fa      	ldr	r2, [r7, #28]
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	617b      	str	r3, [r7, #20]
   return(result);
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e3      	bne.n	8007884 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f848 	bl	8007958 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078c8:	e023      	b.n	8007912 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80078ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d009      	beq.n	80078ea <HAL_UART_IRQHandler+0x4ea>
 80078d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f8bb 	bl	8007a5e <UART_Transmit_IT>
    return;
 80078e8:	e014      	b.n	8007914 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80078ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00e      	beq.n	8007914 <HAL_UART_IRQHandler+0x514>
 80078f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d008      	beq.n	8007914 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f8fb 	bl	8007afe <UART_EndTransmit_IT>
    return;
 8007908:	e004      	b.n	8007914 <HAL_UART_IRQHandler+0x514>
    return;
 800790a:	bf00      	nop
 800790c:	e002      	b.n	8007914 <HAL_UART_IRQHandler+0x514>
      return;
 800790e:	bf00      	nop
 8007910:	e000      	b.n	8007914 <HAL_UART_IRQHandler+0x514>
      return;
 8007912:	bf00      	nop
  }
}
 8007914:	37e8      	adds	r7, #232	; 0xe8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop

0800791c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007970:	b480      	push	{r7}
 8007972:	b095      	sub	sp, #84	; 0x54
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	330c      	adds	r3, #12
 800797e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800798e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	330c      	adds	r3, #12
 8007996:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007998:	643a      	str	r2, [r7, #64]	; 0x40
 800799a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800799e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e5      	bne.n	8007978 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3314      	adds	r3, #20
 80079b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	f023 0301 	bic.w	r3, r3, #1
 80079c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3314      	adds	r3, #20
 80079ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079d4:	e841 2300 	strex	r3, r2, [r1]
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e5      	bne.n	80079ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d119      	bne.n	8007a1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	330c      	adds	r3, #12
 80079ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	e853 3f00 	ldrex	r3, [r3]
 80079f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f023 0310 	bic.w	r3, r3, #16
 80079fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	330c      	adds	r3, #12
 8007a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a08:	61ba      	str	r2, [r7, #24]
 8007a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0c:	6979      	ldr	r1, [r7, #20]
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	e841 2300 	strex	r3, r2, [r1]
 8007a14:	613b      	str	r3, [r7, #16]
   return(result);
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e5      	bne.n	80079e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a2a:	bf00      	nop
 8007a2c:	3754      	adds	r7, #84	; 0x54
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f7ff ff77 	bl	8007944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a56:	bf00      	nop
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b085      	sub	sp, #20
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b21      	cmp	r3, #33	; 0x21
 8007a70:	d13e      	bne.n	8007af0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a7a:	d114      	bne.n	8007aa6 <UART_Transmit_IT+0x48>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d110      	bne.n	8007aa6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	1c9a      	adds	r2, r3, #2
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	621a      	str	r2, [r3, #32]
 8007aa4:	e008      	b.n	8007ab8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	1c59      	adds	r1, r3, #1
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	6211      	str	r1, [r2, #32]
 8007ab0:	781a      	ldrb	r2, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10f      	bne.n	8007aec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ada:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	e000      	b.n	8007af2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007af0:	2302      	movs	r3, #2
  }
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b082      	sub	sp, #8
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68da      	ldr	r2, [r3, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7ff fefc 	bl	800791c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b08c      	sub	sp, #48	; 0x30
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b22      	cmp	r3, #34	; 0x22
 8007b40:	f040 80ab 	bne.w	8007c9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b4c:	d117      	bne.n	8007b7e <UART_Receive_IT+0x50>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d113      	bne.n	8007b7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b76:	1c9a      	adds	r2, r3, #2
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	629a      	str	r2, [r3, #40]	; 0x28
 8007b7c:	e026      	b.n	8007bcc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007b84:	2300      	movs	r3, #0
 8007b86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b90:	d007      	beq.n	8007ba2 <UART_Receive_IT+0x74>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10a      	bne.n	8007bb0 <UART_Receive_IT+0x82>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d106      	bne.n	8007bb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	701a      	strb	r2, [r3, #0]
 8007bae:	e008      	b.n	8007bc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc6:	1c5a      	adds	r2, r3, #1
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	4619      	mov	r1, r3
 8007bda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d15a      	bne.n	8007c96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68da      	ldr	r2, [r3, #12]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f022 0220 	bic.w	r2, r2, #32
 8007bee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	695a      	ldr	r2, [r3, #20]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0201 	bic.w	r2, r2, #1
 8007c0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d135      	bne.n	8007c8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	330c      	adds	r3, #12
 8007c2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	613b      	str	r3, [r7, #16]
   return(result);
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f023 0310 	bic.w	r3, r3, #16
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	330c      	adds	r3, #12
 8007c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c46:	623a      	str	r2, [r7, #32]
 8007c48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4a:	69f9      	ldr	r1, [r7, #28]
 8007c4c:	6a3a      	ldr	r2, [r7, #32]
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e5      	bne.n	8007c26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0310 	and.w	r3, r3, #16
 8007c64:	2b10      	cmp	r3, #16
 8007c66:	d10a      	bne.n	8007c7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c68:	2300      	movs	r3, #0
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff fe67 	bl	8007958 <HAL_UARTEx_RxEventCallback>
 8007c8a:	e002      	b.n	8007c92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f7ff fe4f 	bl	8007930 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	e002      	b.n	8007c9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	e000      	b.n	8007c9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007c9a:	2302      	movs	r3, #2
  }
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3730      	adds	r7, #48	; 0x30
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ca8:	b0c0      	sub	sp, #256	; 0x100
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc0:	68d9      	ldr	r1, [r3, #12]
 8007cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	ea40 0301 	orr.w	r3, r0, r1
 8007ccc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce8:	69db      	ldr	r3, [r3, #28]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007cfc:	f021 010c 	bic.w	r1, r1, #12
 8007d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d0a:	430b      	orrs	r3, r1
 8007d0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d1e:	6999      	ldr	r1, [r3, #24]
 8007d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	ea40 0301 	orr.w	r3, r0, r1
 8007d2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4b8f      	ldr	r3, [pc, #572]	; (8007f70 <UART_SetConfig+0x2cc>)
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d005      	beq.n	8007d44 <UART_SetConfig+0xa0>
 8007d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	4b8d      	ldr	r3, [pc, #564]	; (8007f74 <UART_SetConfig+0x2d0>)
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d104      	bne.n	8007d4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d44:	f7fe fb38 	bl	80063b8 <HAL_RCC_GetPCLK2Freq>
 8007d48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d4c:	e003      	b.n	8007d56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d4e:	f7fe fb1f 	bl	8006390 <HAL_RCC_GetPCLK1Freq>
 8007d52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d60:	f040 810c 	bne.w	8007f7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007d72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007d76:	4622      	mov	r2, r4
 8007d78:	462b      	mov	r3, r5
 8007d7a:	1891      	adds	r1, r2, r2
 8007d7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d7e:	415b      	adcs	r3, r3
 8007d80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d86:	4621      	mov	r1, r4
 8007d88:	eb12 0801 	adds.w	r8, r2, r1
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	eb43 0901 	adc.w	r9, r3, r1
 8007d92:	f04f 0200 	mov.w	r2, #0
 8007d96:	f04f 0300 	mov.w	r3, #0
 8007d9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007da2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007da6:	4690      	mov	r8, r2
 8007da8:	4699      	mov	r9, r3
 8007daa:	4623      	mov	r3, r4
 8007dac:	eb18 0303 	adds.w	r3, r8, r3
 8007db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007db4:	462b      	mov	r3, r5
 8007db6:	eb49 0303 	adc.w	r3, r9, r3
 8007dba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007dce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	18db      	adds	r3, r3, r3
 8007dd6:	653b      	str	r3, [r7, #80]	; 0x50
 8007dd8:	4613      	mov	r3, r2
 8007dda:	eb42 0303 	adc.w	r3, r2, r3
 8007dde:	657b      	str	r3, [r7, #84]	; 0x54
 8007de0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007de4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007de8:	f7f8 ff36 	bl	8000c58 <__aeabi_uldivmod>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4b61      	ldr	r3, [pc, #388]	; (8007f78 <UART_SetConfig+0x2d4>)
 8007df2:	fba3 2302 	umull	r2, r3, r3, r2
 8007df6:	095b      	lsrs	r3, r3, #5
 8007df8:	011c      	lsls	r4, r3, #4
 8007dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e0c:	4642      	mov	r2, r8
 8007e0e:	464b      	mov	r3, r9
 8007e10:	1891      	adds	r1, r2, r2
 8007e12:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e14:	415b      	adcs	r3, r3
 8007e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e1c:	4641      	mov	r1, r8
 8007e1e:	eb12 0a01 	adds.w	sl, r2, r1
 8007e22:	4649      	mov	r1, r9
 8007e24:	eb43 0b01 	adc.w	fp, r3, r1
 8007e28:	f04f 0200 	mov.w	r2, #0
 8007e2c:	f04f 0300 	mov.w	r3, #0
 8007e30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e3c:	4692      	mov	sl, r2
 8007e3e:	469b      	mov	fp, r3
 8007e40:	4643      	mov	r3, r8
 8007e42:	eb1a 0303 	adds.w	r3, sl, r3
 8007e46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e4a:	464b      	mov	r3, r9
 8007e4c:	eb4b 0303 	adc.w	r3, fp, r3
 8007e50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007e64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	18db      	adds	r3, r3, r3
 8007e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8007e6e:	4613      	mov	r3, r2
 8007e70:	eb42 0303 	adc.w	r3, r2, r3
 8007e74:	647b      	str	r3, [r7, #68]	; 0x44
 8007e76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e7e:	f7f8 feeb 	bl	8000c58 <__aeabi_uldivmod>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	4611      	mov	r1, r2
 8007e88:	4b3b      	ldr	r3, [pc, #236]	; (8007f78 <UART_SetConfig+0x2d4>)
 8007e8a:	fba3 2301 	umull	r2, r3, r3, r1
 8007e8e:	095b      	lsrs	r3, r3, #5
 8007e90:	2264      	movs	r2, #100	; 0x64
 8007e92:	fb02 f303 	mul.w	r3, r2, r3
 8007e96:	1acb      	subs	r3, r1, r3
 8007e98:	00db      	lsls	r3, r3, #3
 8007e9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e9e:	4b36      	ldr	r3, [pc, #216]	; (8007f78 <UART_SetConfig+0x2d4>)
 8007ea0:	fba3 2302 	umull	r2, r3, r3, r2
 8007ea4:	095b      	lsrs	r3, r3, #5
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007eac:	441c      	add	r4, r3
 8007eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007eb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007ebc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ec0:	4642      	mov	r2, r8
 8007ec2:	464b      	mov	r3, r9
 8007ec4:	1891      	adds	r1, r2, r2
 8007ec6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ec8:	415b      	adcs	r3, r3
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ecc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ed0:	4641      	mov	r1, r8
 8007ed2:	1851      	adds	r1, r2, r1
 8007ed4:	6339      	str	r1, [r7, #48]	; 0x30
 8007ed6:	4649      	mov	r1, r9
 8007ed8:	414b      	adcs	r3, r1
 8007eda:	637b      	str	r3, [r7, #52]	; 0x34
 8007edc:	f04f 0200 	mov.w	r2, #0
 8007ee0:	f04f 0300 	mov.w	r3, #0
 8007ee4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ee8:	4659      	mov	r1, fp
 8007eea:	00cb      	lsls	r3, r1, #3
 8007eec:	4651      	mov	r1, sl
 8007eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ef2:	4651      	mov	r1, sl
 8007ef4:	00ca      	lsls	r2, r1, #3
 8007ef6:	4610      	mov	r0, r2
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4603      	mov	r3, r0
 8007efc:	4642      	mov	r2, r8
 8007efe:	189b      	adds	r3, r3, r2
 8007f00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f04:	464b      	mov	r3, r9
 8007f06:	460a      	mov	r2, r1
 8007f08:	eb42 0303 	adc.w	r3, r2, r3
 8007f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f24:	460b      	mov	r3, r1
 8007f26:	18db      	adds	r3, r3, r3
 8007f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	eb42 0303 	adc.w	r3, r2, r3
 8007f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f3a:	f7f8 fe8d 	bl	8000c58 <__aeabi_uldivmod>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4b0d      	ldr	r3, [pc, #52]	; (8007f78 <UART_SetConfig+0x2d4>)
 8007f44:	fba3 1302 	umull	r1, r3, r3, r2
 8007f48:	095b      	lsrs	r3, r3, #5
 8007f4a:	2164      	movs	r1, #100	; 0x64
 8007f4c:	fb01 f303 	mul.w	r3, r1, r3
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	00db      	lsls	r3, r3, #3
 8007f54:	3332      	adds	r3, #50	; 0x32
 8007f56:	4a08      	ldr	r2, [pc, #32]	; (8007f78 <UART_SetConfig+0x2d4>)
 8007f58:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5c:	095b      	lsrs	r3, r3, #5
 8007f5e:	f003 0207 	and.w	r2, r3, #7
 8007f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4422      	add	r2, r4
 8007f6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f6c:	e106      	b.n	800817c <UART_SetConfig+0x4d8>
 8007f6e:	bf00      	nop
 8007f70:	40011000 	.word	0x40011000
 8007f74:	40011400 	.word	0x40011400
 8007f78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f80:	2200      	movs	r2, #0
 8007f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f8e:	4642      	mov	r2, r8
 8007f90:	464b      	mov	r3, r9
 8007f92:	1891      	adds	r1, r2, r2
 8007f94:	6239      	str	r1, [r7, #32]
 8007f96:	415b      	adcs	r3, r3
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24
 8007f9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f9e:	4641      	mov	r1, r8
 8007fa0:	1854      	adds	r4, r2, r1
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	eb43 0501 	adc.w	r5, r3, r1
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	00eb      	lsls	r3, r5, #3
 8007fb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fb6:	00e2      	lsls	r2, r4, #3
 8007fb8:	4614      	mov	r4, r2
 8007fba:	461d      	mov	r5, r3
 8007fbc:	4643      	mov	r3, r8
 8007fbe:	18e3      	adds	r3, r4, r3
 8007fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fc4:	464b      	mov	r3, r9
 8007fc6:	eb45 0303 	adc.w	r3, r5, r3
 8007fca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007fde:	f04f 0200 	mov.w	r2, #0
 8007fe2:	f04f 0300 	mov.w	r3, #0
 8007fe6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007fea:	4629      	mov	r1, r5
 8007fec:	008b      	lsls	r3, r1, #2
 8007fee:	4621      	mov	r1, r4
 8007ff0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	008a      	lsls	r2, r1, #2
 8007ff8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007ffc:	f7f8 fe2c 	bl	8000c58 <__aeabi_uldivmod>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	4b60      	ldr	r3, [pc, #384]	; (8008188 <UART_SetConfig+0x4e4>)
 8008006:	fba3 2302 	umull	r2, r3, r3, r2
 800800a:	095b      	lsrs	r3, r3, #5
 800800c:	011c      	lsls	r4, r3, #4
 800800e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008012:	2200      	movs	r2, #0
 8008014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008018:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800801c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008020:	4642      	mov	r2, r8
 8008022:	464b      	mov	r3, r9
 8008024:	1891      	adds	r1, r2, r2
 8008026:	61b9      	str	r1, [r7, #24]
 8008028:	415b      	adcs	r3, r3
 800802a:	61fb      	str	r3, [r7, #28]
 800802c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008030:	4641      	mov	r1, r8
 8008032:	1851      	adds	r1, r2, r1
 8008034:	6139      	str	r1, [r7, #16]
 8008036:	4649      	mov	r1, r9
 8008038:	414b      	adcs	r3, r1
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	f04f 0200 	mov.w	r2, #0
 8008040:	f04f 0300 	mov.w	r3, #0
 8008044:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008048:	4659      	mov	r1, fp
 800804a:	00cb      	lsls	r3, r1, #3
 800804c:	4651      	mov	r1, sl
 800804e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008052:	4651      	mov	r1, sl
 8008054:	00ca      	lsls	r2, r1, #3
 8008056:	4610      	mov	r0, r2
 8008058:	4619      	mov	r1, r3
 800805a:	4603      	mov	r3, r0
 800805c:	4642      	mov	r2, r8
 800805e:	189b      	adds	r3, r3, r2
 8008060:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008064:	464b      	mov	r3, r9
 8008066:	460a      	mov	r2, r1
 8008068:	eb42 0303 	adc.w	r3, r2, r3
 800806c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	67bb      	str	r3, [r7, #120]	; 0x78
 800807a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800807c:	f04f 0200 	mov.w	r2, #0
 8008080:	f04f 0300 	mov.w	r3, #0
 8008084:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008088:	4649      	mov	r1, r9
 800808a:	008b      	lsls	r3, r1, #2
 800808c:	4641      	mov	r1, r8
 800808e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008092:	4641      	mov	r1, r8
 8008094:	008a      	lsls	r2, r1, #2
 8008096:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800809a:	f7f8 fddd 	bl	8000c58 <__aeabi_uldivmod>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4611      	mov	r1, r2
 80080a4:	4b38      	ldr	r3, [pc, #224]	; (8008188 <UART_SetConfig+0x4e4>)
 80080a6:	fba3 2301 	umull	r2, r3, r3, r1
 80080aa:	095b      	lsrs	r3, r3, #5
 80080ac:	2264      	movs	r2, #100	; 0x64
 80080ae:	fb02 f303 	mul.w	r3, r2, r3
 80080b2:	1acb      	subs	r3, r1, r3
 80080b4:	011b      	lsls	r3, r3, #4
 80080b6:	3332      	adds	r3, #50	; 0x32
 80080b8:	4a33      	ldr	r2, [pc, #204]	; (8008188 <UART_SetConfig+0x4e4>)
 80080ba:	fba2 2303 	umull	r2, r3, r2, r3
 80080be:	095b      	lsrs	r3, r3, #5
 80080c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080c4:	441c      	add	r4, r3
 80080c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080ca:	2200      	movs	r2, #0
 80080cc:	673b      	str	r3, [r7, #112]	; 0x70
 80080ce:	677a      	str	r2, [r7, #116]	; 0x74
 80080d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80080d4:	4642      	mov	r2, r8
 80080d6:	464b      	mov	r3, r9
 80080d8:	1891      	adds	r1, r2, r2
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	415b      	adcs	r3, r3
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080e4:	4641      	mov	r1, r8
 80080e6:	1851      	adds	r1, r2, r1
 80080e8:	6039      	str	r1, [r7, #0]
 80080ea:	4649      	mov	r1, r9
 80080ec:	414b      	adcs	r3, r1
 80080ee:	607b      	str	r3, [r7, #4]
 80080f0:	f04f 0200 	mov.w	r2, #0
 80080f4:	f04f 0300 	mov.w	r3, #0
 80080f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80080fc:	4659      	mov	r1, fp
 80080fe:	00cb      	lsls	r3, r1, #3
 8008100:	4651      	mov	r1, sl
 8008102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008106:	4651      	mov	r1, sl
 8008108:	00ca      	lsls	r2, r1, #3
 800810a:	4610      	mov	r0, r2
 800810c:	4619      	mov	r1, r3
 800810e:	4603      	mov	r3, r0
 8008110:	4642      	mov	r2, r8
 8008112:	189b      	adds	r3, r3, r2
 8008114:	66bb      	str	r3, [r7, #104]	; 0x68
 8008116:	464b      	mov	r3, r9
 8008118:	460a      	mov	r2, r1
 800811a:	eb42 0303 	adc.w	r3, r2, r3
 800811e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	663b      	str	r3, [r7, #96]	; 0x60
 800812a:	667a      	str	r2, [r7, #100]	; 0x64
 800812c:	f04f 0200 	mov.w	r2, #0
 8008130:	f04f 0300 	mov.w	r3, #0
 8008134:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008138:	4649      	mov	r1, r9
 800813a:	008b      	lsls	r3, r1, #2
 800813c:	4641      	mov	r1, r8
 800813e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008142:	4641      	mov	r1, r8
 8008144:	008a      	lsls	r2, r1, #2
 8008146:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800814a:	f7f8 fd85 	bl	8000c58 <__aeabi_uldivmod>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	4b0d      	ldr	r3, [pc, #52]	; (8008188 <UART_SetConfig+0x4e4>)
 8008154:	fba3 1302 	umull	r1, r3, r3, r2
 8008158:	095b      	lsrs	r3, r3, #5
 800815a:	2164      	movs	r1, #100	; 0x64
 800815c:	fb01 f303 	mul.w	r3, r1, r3
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	011b      	lsls	r3, r3, #4
 8008164:	3332      	adds	r3, #50	; 0x32
 8008166:	4a08      	ldr	r2, [pc, #32]	; (8008188 <UART_SetConfig+0x4e4>)
 8008168:	fba2 2303 	umull	r2, r3, r2, r3
 800816c:	095b      	lsrs	r3, r3, #5
 800816e:	f003 020f 	and.w	r2, r3, #15
 8008172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4422      	add	r2, r4
 800817a:	609a      	str	r2, [r3, #8]
}
 800817c:	bf00      	nop
 800817e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008182:	46bd      	mov	sp, r7
 8008184:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008188:	51eb851f 	.word	0x51eb851f

0800818c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008196:	2300      	movs	r3, #0
 8008198:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800819a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800819e:	2b84      	cmp	r3, #132	; 0x84
 80081a0:	d005      	beq.n	80081ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80081a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	4413      	add	r3, r2
 80081aa:	3303      	adds	r3, #3
 80081ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80081ae:	68fb      	ldr	r3, [r7, #12]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80081c0:	f001 f926 	bl	8009410 <vTaskStartScheduler>
  
  return osOK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	bd80      	pop	{r7, pc}

080081ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80081ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081cc:	b089      	sub	sp, #36	; 0x24
 80081ce:	af04      	add	r7, sp, #16
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d020      	beq.n	800821e <osThreadCreate+0x54>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d01c      	beq.n	800821e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685c      	ldr	r4, [r3, #4]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	691e      	ldr	r6, [r3, #16]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7ff ffc8 	bl	800818c <makeFreeRtosPriority>
 80081fc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008206:	9202      	str	r2, [sp, #8]
 8008208:	9301      	str	r3, [sp, #4]
 800820a:	9100      	str	r1, [sp, #0]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	4632      	mov	r2, r6
 8008210:	4629      	mov	r1, r5
 8008212:	4620      	mov	r0, r4
 8008214:	f000 ff34 	bl	8009080 <xTaskCreateStatic>
 8008218:	4603      	mov	r3, r0
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	e01c      	b.n	8008258 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685c      	ldr	r4, [r3, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800822a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008232:	4618      	mov	r0, r3
 8008234:	f7ff ffaa 	bl	800818c <makeFreeRtosPriority>
 8008238:	4602      	mov	r2, r0
 800823a:	f107 030c 	add.w	r3, r7, #12
 800823e:	9301      	str	r3, [sp, #4]
 8008240:	9200      	str	r2, [sp, #0]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	4632      	mov	r2, r6
 8008246:	4629      	mov	r1, r5
 8008248:	4620      	mov	r0, r4
 800824a:	f000 ff76 	bl	800913a <xTaskCreate>
 800824e:	4603      	mov	r3, r0
 8008250:	2b01      	cmp	r3, #1
 8008252:	d001      	beq.n	8008258 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008254:	2300      	movs	r3, #0
 8008256:	e000      	b.n	800825a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008258:	68fb      	ldr	r3, [r7, #12]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008262 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b084      	sub	sp, #16
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <osDelay+0x16>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	e000      	b.n	800827a <osDelay+0x18>
 8008278:	2301      	movs	r3, #1
 800827a:	4618      	mov	r0, r3
 800827c:	f001 f894 	bl	80093a8 <vTaskDelay>
  
  return osOK;
 8008280:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800828a:	b480      	push	{r7}
 800828c:	b083      	sub	sp, #12
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f103 0208 	add.w	r2, r3, #8
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f04f 32ff 	mov.w	r2, #4294967295
 80082a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f103 0208 	add.w	r2, r3, #8
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f103 0208 	add.w	r2, r3, #8
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80082be:	bf00      	nop
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80082ca:	b480      	push	{r7}
 80082cc:	b083      	sub	sp, #12
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	689a      	ldr	r2, [r3, #8]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	683a      	ldr	r2, [r7, #0]
 800830e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	601a      	str	r2, [r3, #0]
}
 8008320:	bf00      	nop
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008342:	d103      	bne.n	800834c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	60fb      	str	r3, [r7, #12]
 800834a:	e00c      	b.n	8008366 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3308      	adds	r3, #8
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	e002      	b.n	800835a <vListInsert+0x2e>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	429a      	cmp	r2, r3
 8008364:	d2f6      	bcs.n	8008354 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	601a      	str	r2, [r3, #0]
}
 8008392:	bf00      	nop
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800839e:	b480      	push	{r7}
 80083a0:	b085      	sub	sp, #20
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	6892      	ldr	r2, [r2, #8]
 80083b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	6852      	ldr	r2, [r2, #4]
 80083be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d103      	bne.n	80083d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	689a      	ldr	r2, [r3, #8]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	1e5a      	subs	r2, r3, #1
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
	...

080083f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10a      	bne.n	800841e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840c:	f383 8811 	msr	BASEPRI, r3
 8008410:	f3bf 8f6f 	isb	sy
 8008414:	f3bf 8f4f 	dsb	sy
 8008418:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800841a:	bf00      	nop
 800841c:	e7fe      	b.n	800841c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800841e:	f002 fab9 	bl	800a994 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842a:	68f9      	ldr	r1, [r7, #12]
 800842c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800842e:	fb01 f303 	mul.w	r3, r1, r3
 8008432:	441a      	add	r2, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844e:	3b01      	subs	r3, #1
 8008450:	68f9      	ldr	r1, [r7, #12]
 8008452:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008454:	fb01 f303 	mul.w	r3, r1, r3
 8008458:	441a      	add	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	22ff      	movs	r2, #255	; 0xff
 8008462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	22ff      	movs	r2, #255	; 0xff
 800846a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d114      	bne.n	800849e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d01a      	beq.n	80084b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	3310      	adds	r3, #16
 8008480:	4618      	mov	r0, r3
 8008482:	f001 fa49 	bl	8009918 <xTaskRemoveFromEventList>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d012      	beq.n	80084b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800848c:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <xQueueGenericReset+0xcc>)
 800848e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	e009      	b.n	80084b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3310      	adds	r3, #16
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7ff fef1 	bl	800828a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	3324      	adds	r3, #36	; 0x24
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7ff feec 	bl	800828a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80084b2:	f002 fa9f 	bl	800a9f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80084b6:	2301      	movs	r3, #1
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	e000ed04 	.word	0xe000ed04

080084c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08e      	sub	sp, #56	; 0x38
 80084c8:	af02      	add	r7, sp, #8
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10a      	bne.n	80084ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084ea:	bf00      	nop
 80084ec:	e7fe      	b.n	80084ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10a      	bne.n	800850a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008506:	bf00      	nop
 8008508:	e7fe      	b.n	8008508 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <xQueueGenericCreateStatic+0x52>
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <xQueueGenericCreateStatic+0x56>
 8008516:	2301      	movs	r3, #1
 8008518:	e000      	b.n	800851c <xQueueGenericCreateStatic+0x58>
 800851a:	2300      	movs	r3, #0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10a      	bne.n	8008536 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	623b      	str	r3, [r7, #32]
}
 8008532:	bf00      	nop
 8008534:	e7fe      	b.n	8008534 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d102      	bne.n	8008542 <xQueueGenericCreateStatic+0x7e>
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <xQueueGenericCreateStatic+0x82>
 8008542:	2301      	movs	r3, #1
 8008544:	e000      	b.n	8008548 <xQueueGenericCreateStatic+0x84>
 8008546:	2300      	movs	r3, #0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	61fb      	str	r3, [r7, #28]
}
 800855e:	bf00      	nop
 8008560:	e7fe      	b.n	8008560 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008562:	2348      	movs	r3, #72	; 0x48
 8008564:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2b48      	cmp	r3, #72	; 0x48
 800856a:	d00a      	beq.n	8008582 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	61bb      	str	r3, [r7, #24]
}
 800857e:	bf00      	nop
 8008580:	e7fe      	b.n	8008580 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008582:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00d      	beq.n	80085aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800858e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008596:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800859a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	4613      	mov	r3, r2
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	68b9      	ldr	r1, [r7, #8]
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 f83f 	bl	8008628 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3730      	adds	r7, #48	; 0x30
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b08a      	sub	sp, #40	; 0x28
 80085b8:	af02      	add	r7, sp, #8
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	4613      	mov	r3, r2
 80085c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10a      	bne.n	80085de <xQueueGenericCreate+0x2a>
	__asm volatile
 80085c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085cc:	f383 8811 	msr	BASEPRI, r3
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	613b      	str	r3, [r7, #16]
}
 80085da:	bf00      	nop
 80085dc:	e7fe      	b.n	80085dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	68ba      	ldr	r2, [r7, #8]
 80085e2:	fb02 f303 	mul.w	r3, r2, r3
 80085e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	3348      	adds	r3, #72	; 0x48
 80085ec:	4618      	mov	r0, r3
 80085ee:	f002 faf3 	bl	800abd8 <pvPortMalloc>
 80085f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d011      	beq.n	800861e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	3348      	adds	r3, #72	; 0x48
 8008602:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800860c:	79fa      	ldrb	r2, [r7, #7]
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	4613      	mov	r3, r2
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	68b9      	ldr	r1, [r7, #8]
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f000 f805 	bl	8008628 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800861e:	69bb      	ldr	r3, [r7, #24]
	}
 8008620:	4618      	mov	r0, r3
 8008622:	3720      	adds	r7, #32
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d103      	bne.n	8008644 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	601a      	str	r2, [r3, #0]
 8008642:	e002      	b.n	800864a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008656:	2101      	movs	r1, #1
 8008658:	69b8      	ldr	r0, [r7, #24]
 800865a:	f7ff fecb 	bl	80083f4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800865e:	bf00      	nop
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
	...

08008668 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b08e      	sub	sp, #56	; 0x38
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008676:	2300      	movs	r3, #0
 8008678:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10a      	bne.n	800869a <xQueueGenericSend+0x32>
	__asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008696:	bf00      	nop
 8008698:	e7fe      	b.n	8008698 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d103      	bne.n	80086a8 <xQueueGenericSend+0x40>
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d101      	bne.n	80086ac <xQueueGenericSend+0x44>
 80086a8:	2301      	movs	r3, #1
 80086aa:	e000      	b.n	80086ae <xQueueGenericSend+0x46>
 80086ac:	2300      	movs	r3, #0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10a      	bne.n	80086c8 <xQueueGenericSend+0x60>
	__asm volatile
 80086b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086c4:	bf00      	nop
 80086c6:	e7fe      	b.n	80086c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d103      	bne.n	80086d6 <xQueueGenericSend+0x6e>
 80086ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d101      	bne.n	80086da <xQueueGenericSend+0x72>
 80086d6:	2301      	movs	r3, #1
 80086d8:	e000      	b.n	80086dc <xQueueGenericSend+0x74>
 80086da:	2300      	movs	r3, #0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10a      	bne.n	80086f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	623b      	str	r3, [r7, #32]
}
 80086f2:	bf00      	nop
 80086f4:	e7fe      	b.n	80086f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086f6:	f001 facb 	bl	8009c90 <xTaskGetSchedulerState>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d102      	bne.n	8008706 <xQueueGenericSend+0x9e>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d101      	bne.n	800870a <xQueueGenericSend+0xa2>
 8008706:	2301      	movs	r3, #1
 8008708:	e000      	b.n	800870c <xQueueGenericSend+0xa4>
 800870a:	2300      	movs	r3, #0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10a      	bne.n	8008726 <xQueueGenericSend+0xbe>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	61fb      	str	r3, [r7, #28]
}
 8008722:	bf00      	nop
 8008724:	e7fe      	b.n	8008724 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008726:	f002 f935 	bl	800a994 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800872a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800872e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008732:	429a      	cmp	r2, r3
 8008734:	d302      	bcc.n	800873c <xQueueGenericSend+0xd4>
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	2b02      	cmp	r3, #2
 800873a:	d129      	bne.n	8008790 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	68b9      	ldr	r1, [r7, #8]
 8008740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008742:	f000 fb2f 	bl	8008da4 <prvCopyDataToQueue>
 8008746:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	2b00      	cmp	r3, #0
 800874e:	d010      	beq.n	8008772 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008752:	3324      	adds	r3, #36	; 0x24
 8008754:	4618      	mov	r0, r3
 8008756:	f001 f8df 	bl	8009918 <xTaskRemoveFromEventList>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d013      	beq.n	8008788 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008760:	4b3f      	ldr	r3, [pc, #252]	; (8008860 <xQueueGenericSend+0x1f8>)
 8008762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	e00a      	b.n	8008788 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008774:	2b00      	cmp	r3, #0
 8008776:	d007      	beq.n	8008788 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008778:	4b39      	ldr	r3, [pc, #228]	; (8008860 <xQueueGenericSend+0x1f8>)
 800877a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008788:	f002 f934 	bl	800a9f4 <vPortExitCritical>
				return pdPASS;
 800878c:	2301      	movs	r3, #1
 800878e:	e063      	b.n	8008858 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d103      	bne.n	800879e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008796:	f002 f92d 	bl	800a9f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800879a:	2300      	movs	r3, #0
 800879c:	e05c      	b.n	8008858 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800879e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d106      	bne.n	80087b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087a4:	f107 0314 	add.w	r3, r7, #20
 80087a8:	4618      	mov	r0, r3
 80087aa:	f001 f917 	bl	80099dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087ae:	2301      	movs	r3, #1
 80087b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087b2:	f002 f91f 	bl	800a9f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087b6:	f000 fe91 	bl	80094dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087ba:	f002 f8eb 	bl	800a994 <vPortEnterCritical>
 80087be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087c4:	b25b      	sxtb	r3, r3
 80087c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ca:	d103      	bne.n	80087d4 <xQueueGenericSend+0x16c>
 80087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087da:	b25b      	sxtb	r3, r3
 80087dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e0:	d103      	bne.n	80087ea <xQueueGenericSend+0x182>
 80087e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087ea:	f002 f903 	bl	800a9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087ee:	1d3a      	adds	r2, r7, #4
 80087f0:	f107 0314 	add.w	r3, r7, #20
 80087f4:	4611      	mov	r1, r2
 80087f6:	4618      	mov	r0, r3
 80087f8:	f001 f906 	bl	8009a08 <xTaskCheckForTimeOut>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d124      	bne.n	800884c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008804:	f000 fbc6 	bl	8008f94 <prvIsQueueFull>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d018      	beq.n	8008840 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	3310      	adds	r3, #16
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	4611      	mov	r1, r2
 8008816:	4618      	mov	r0, r3
 8008818:	f001 f82e 	bl	8009878 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800881c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800881e:	f000 fb51 	bl	8008ec4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008822:	f000 fe69 	bl	80094f8 <xTaskResumeAll>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	f47f af7c 	bne.w	8008726 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800882e:	4b0c      	ldr	r3, [pc, #48]	; (8008860 <xQueueGenericSend+0x1f8>)
 8008830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	e772      	b.n	8008726 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008842:	f000 fb3f 	bl	8008ec4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008846:	f000 fe57 	bl	80094f8 <xTaskResumeAll>
 800884a:	e76c      	b.n	8008726 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800884c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800884e:	f000 fb39 	bl	8008ec4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008852:	f000 fe51 	bl	80094f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008856:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008858:	4618      	mov	r0, r3
 800885a:	3738      	adds	r7, #56	; 0x38
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	e000ed04 	.word	0xe000ed04

08008864 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b090      	sub	sp, #64	; 0x40
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
 8008870:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10a      	bne.n	8008892 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800888e:	bf00      	nop
 8008890:	e7fe      	b.n	8008890 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d103      	bne.n	80088a0 <xQueueGenericSendFromISR+0x3c>
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <xQueueGenericSendFromISR+0x40>
 80088a0:	2301      	movs	r3, #1
 80088a2:	e000      	b.n	80088a6 <xQueueGenericSendFromISR+0x42>
 80088a4:	2300      	movs	r3, #0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10a      	bne.n	80088c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80088bc:	bf00      	nop
 80088be:	e7fe      	b.n	80088be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d103      	bne.n	80088ce <xQueueGenericSendFromISR+0x6a>
 80088c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d101      	bne.n	80088d2 <xQueueGenericSendFromISR+0x6e>
 80088ce:	2301      	movs	r3, #1
 80088d0:	e000      	b.n	80088d4 <xQueueGenericSendFromISR+0x70>
 80088d2:	2300      	movs	r3, #0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10a      	bne.n	80088ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80088d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088dc:	f383 8811 	msr	BASEPRI, r3
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	623b      	str	r3, [r7, #32]
}
 80088ea:	bf00      	nop
 80088ec:	e7fe      	b.n	80088ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088ee:	f002 f933 	bl	800ab58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80088f2:	f3ef 8211 	mrs	r2, BASEPRI
 80088f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	61fa      	str	r2, [r7, #28]
 8008908:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800890a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800890c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800890e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008916:	429a      	cmp	r2, r3
 8008918:	d302      	bcc.n	8008920 <xQueueGenericSendFromISR+0xbc>
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2b02      	cmp	r3, #2
 800891e:	d12f      	bne.n	8008980 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	68b9      	ldr	r1, [r7, #8]
 8008934:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008936:	f000 fa35 	bl	8008da4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800893a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800893e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008942:	d112      	bne.n	800896a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	2b00      	cmp	r3, #0
 800894a:	d016      	beq.n	800897a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800894c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894e:	3324      	adds	r3, #36	; 0x24
 8008950:	4618      	mov	r0, r3
 8008952:	f000 ffe1 	bl	8009918 <xTaskRemoveFromEventList>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00e      	beq.n	800897a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00b      	beq.n	800897a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	e007      	b.n	800897a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800896a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800896e:	3301      	adds	r3, #1
 8008970:	b2db      	uxtb	r3, r3
 8008972:	b25a      	sxtb	r2, r3
 8008974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800897a:	2301      	movs	r3, #1
 800897c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800897e:	e001      	b.n	8008984 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008980:	2300      	movs	r3, #0
 8008982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008986:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800898e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008992:	4618      	mov	r0, r3
 8008994:	3740      	adds	r7, #64	; 0x40
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
	...

0800899c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b08c      	sub	sp, #48	; 0x30
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80089a8:	2300      	movs	r3, #0
 80089aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80089b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10a      	bne.n	80089cc <xQueueReceive+0x30>
	__asm volatile
 80089b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	623b      	str	r3, [r7, #32]
}
 80089c8:	bf00      	nop
 80089ca:	e7fe      	b.n	80089ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d103      	bne.n	80089da <xQueueReceive+0x3e>
 80089d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <xQueueReceive+0x42>
 80089da:	2301      	movs	r3, #1
 80089dc:	e000      	b.n	80089e0 <xQueueReceive+0x44>
 80089de:	2300      	movs	r3, #0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10a      	bne.n	80089fa <xQueueReceive+0x5e>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	61fb      	str	r3, [r7, #28]
}
 80089f6:	bf00      	nop
 80089f8:	e7fe      	b.n	80089f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089fa:	f001 f949 	bl	8009c90 <xTaskGetSchedulerState>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d102      	bne.n	8008a0a <xQueueReceive+0x6e>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <xQueueReceive+0x72>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <xQueueReceive+0x74>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10a      	bne.n	8008a2a <xQueueReceive+0x8e>
	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a18:	f383 8811 	msr	BASEPRI, r3
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	61bb      	str	r3, [r7, #24]
}
 8008a26:	bf00      	nop
 8008a28:	e7fe      	b.n	8008a28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a2a:	f001 ffb3 	bl	800a994 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d01f      	beq.n	8008a7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a3a:	68b9      	ldr	r1, [r7, #8]
 8008a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a3e:	f000 fa1b 	bl	8008e78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a44:	1e5a      	subs	r2, r3, #1
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00f      	beq.n	8008a72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a54:	3310      	adds	r3, #16
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 ff5e 	bl	8009918 <xTaskRemoveFromEventList>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d007      	beq.n	8008a72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a62:	4b3d      	ldr	r3, [pc, #244]	; (8008b58 <xQueueReceive+0x1bc>)
 8008a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a72:	f001 ffbf 	bl	800a9f4 <vPortExitCritical>
				return pdPASS;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e069      	b.n	8008b4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d103      	bne.n	8008a88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a80:	f001 ffb8 	bl	800a9f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a84:	2300      	movs	r3, #0
 8008a86:	e062      	b.n	8008b4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d106      	bne.n	8008a9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a8e:	f107 0310 	add.w	r3, r7, #16
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 ffa2 	bl	80099dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a9c:	f001 ffaa 	bl	800a9f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008aa0:	f000 fd1c 	bl	80094dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008aa4:	f001 ff76 	bl	800a994 <vPortEnterCritical>
 8008aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008aae:	b25b      	sxtb	r3, r3
 8008ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab4:	d103      	bne.n	8008abe <xQueueReceive+0x122>
 8008ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ac4:	b25b      	sxtb	r3, r3
 8008ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aca:	d103      	bne.n	8008ad4 <xQueueReceive+0x138>
 8008acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ad4:	f001 ff8e 	bl	800a9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ad8:	1d3a      	adds	r2, r7, #4
 8008ada:	f107 0310 	add.w	r3, r7, #16
 8008ade:	4611      	mov	r1, r2
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f000 ff91 	bl	8009a08 <xTaskCheckForTimeOut>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d123      	bne.n	8008b34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aee:	f000 fa3b 	bl	8008f68 <prvIsQueueEmpty>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d017      	beq.n	8008b28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	3324      	adds	r3, #36	; 0x24
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	4611      	mov	r1, r2
 8008b00:	4618      	mov	r0, r3
 8008b02:	f000 feb9 	bl	8009878 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b08:	f000 f9dc 	bl	8008ec4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b0c:	f000 fcf4 	bl	80094f8 <xTaskResumeAll>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d189      	bne.n	8008a2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008b16:	4b10      	ldr	r3, [pc, #64]	; (8008b58 <xQueueReceive+0x1bc>)
 8008b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b1c:	601a      	str	r2, [r3, #0]
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	e780      	b.n	8008a2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b2a:	f000 f9cb 	bl	8008ec4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b2e:	f000 fce3 	bl	80094f8 <xTaskResumeAll>
 8008b32:	e77a      	b.n	8008a2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b36:	f000 f9c5 	bl	8008ec4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b3a:	f000 fcdd 	bl	80094f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b40:	f000 fa12 	bl	8008f68 <prvIsQueueEmpty>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f43f af6f 	beq.w	8008a2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3730      	adds	r7, #48	; 0x30
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	e000ed04 	.word	0xe000ed04

08008b5c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08e      	sub	sp, #56	; 0x38
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b66:	2300      	movs	r3, #0
 8008b68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	623b      	str	r3, [r7, #32]
}
 8008b8a:	bf00      	nop
 8008b8c:	e7fe      	b.n	8008b8c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00a      	beq.n	8008bac <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	61fb      	str	r3, [r7, #28]
}
 8008ba8:	bf00      	nop
 8008baa:	e7fe      	b.n	8008baa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bac:	f001 f870 	bl	8009c90 <xTaskGetSchedulerState>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d102      	bne.n	8008bbc <xQueueSemaphoreTake+0x60>
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <xQueueSemaphoreTake+0x64>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e000      	b.n	8008bc2 <xQueueSemaphoreTake+0x66>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10a      	bne.n	8008bdc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	61bb      	str	r3, [r7, #24]
}
 8008bd8:	bf00      	nop
 8008bda:	e7fe      	b.n	8008bda <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bdc:	f001 feda 	bl	800a994 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d024      	beq.n	8008c36 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bee:	1e5a      	subs	r2, r3, #1
 8008bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d104      	bne.n	8008c06 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008bfc:	f001 f9f0 	bl	8009fe0 <pvTaskIncrementMutexHeldCount>
 8008c00:	4602      	mov	r2, r0
 8008c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c04:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00f      	beq.n	8008c2e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c10:	3310      	adds	r3, #16
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 fe80 	bl	8009918 <xTaskRemoveFromEventList>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d007      	beq.n	8008c2e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c1e:	4b54      	ldr	r3, [pc, #336]	; (8008d70 <xQueueSemaphoreTake+0x214>)
 8008c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c2e:	f001 fee1 	bl	800a9f4 <vPortExitCritical>
				return pdPASS;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e097      	b.n	8008d66 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d111      	bne.n	8008c60 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00a      	beq.n	8008c58 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	617b      	str	r3, [r7, #20]
}
 8008c54:	bf00      	nop
 8008c56:	e7fe      	b.n	8008c56 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008c58:	f001 fecc 	bl	800a9f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	e082      	b.n	8008d66 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d106      	bne.n	8008c74 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c66:	f107 030c 	add.w	r3, r7, #12
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 feb6 	bl	80099dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c70:	2301      	movs	r3, #1
 8008c72:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c74:	f001 febe 	bl	800a9f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c78:	f000 fc30 	bl	80094dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c7c:	f001 fe8a 	bl	800a994 <vPortEnterCritical>
 8008c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c86:	b25b      	sxtb	r3, r3
 8008c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8c:	d103      	bne.n	8008c96 <xQueueSemaphoreTake+0x13a>
 8008c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c9c:	b25b      	sxtb	r3, r3
 8008c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca2:	d103      	bne.n	8008cac <xQueueSemaphoreTake+0x150>
 8008ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cac:	f001 fea2 	bl	800a9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cb0:	463a      	mov	r2, r7
 8008cb2:	f107 030c 	add.w	r3, r7, #12
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 fea5 	bl	8009a08 <xTaskCheckForTimeOut>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d132      	bne.n	8008d2a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cc6:	f000 f94f 	bl	8008f68 <prvIsQueueEmpty>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d026      	beq.n	8008d1e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d109      	bne.n	8008cec <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008cd8:	f001 fe5c 	bl	800a994 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 fff3 	bl	8009ccc <xTaskPriorityInherit>
 8008ce6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008ce8:	f001 fe84 	bl	800a9f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cee:	3324      	adds	r3, #36	; 0x24
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 fdbf 	bl	8009878 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008cfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cfc:	f000 f8e2 	bl	8008ec4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d00:	f000 fbfa 	bl	80094f8 <xTaskResumeAll>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f47f af68 	bne.w	8008bdc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008d0c:	4b18      	ldr	r3, [pc, #96]	; (8008d70 <xQueueSemaphoreTake+0x214>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	e75e      	b.n	8008bdc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008d1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d20:	f000 f8d0 	bl	8008ec4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d24:	f000 fbe8 	bl	80094f8 <xTaskResumeAll>
 8008d28:	e758      	b.n	8008bdc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008d2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d2c:	f000 f8ca 	bl	8008ec4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d30:	f000 fbe2 	bl	80094f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d36:	f000 f917 	bl	8008f68 <prvIsQueueEmpty>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f43f af4d 	beq.w	8008bdc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00d      	beq.n	8008d64 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008d48:	f001 fe24 	bl	800a994 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008d4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d4e:	f000 f811 	bl	8008d74 <prvGetDisinheritPriorityAfterTimeout>
 8008d52:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f001 f8b2 	bl	8009ec4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008d60:	f001 fe48 	bl	800a9f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3738      	adds	r7, #56	; 0x38
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	e000ed04 	.word	0xe000ed04

08008d74 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d006      	beq.n	8008d92 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f1c3 0307 	rsb	r3, r3, #7
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	e001      	b.n	8008d96 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008d96:	68fb      	ldr	r3, [r7, #12]
	}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008db0:	2300      	movs	r3, #0
 8008db2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10d      	bne.n	8008dde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d14d      	bne.n	8008e66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 fff2 	bl	8009db8 <xTaskPriorityDisinherit>
 8008dd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	609a      	str	r2, [r3, #8]
 8008ddc:	e043      	b.n	8008e66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d119      	bne.n	8008e18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6858      	ldr	r0, [r3, #4]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dec:	461a      	mov	r2, r3
 8008dee:	68b9      	ldr	r1, [r7, #8]
 8008df0:	f002 fec7 	bl	800bb82 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	685a      	ldr	r2, [r3, #4]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfc:	441a      	add	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d32b      	bcc.n	8008e66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	605a      	str	r2, [r3, #4]
 8008e16:	e026      	b.n	8008e66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	68d8      	ldr	r0, [r3, #12]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e20:	461a      	mov	r2, r3
 8008e22:	68b9      	ldr	r1, [r7, #8]
 8008e24:	f002 fead 	bl	800bb82 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	68da      	ldr	r2, [r3, #12]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e30:	425b      	negs	r3, r3
 8008e32:	441a      	add	r2, r3
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	68da      	ldr	r2, [r3, #12]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d207      	bcs.n	8008e54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4c:	425b      	negs	r3, r3
 8008e4e:	441a      	add	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d105      	bne.n	8008e66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	1c5a      	adds	r2, r3, #1
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008e6e:	697b      	ldr	r3, [r7, #20]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3718      	adds	r7, #24
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d018      	beq.n	8008ebc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e92:	441a      	add	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68da      	ldr	r2, [r3, #12]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d303      	bcc.n	8008eac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	68d9      	ldr	r1, [r3, #12]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	6838      	ldr	r0, [r7, #0]
 8008eb8:	f002 fe63 	bl	800bb82 <memcpy>
	}
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ecc:	f001 fd62 	bl	800a994 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ed6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ed8:	e011      	b.n	8008efe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d012      	beq.n	8008f08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	3324      	adds	r3, #36	; 0x24
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 fd16 	bl	8009918 <xTaskRemoveFromEventList>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ef2:	f000 fdeb 	bl	8009acc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	dce9      	bgt.n	8008eda <prvUnlockQueue+0x16>
 8008f06:	e000      	b.n	8008f0a <prvUnlockQueue+0x46>
					break;
 8008f08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	22ff      	movs	r2, #255	; 0xff
 8008f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008f12:	f001 fd6f 	bl	800a9f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f16:	f001 fd3d 	bl	800a994 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f22:	e011      	b.n	8008f48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d012      	beq.n	8008f52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	3310      	adds	r3, #16
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 fcf1 	bl	8009918 <xTaskRemoveFromEventList>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008f3c:	f000 fdc6 	bl	8009acc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008f40:	7bbb      	ldrb	r3, [r7, #14]
 8008f42:	3b01      	subs	r3, #1
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	dce9      	bgt.n	8008f24 <prvUnlockQueue+0x60>
 8008f50:	e000      	b.n	8008f54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	22ff      	movs	r2, #255	; 0xff
 8008f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008f5c:	f001 fd4a 	bl	800a9f4 <vPortExitCritical>
}
 8008f60:	bf00      	nop
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f70:	f001 fd10 	bl	800a994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d102      	bne.n	8008f82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	60fb      	str	r3, [r7, #12]
 8008f80:	e001      	b.n	8008f86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f82:	2300      	movs	r3, #0
 8008f84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f86:	f001 fd35 	bl	800a9f4 <vPortExitCritical>

	return xReturn;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f9c:	f001 fcfa 	bl	800a994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d102      	bne.n	8008fb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008fac:	2301      	movs	r3, #1
 8008fae:	60fb      	str	r3, [r7, #12]
 8008fb0:	e001      	b.n	8008fb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fb6:	f001 fd1d 	bl	800a9f4 <vPortExitCritical>

	return xReturn;
 8008fba:	68fb      	ldr	r3, [r7, #12]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fce:	2300      	movs	r3, #0
 8008fd0:	60fb      	str	r3, [r7, #12]
 8008fd2:	e014      	b.n	8008ffe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008fd4:	4a0f      	ldr	r2, [pc, #60]	; (8009014 <vQueueAddToRegistry+0x50>)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10b      	bne.n	8008ff8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008fe0:	490c      	ldr	r1, [pc, #48]	; (8009014 <vQueueAddToRegistry+0x50>)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008fea:	4a0a      	ldr	r2, [pc, #40]	; (8009014 <vQueueAddToRegistry+0x50>)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	4413      	add	r3, r2
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ff6:	e006      	b.n	8009006 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	60fb      	str	r3, [r7, #12]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b07      	cmp	r3, #7
 8009002:	d9e7      	bls.n	8008fd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009004:	bf00      	nop
 8009006:	bf00      	nop
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	20000c64 	.word	0x20000c64

08009018 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009018:	b580      	push	{r7, lr}
 800901a:	b086      	sub	sp, #24
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009028:	f001 fcb4 	bl	800a994 <vPortEnterCritical>
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009032:	b25b      	sxtb	r3, r3
 8009034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009038:	d103      	bne.n	8009042 <vQueueWaitForMessageRestricted+0x2a>
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009048:	b25b      	sxtb	r3, r3
 800904a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904e:	d103      	bne.n	8009058 <vQueueWaitForMessageRestricted+0x40>
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009058:	f001 fccc 	bl	800a9f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009060:	2b00      	cmp	r3, #0
 8009062:	d106      	bne.n	8009072 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	3324      	adds	r3, #36	; 0x24
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	68b9      	ldr	r1, [r7, #8]
 800906c:	4618      	mov	r0, r3
 800906e:	f000 fc27 	bl	80098c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009072:	6978      	ldr	r0, [r7, #20]
 8009074:	f7ff ff26 	bl	8008ec4 <prvUnlockQueue>
	}
 8009078:	bf00      	nop
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009080:	b580      	push	{r7, lr}
 8009082:	b08e      	sub	sp, #56	; 0x38
 8009084:	af04      	add	r7, sp, #16
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800908e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10a      	bne.n	80090aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8009094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009098:	f383 8811 	msr	BASEPRI, r3
 800909c:	f3bf 8f6f 	isb	sy
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	623b      	str	r3, [r7, #32]
}
 80090a6:	bf00      	nop
 80090a8:	e7fe      	b.n	80090a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80090aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10a      	bne.n	80090c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	61fb      	str	r3, [r7, #28]
}
 80090c2:	bf00      	nop
 80090c4:	e7fe      	b.n	80090c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80090c6:	2354      	movs	r3, #84	; 0x54
 80090c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b54      	cmp	r3, #84	; 0x54
 80090ce:	d00a      	beq.n	80090e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	61bb      	str	r3, [r7, #24]
}
 80090e2:	bf00      	nop
 80090e4:	e7fe      	b.n	80090e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80090e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80090e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d01e      	beq.n	800912c <xTaskCreateStatic+0xac>
 80090ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d01b      	beq.n	800912c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	2202      	movs	r2, #2
 8009102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009106:	2300      	movs	r3, #0
 8009108:	9303      	str	r3, [sp, #12]
 800910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910c:	9302      	str	r3, [sp, #8]
 800910e:	f107 0314 	add.w	r3, r7, #20
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	68b9      	ldr	r1, [r7, #8]
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f000 f850 	bl	80091c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009126:	f000 f8d5 	bl	80092d4 <prvAddNewTaskToReadyList>
 800912a:	e001      	b.n	8009130 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800912c:	2300      	movs	r3, #0
 800912e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009130:	697b      	ldr	r3, [r7, #20]
	}
 8009132:	4618      	mov	r0, r3
 8009134:	3728      	adds	r7, #40	; 0x28
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800913a:	b580      	push	{r7, lr}
 800913c:	b08c      	sub	sp, #48	; 0x30
 800913e:	af04      	add	r7, sp, #16
 8009140:	60f8      	str	r0, [r7, #12]
 8009142:	60b9      	str	r1, [r7, #8]
 8009144:	603b      	str	r3, [r7, #0]
 8009146:	4613      	mov	r3, r2
 8009148:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800914a:	88fb      	ldrh	r3, [r7, #6]
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4618      	mov	r0, r3
 8009150:	f001 fd42 	bl	800abd8 <pvPortMalloc>
 8009154:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00e      	beq.n	800917a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800915c:	2054      	movs	r0, #84	; 0x54
 800915e:	f001 fd3b 	bl	800abd8 <pvPortMalloc>
 8009162:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d003      	beq.n	8009172 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	631a      	str	r2, [r3, #48]	; 0x30
 8009170:	e005      	b.n	800917e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009172:	6978      	ldr	r0, [r7, #20]
 8009174:	f001 fdfc 	bl	800ad70 <vPortFree>
 8009178:	e001      	b.n	800917e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800917a:	2300      	movs	r3, #0
 800917c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d017      	beq.n	80091b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800918c:	88fa      	ldrh	r2, [r7, #6]
 800918e:	2300      	movs	r3, #0
 8009190:	9303      	str	r3, [sp, #12]
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	9302      	str	r3, [sp, #8]
 8009196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009198:	9301      	str	r3, [sp, #4]
 800919a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	68b9      	ldr	r1, [r7, #8]
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f000 f80e 	bl	80091c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091a8:	69f8      	ldr	r0, [r7, #28]
 80091aa:	f000 f893 	bl	80092d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80091ae:	2301      	movs	r3, #1
 80091b0:	61bb      	str	r3, [r7, #24]
 80091b2:	e002      	b.n	80091ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80091b4:	f04f 33ff 	mov.w	r3, #4294967295
 80091b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80091ba:	69bb      	ldr	r3, [r7, #24]
	}
 80091bc:	4618      	mov	r0, r3
 80091be:	3720      	adds	r7, #32
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b088      	sub	sp, #32
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
 80091d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80091d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80091dc:	3b01      	subs	r3, #1
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	f023 0307 	bic.w	r3, r3, #7
 80091ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	f003 0307 	and.w	r3, r3, #7
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00a      	beq.n	800920c <prvInitialiseNewTask+0x48>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	617b      	str	r3, [r7, #20]
}
 8009208:	bf00      	nop
 800920a:	e7fe      	b.n	800920a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d01f      	beq.n	8009252 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009212:	2300      	movs	r3, #0
 8009214:	61fb      	str	r3, [r7, #28]
 8009216:	e012      	b.n	800923e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	4413      	add	r3, r2
 800921e:	7819      	ldrb	r1, [r3, #0]
 8009220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	4413      	add	r3, r2
 8009226:	3334      	adds	r3, #52	; 0x34
 8009228:	460a      	mov	r2, r1
 800922a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	4413      	add	r3, r2
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d006      	beq.n	8009246 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	3301      	adds	r3, #1
 800923c:	61fb      	str	r3, [r7, #28]
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	2b0f      	cmp	r3, #15
 8009242:	d9e9      	bls.n	8009218 <prvInitialiseNewTask+0x54>
 8009244:	e000      	b.n	8009248 <prvInitialiseNewTask+0x84>
			{
				break;
 8009246:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924a:	2200      	movs	r2, #0
 800924c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009250:	e003      	b.n	800925a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009254:	2200      	movs	r2, #0
 8009256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	2b06      	cmp	r3, #6
 800925e:	d901      	bls.n	8009264 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009260:	2306      	movs	r3, #6
 8009262:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009268:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800926a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800926e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009272:	2200      	movs	r2, #0
 8009274:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009278:	3304      	adds	r3, #4
 800927a:	4618      	mov	r0, r3
 800927c:	f7ff f825 	bl	80082ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009282:	3318      	adds	r3, #24
 8009284:	4618      	mov	r0, r3
 8009286:	f7ff f820 	bl	80082ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800928a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800928e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009292:	f1c3 0207 	rsb	r2, r3, #7
 8009296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009298:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800929a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800929e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80092a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a2:	2200      	movs	r2, #0
 80092a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80092a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	68f9      	ldr	r1, [r7, #12]
 80092b2:	69b8      	ldr	r0, [r7, #24]
 80092b4:	f001 fa40 	bl	800a738 <pxPortInitialiseStack>
 80092b8:	4602      	mov	r2, r0
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d002      	beq.n	80092ca <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80092c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092ca:	bf00      	nop
 80092cc:	3720      	adds	r7, #32
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
	...

080092d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80092dc:	f001 fb5a 	bl	800a994 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80092e0:	4b2a      	ldr	r3, [pc, #168]	; (800938c <prvAddNewTaskToReadyList+0xb8>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3301      	adds	r3, #1
 80092e6:	4a29      	ldr	r2, [pc, #164]	; (800938c <prvAddNewTaskToReadyList+0xb8>)
 80092e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80092ea:	4b29      	ldr	r3, [pc, #164]	; (8009390 <prvAddNewTaskToReadyList+0xbc>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d109      	bne.n	8009306 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80092f2:	4a27      	ldr	r2, [pc, #156]	; (8009390 <prvAddNewTaskToReadyList+0xbc>)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80092f8:	4b24      	ldr	r3, [pc, #144]	; (800938c <prvAddNewTaskToReadyList+0xb8>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d110      	bne.n	8009322 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009300:	f000 fc08 	bl	8009b14 <prvInitialiseTaskLists>
 8009304:	e00d      	b.n	8009322 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009306:	4b23      	ldr	r3, [pc, #140]	; (8009394 <prvAddNewTaskToReadyList+0xc0>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d109      	bne.n	8009322 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800930e:	4b20      	ldr	r3, [pc, #128]	; (8009390 <prvAddNewTaskToReadyList+0xbc>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009318:	429a      	cmp	r2, r3
 800931a:	d802      	bhi.n	8009322 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800931c:	4a1c      	ldr	r2, [pc, #112]	; (8009390 <prvAddNewTaskToReadyList+0xbc>)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009322:	4b1d      	ldr	r3, [pc, #116]	; (8009398 <prvAddNewTaskToReadyList+0xc4>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3301      	adds	r3, #1
 8009328:	4a1b      	ldr	r2, [pc, #108]	; (8009398 <prvAddNewTaskToReadyList+0xc4>)
 800932a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009330:	2201      	movs	r2, #1
 8009332:	409a      	lsls	r2, r3
 8009334:	4b19      	ldr	r3, [pc, #100]	; (800939c <prvAddNewTaskToReadyList+0xc8>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4313      	orrs	r3, r2
 800933a:	4a18      	ldr	r2, [pc, #96]	; (800939c <prvAddNewTaskToReadyList+0xc8>)
 800933c:	6013      	str	r3, [r2, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009342:	4613      	mov	r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4413      	add	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4a15      	ldr	r2, [pc, #84]	; (80093a0 <prvAddNewTaskToReadyList+0xcc>)
 800934c:	441a      	add	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	3304      	adds	r3, #4
 8009352:	4619      	mov	r1, r3
 8009354:	4610      	mov	r0, r2
 8009356:	f7fe ffc5 	bl	80082e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800935a:	f001 fb4b 	bl	800a9f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800935e:	4b0d      	ldr	r3, [pc, #52]	; (8009394 <prvAddNewTaskToReadyList+0xc0>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00e      	beq.n	8009384 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009366:	4b0a      	ldr	r3, [pc, #40]	; (8009390 <prvAddNewTaskToReadyList+0xbc>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009370:	429a      	cmp	r2, r3
 8009372:	d207      	bcs.n	8009384 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009374:	4b0b      	ldr	r3, [pc, #44]	; (80093a4 <prvAddNewTaskToReadyList+0xd0>)
 8009376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009384:	bf00      	nop
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	20000da4 	.word	0x20000da4
 8009390:	20000ca4 	.word	0x20000ca4
 8009394:	20000db0 	.word	0x20000db0
 8009398:	20000dc0 	.word	0x20000dc0
 800939c:	20000dac 	.word	0x20000dac
 80093a0:	20000ca8 	.word	0x20000ca8
 80093a4:	e000ed04 	.word	0xe000ed04

080093a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80093b0:	2300      	movs	r3, #0
 80093b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d017      	beq.n	80093ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80093ba:	4b13      	ldr	r3, [pc, #76]	; (8009408 <vTaskDelay+0x60>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00a      	beq.n	80093d8 <vTaskDelay+0x30>
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	60bb      	str	r3, [r7, #8]
}
 80093d4:	bf00      	nop
 80093d6:	e7fe      	b.n	80093d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80093d8:	f000 f880 	bl	80094dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80093dc:	2100      	movs	r1, #0
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fe12 	bl	800a008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80093e4:	f000 f888 	bl	80094f8 <xTaskResumeAll>
 80093e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d107      	bne.n	8009400 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80093f0:	4b06      	ldr	r3, [pc, #24]	; (800940c <vTaskDelay+0x64>)
 80093f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009400:	bf00      	nop
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	20000dcc 	.word	0x20000dcc
 800940c:	e000ed04 	.word	0xe000ed04

08009410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b08a      	sub	sp, #40	; 0x28
 8009414:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009416:	2300      	movs	r3, #0
 8009418:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800941a:	2300      	movs	r3, #0
 800941c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800941e:	463a      	mov	r2, r7
 8009420:	1d39      	adds	r1, r7, #4
 8009422:	f107 0308 	add.w	r3, r7, #8
 8009426:	4618      	mov	r0, r3
 8009428:	f7f7 ff4c 	bl	80012c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	9202      	str	r2, [sp, #8]
 8009434:	9301      	str	r3, [sp, #4]
 8009436:	2300      	movs	r3, #0
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	2300      	movs	r3, #0
 800943c:	460a      	mov	r2, r1
 800943e:	4921      	ldr	r1, [pc, #132]	; (80094c4 <vTaskStartScheduler+0xb4>)
 8009440:	4821      	ldr	r0, [pc, #132]	; (80094c8 <vTaskStartScheduler+0xb8>)
 8009442:	f7ff fe1d 	bl	8009080 <xTaskCreateStatic>
 8009446:	4603      	mov	r3, r0
 8009448:	4a20      	ldr	r2, [pc, #128]	; (80094cc <vTaskStartScheduler+0xbc>)
 800944a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800944c:	4b1f      	ldr	r3, [pc, #124]	; (80094cc <vTaskStartScheduler+0xbc>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009454:	2301      	movs	r3, #1
 8009456:	617b      	str	r3, [r7, #20]
 8009458:	e001      	b.n	800945e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800945a:	2300      	movs	r3, #0
 800945c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d102      	bne.n	800946a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009464:	f000 fe36 	bl	800a0d4 <xTimerCreateTimerTask>
 8009468:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d116      	bne.n	800949e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	613b      	str	r3, [r7, #16]
}
 8009482:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009484:	4b12      	ldr	r3, [pc, #72]	; (80094d0 <vTaskStartScheduler+0xc0>)
 8009486:	f04f 32ff 	mov.w	r2, #4294967295
 800948a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800948c:	4b11      	ldr	r3, [pc, #68]	; (80094d4 <vTaskStartScheduler+0xc4>)
 800948e:	2201      	movs	r2, #1
 8009490:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009492:	4b11      	ldr	r3, [pc, #68]	; (80094d8 <vTaskStartScheduler+0xc8>)
 8009494:	2200      	movs	r2, #0
 8009496:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009498:	f001 f9da 	bl	800a850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800949c:	e00e      	b.n	80094bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a4:	d10a      	bne.n	80094bc <vTaskStartScheduler+0xac>
	__asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	60fb      	str	r3, [r7, #12]
}
 80094b8:	bf00      	nop
 80094ba:	e7fe      	b.n	80094ba <vTaskStartScheduler+0xaa>
}
 80094bc:	bf00      	nop
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	0800d988 	.word	0x0800d988
 80094c8:	08009ae5 	.word	0x08009ae5
 80094cc:	20000dc8 	.word	0x20000dc8
 80094d0:	20000dc4 	.word	0x20000dc4
 80094d4:	20000db0 	.word	0x20000db0
 80094d8:	20000da8 	.word	0x20000da8

080094dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80094dc:	b480      	push	{r7}
 80094de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80094e0:	4b04      	ldr	r3, [pc, #16]	; (80094f4 <vTaskSuspendAll+0x18>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	3301      	adds	r3, #1
 80094e6:	4a03      	ldr	r2, [pc, #12]	; (80094f4 <vTaskSuspendAll+0x18>)
 80094e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80094ea:	bf00      	nop
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr
 80094f4:	20000dcc 	.word	0x20000dcc

080094f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80094fe:	2300      	movs	r3, #0
 8009500:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009502:	2300      	movs	r3, #0
 8009504:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009506:	4b41      	ldr	r3, [pc, #260]	; (800960c <xTaskResumeAll+0x114>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10a      	bne.n	8009524 <xTaskResumeAll+0x2c>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	603b      	str	r3, [r7, #0]
}
 8009520:	bf00      	nop
 8009522:	e7fe      	b.n	8009522 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009524:	f001 fa36 	bl	800a994 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009528:	4b38      	ldr	r3, [pc, #224]	; (800960c <xTaskResumeAll+0x114>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3b01      	subs	r3, #1
 800952e:	4a37      	ldr	r2, [pc, #220]	; (800960c <xTaskResumeAll+0x114>)
 8009530:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009532:	4b36      	ldr	r3, [pc, #216]	; (800960c <xTaskResumeAll+0x114>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d161      	bne.n	80095fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800953a:	4b35      	ldr	r3, [pc, #212]	; (8009610 <xTaskResumeAll+0x118>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d05d      	beq.n	80095fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009542:	e02e      	b.n	80095a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009544:	4b33      	ldr	r3, [pc, #204]	; (8009614 <xTaskResumeAll+0x11c>)
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	3318      	adds	r3, #24
 8009550:	4618      	mov	r0, r3
 8009552:	f7fe ff24 	bl	800839e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	3304      	adds	r3, #4
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe ff1f 	bl	800839e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009564:	2201      	movs	r2, #1
 8009566:	409a      	lsls	r2, r3
 8009568:	4b2b      	ldr	r3, [pc, #172]	; (8009618 <xTaskResumeAll+0x120>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4313      	orrs	r3, r2
 800956e:	4a2a      	ldr	r2, [pc, #168]	; (8009618 <xTaskResumeAll+0x120>)
 8009570:	6013      	str	r3, [r2, #0]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009576:	4613      	mov	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4a27      	ldr	r2, [pc, #156]	; (800961c <xTaskResumeAll+0x124>)
 8009580:	441a      	add	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3304      	adds	r3, #4
 8009586:	4619      	mov	r1, r3
 8009588:	4610      	mov	r0, r2
 800958a:	f7fe feab 	bl	80082e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009592:	4b23      	ldr	r3, [pc, #140]	; (8009620 <xTaskResumeAll+0x128>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009598:	429a      	cmp	r2, r3
 800959a:	d302      	bcc.n	80095a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800959c:	4b21      	ldr	r3, [pc, #132]	; (8009624 <xTaskResumeAll+0x12c>)
 800959e:	2201      	movs	r2, #1
 80095a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095a2:	4b1c      	ldr	r3, [pc, #112]	; (8009614 <xTaskResumeAll+0x11c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1cc      	bne.n	8009544 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80095b0:	f000 fb4e 	bl	8009c50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80095b4:	4b1c      	ldr	r3, [pc, #112]	; (8009628 <xTaskResumeAll+0x130>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d010      	beq.n	80095e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80095c0:	f000 f846 	bl	8009650 <xTaskIncrementTick>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d002      	beq.n	80095d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80095ca:	4b16      	ldr	r3, [pc, #88]	; (8009624 <xTaskResumeAll+0x12c>)
 80095cc:	2201      	movs	r2, #1
 80095ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	3b01      	subs	r3, #1
 80095d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1f1      	bne.n	80095c0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80095dc:	4b12      	ldr	r3, [pc, #72]	; (8009628 <xTaskResumeAll+0x130>)
 80095de:	2200      	movs	r2, #0
 80095e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80095e2:	4b10      	ldr	r3, [pc, #64]	; (8009624 <xTaskResumeAll+0x12c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d009      	beq.n	80095fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80095ea:	2301      	movs	r3, #1
 80095ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80095ee:	4b0f      	ldr	r3, [pc, #60]	; (800962c <xTaskResumeAll+0x134>)
 80095f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095f4:	601a      	str	r2, [r3, #0]
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095fe:	f001 f9f9 	bl	800a9f4 <vPortExitCritical>

	return xAlreadyYielded;
 8009602:	68bb      	ldr	r3, [r7, #8]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	20000dcc 	.word	0x20000dcc
 8009610:	20000da4 	.word	0x20000da4
 8009614:	20000d64 	.word	0x20000d64
 8009618:	20000dac 	.word	0x20000dac
 800961c:	20000ca8 	.word	0x20000ca8
 8009620:	20000ca4 	.word	0x20000ca4
 8009624:	20000db8 	.word	0x20000db8
 8009628:	20000db4 	.word	0x20000db4
 800962c:	e000ed04 	.word	0xe000ed04

08009630 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009636:	4b05      	ldr	r3, [pc, #20]	; (800964c <xTaskGetTickCount+0x1c>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800963c:	687b      	ldr	r3, [r7, #4]
}
 800963e:	4618      	mov	r0, r3
 8009640:	370c      	adds	r7, #12
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	20000da8 	.word	0x20000da8

08009650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b086      	sub	sp, #24
 8009654:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009656:	2300      	movs	r3, #0
 8009658:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800965a:	4b4e      	ldr	r3, [pc, #312]	; (8009794 <xTaskIncrementTick+0x144>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	f040 808e 	bne.w	8009780 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009664:	4b4c      	ldr	r3, [pc, #304]	; (8009798 <xTaskIncrementTick+0x148>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	3301      	adds	r3, #1
 800966a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800966c:	4a4a      	ldr	r2, [pc, #296]	; (8009798 <xTaskIncrementTick+0x148>)
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d120      	bne.n	80096ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009678:	4b48      	ldr	r3, [pc, #288]	; (800979c <xTaskIncrementTick+0x14c>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00a      	beq.n	8009698 <xTaskIncrementTick+0x48>
	__asm volatile
 8009682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009686:	f383 8811 	msr	BASEPRI, r3
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	603b      	str	r3, [r7, #0]
}
 8009694:	bf00      	nop
 8009696:	e7fe      	b.n	8009696 <xTaskIncrementTick+0x46>
 8009698:	4b40      	ldr	r3, [pc, #256]	; (800979c <xTaskIncrementTick+0x14c>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	60fb      	str	r3, [r7, #12]
 800969e:	4b40      	ldr	r3, [pc, #256]	; (80097a0 <xTaskIncrementTick+0x150>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a3e      	ldr	r2, [pc, #248]	; (800979c <xTaskIncrementTick+0x14c>)
 80096a4:	6013      	str	r3, [r2, #0]
 80096a6:	4a3e      	ldr	r2, [pc, #248]	; (80097a0 <xTaskIncrementTick+0x150>)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	4b3d      	ldr	r3, [pc, #244]	; (80097a4 <xTaskIncrementTick+0x154>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3301      	adds	r3, #1
 80096b2:	4a3c      	ldr	r2, [pc, #240]	; (80097a4 <xTaskIncrementTick+0x154>)
 80096b4:	6013      	str	r3, [r2, #0]
 80096b6:	f000 facb 	bl	8009c50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80096ba:	4b3b      	ldr	r3, [pc, #236]	; (80097a8 <xTaskIncrementTick+0x158>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d348      	bcc.n	8009756 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096c4:	4b35      	ldr	r3, [pc, #212]	; (800979c <xTaskIncrementTick+0x14c>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d104      	bne.n	80096d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096ce:	4b36      	ldr	r3, [pc, #216]	; (80097a8 <xTaskIncrementTick+0x158>)
 80096d0:	f04f 32ff 	mov.w	r2, #4294967295
 80096d4:	601a      	str	r2, [r3, #0]
					break;
 80096d6:	e03e      	b.n	8009756 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096d8:	4b30      	ldr	r3, [pc, #192]	; (800979c <xTaskIncrementTick+0x14c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d203      	bcs.n	80096f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096f0:	4a2d      	ldr	r2, [pc, #180]	; (80097a8 <xTaskIncrementTick+0x158>)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096f6:	e02e      	b.n	8009756 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	3304      	adds	r3, #4
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fe fe4e 	bl	800839e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009706:	2b00      	cmp	r3, #0
 8009708:	d004      	beq.n	8009714 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	3318      	adds	r3, #24
 800970e:	4618      	mov	r0, r3
 8009710:	f7fe fe45 	bl	800839e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009718:	2201      	movs	r2, #1
 800971a:	409a      	lsls	r2, r3
 800971c:	4b23      	ldr	r3, [pc, #140]	; (80097ac <xTaskIncrementTick+0x15c>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4313      	orrs	r3, r2
 8009722:	4a22      	ldr	r2, [pc, #136]	; (80097ac <xTaskIncrementTick+0x15c>)
 8009724:	6013      	str	r3, [r2, #0]
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972a:	4613      	mov	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	4413      	add	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4a1f      	ldr	r2, [pc, #124]	; (80097b0 <xTaskIncrementTick+0x160>)
 8009734:	441a      	add	r2, r3
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	3304      	adds	r3, #4
 800973a:	4619      	mov	r1, r3
 800973c:	4610      	mov	r0, r2
 800973e:	f7fe fdd1 	bl	80082e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009746:	4b1b      	ldr	r3, [pc, #108]	; (80097b4 <xTaskIncrementTick+0x164>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974c:	429a      	cmp	r2, r3
 800974e:	d3b9      	bcc.n	80096c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009750:	2301      	movs	r3, #1
 8009752:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009754:	e7b6      	b.n	80096c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009756:	4b17      	ldr	r3, [pc, #92]	; (80097b4 <xTaskIncrementTick+0x164>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800975c:	4914      	ldr	r1, [pc, #80]	; (80097b0 <xTaskIncrementTick+0x160>)
 800975e:	4613      	mov	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4413      	add	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	440b      	add	r3, r1
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d901      	bls.n	8009772 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800976e:	2301      	movs	r3, #1
 8009770:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009772:	4b11      	ldr	r3, [pc, #68]	; (80097b8 <xTaskIncrementTick+0x168>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d007      	beq.n	800978a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800977a:	2301      	movs	r3, #1
 800977c:	617b      	str	r3, [r7, #20]
 800977e:	e004      	b.n	800978a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009780:	4b0e      	ldr	r3, [pc, #56]	; (80097bc <xTaskIncrementTick+0x16c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	3301      	adds	r3, #1
 8009786:	4a0d      	ldr	r2, [pc, #52]	; (80097bc <xTaskIncrementTick+0x16c>)
 8009788:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800978a:	697b      	ldr	r3, [r7, #20]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3718      	adds	r7, #24
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	20000dcc 	.word	0x20000dcc
 8009798:	20000da8 	.word	0x20000da8
 800979c:	20000d5c 	.word	0x20000d5c
 80097a0:	20000d60 	.word	0x20000d60
 80097a4:	20000dbc 	.word	0x20000dbc
 80097a8:	20000dc4 	.word	0x20000dc4
 80097ac:	20000dac 	.word	0x20000dac
 80097b0:	20000ca8 	.word	0x20000ca8
 80097b4:	20000ca4 	.word	0x20000ca4
 80097b8:	20000db8 	.word	0x20000db8
 80097bc:	20000db4 	.word	0x20000db4

080097c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80097c0:	b480      	push	{r7}
 80097c2:	b087      	sub	sp, #28
 80097c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80097c6:	4b27      	ldr	r3, [pc, #156]	; (8009864 <vTaskSwitchContext+0xa4>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d003      	beq.n	80097d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097ce:	4b26      	ldr	r3, [pc, #152]	; (8009868 <vTaskSwitchContext+0xa8>)
 80097d0:	2201      	movs	r2, #1
 80097d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097d4:	e03f      	b.n	8009856 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80097d6:	4b24      	ldr	r3, [pc, #144]	; (8009868 <vTaskSwitchContext+0xa8>)
 80097d8:	2200      	movs	r2, #0
 80097da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097dc:	4b23      	ldr	r3, [pc, #140]	; (800986c <vTaskSwitchContext+0xac>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	fab3 f383 	clz	r3, r3
 80097e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80097ea:	7afb      	ldrb	r3, [r7, #11]
 80097ec:	f1c3 031f 	rsb	r3, r3, #31
 80097f0:	617b      	str	r3, [r7, #20]
 80097f2:	491f      	ldr	r1, [pc, #124]	; (8009870 <vTaskSwitchContext+0xb0>)
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	4613      	mov	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	440b      	add	r3, r1
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10a      	bne.n	800981c <vTaskSwitchContext+0x5c>
	__asm volatile
 8009806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	607b      	str	r3, [r7, #4]
}
 8009818:	bf00      	nop
 800981a:	e7fe      	b.n	800981a <vTaskSwitchContext+0x5a>
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	4613      	mov	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4a12      	ldr	r2, [pc, #72]	; (8009870 <vTaskSwitchContext+0xb0>)
 8009828:	4413      	add	r3, r2
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	685a      	ldr	r2, [r3, #4]
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	605a      	str	r2, [r3, #4]
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	685a      	ldr	r2, [r3, #4]
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	3308      	adds	r3, #8
 800983e:	429a      	cmp	r2, r3
 8009840:	d104      	bne.n	800984c <vTaskSwitchContext+0x8c>
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	685a      	ldr	r2, [r3, #4]
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	605a      	str	r2, [r3, #4]
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	4a08      	ldr	r2, [pc, #32]	; (8009874 <vTaskSwitchContext+0xb4>)
 8009854:	6013      	str	r3, [r2, #0]
}
 8009856:	bf00      	nop
 8009858:	371c      	adds	r7, #28
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	20000dcc 	.word	0x20000dcc
 8009868:	20000db8 	.word	0x20000db8
 800986c:	20000dac 	.word	0x20000dac
 8009870:	20000ca8 	.word	0x20000ca8
 8009874:	20000ca4 	.word	0x20000ca4

08009878 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10a      	bne.n	800989e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	60fb      	str	r3, [r7, #12]
}
 800989a:	bf00      	nop
 800989c:	e7fe      	b.n	800989c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800989e:	4b07      	ldr	r3, [pc, #28]	; (80098bc <vTaskPlaceOnEventList+0x44>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3318      	adds	r3, #24
 80098a4:	4619      	mov	r1, r3
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f7fe fd40 	bl	800832c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098ac:	2101      	movs	r1, #1
 80098ae:	6838      	ldr	r0, [r7, #0]
 80098b0:	f000 fbaa 	bl	800a008 <prvAddCurrentTaskToDelayedList>
}
 80098b4:	bf00      	nop
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	20000ca4 	.word	0x20000ca4

080098c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10a      	bne.n	80098e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	617b      	str	r3, [r7, #20]
}
 80098e4:	bf00      	nop
 80098e6:	e7fe      	b.n	80098e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098e8:	4b0a      	ldr	r3, [pc, #40]	; (8009914 <vTaskPlaceOnEventListRestricted+0x54>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3318      	adds	r3, #24
 80098ee:	4619      	mov	r1, r3
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f7fe fcf7 	bl	80082e4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d002      	beq.n	8009902 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80098fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009900:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	68b8      	ldr	r0, [r7, #8]
 8009906:	f000 fb7f 	bl	800a008 <prvAddCurrentTaskToDelayedList>
	}
 800990a:	bf00      	nop
 800990c:	3718      	adds	r7, #24
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	20000ca4 	.word	0x20000ca4

08009918 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10a      	bne.n	8009944 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	60fb      	str	r3, [r7, #12]
}
 8009940:	bf00      	nop
 8009942:	e7fe      	b.n	8009942 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	3318      	adds	r3, #24
 8009948:	4618      	mov	r0, r3
 800994a:	f7fe fd28 	bl	800839e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800994e:	4b1d      	ldr	r3, [pc, #116]	; (80099c4 <xTaskRemoveFromEventList+0xac>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d11c      	bne.n	8009990 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	3304      	adds	r3, #4
 800995a:	4618      	mov	r0, r3
 800995c:	f7fe fd1f 	bl	800839e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009964:	2201      	movs	r2, #1
 8009966:	409a      	lsls	r2, r3
 8009968:	4b17      	ldr	r3, [pc, #92]	; (80099c8 <xTaskRemoveFromEventList+0xb0>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4313      	orrs	r3, r2
 800996e:	4a16      	ldr	r2, [pc, #88]	; (80099c8 <xTaskRemoveFromEventList+0xb0>)
 8009970:	6013      	str	r3, [r2, #0]
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009976:	4613      	mov	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4a13      	ldr	r2, [pc, #76]	; (80099cc <xTaskRemoveFromEventList+0xb4>)
 8009980:	441a      	add	r2, r3
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	3304      	adds	r3, #4
 8009986:	4619      	mov	r1, r3
 8009988:	4610      	mov	r0, r2
 800998a:	f7fe fcab 	bl	80082e4 <vListInsertEnd>
 800998e:	e005      	b.n	800999c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	3318      	adds	r3, #24
 8009994:	4619      	mov	r1, r3
 8009996:	480e      	ldr	r0, [pc, #56]	; (80099d0 <xTaskRemoveFromEventList+0xb8>)
 8009998:	f7fe fca4 	bl	80082e4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a0:	4b0c      	ldr	r3, [pc, #48]	; (80099d4 <xTaskRemoveFromEventList+0xbc>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d905      	bls.n	80099b6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80099aa:	2301      	movs	r3, #1
 80099ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80099ae:	4b0a      	ldr	r3, [pc, #40]	; (80099d8 <xTaskRemoveFromEventList+0xc0>)
 80099b0:	2201      	movs	r2, #1
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	e001      	b.n	80099ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80099b6:	2300      	movs	r3, #0
 80099b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80099ba:	697b      	ldr	r3, [r7, #20]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	20000dcc 	.word	0x20000dcc
 80099c8:	20000dac 	.word	0x20000dac
 80099cc:	20000ca8 	.word	0x20000ca8
 80099d0:	20000d64 	.word	0x20000d64
 80099d4:	20000ca4 	.word	0x20000ca4
 80099d8:	20000db8 	.word	0x20000db8

080099dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099e4:	4b06      	ldr	r3, [pc, #24]	; (8009a00 <vTaskInternalSetTimeOutState+0x24>)
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099ec:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <vTaskInternalSetTimeOutState+0x28>)
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	605a      	str	r2, [r3, #4]
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	20000dbc 	.word	0x20000dbc
 8009a04:	20000da8 	.word	0x20000da8

08009a08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b088      	sub	sp, #32
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d10a      	bne.n	8009a2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	613b      	str	r3, [r7, #16]
}
 8009a2a:	bf00      	nop
 8009a2c:	e7fe      	b.n	8009a2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10a      	bne.n	8009a4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	60fb      	str	r3, [r7, #12]
}
 8009a46:	bf00      	nop
 8009a48:	e7fe      	b.n	8009a48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009a4a:	f000 ffa3 	bl	800a994 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a4e:	4b1d      	ldr	r3, [pc, #116]	; (8009ac4 <xTaskCheckForTimeOut+0xbc>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	69ba      	ldr	r2, [r7, #24]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a66:	d102      	bne.n	8009a6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	61fb      	str	r3, [r7, #28]
 8009a6c:	e023      	b.n	8009ab6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	4b15      	ldr	r3, [pc, #84]	; (8009ac8 <xTaskCheckForTimeOut+0xc0>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d007      	beq.n	8009a8a <xTaskCheckForTimeOut+0x82>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	69ba      	ldr	r2, [r7, #24]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d302      	bcc.n	8009a8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a84:	2301      	movs	r3, #1
 8009a86:	61fb      	str	r3, [r7, #28]
 8009a88:	e015      	b.n	8009ab6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d20b      	bcs.n	8009aac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	1ad2      	subs	r2, r2, r3
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f7ff ff9b 	bl	80099dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	61fb      	str	r3, [r7, #28]
 8009aaa:	e004      	b.n	8009ab6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009ab6:	f000 ff9d 	bl	800a9f4 <vPortExitCritical>

	return xReturn;
 8009aba:	69fb      	ldr	r3, [r7, #28]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3720      	adds	r7, #32
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	20000da8 	.word	0x20000da8
 8009ac8:	20000dbc 	.word	0x20000dbc

08009acc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009acc:	b480      	push	{r7}
 8009ace:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ad0:	4b03      	ldr	r3, [pc, #12]	; (8009ae0 <vTaskMissedYield+0x14>)
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	601a      	str	r2, [r3, #0]
}
 8009ad6:	bf00      	nop
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	20000db8 	.word	0x20000db8

08009ae4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009aec:	f000 f852 	bl	8009b94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009af0:	4b06      	ldr	r3, [pc, #24]	; (8009b0c <prvIdleTask+0x28>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d9f9      	bls.n	8009aec <prvIdleTask+0x8>
			{
				taskYIELD();
 8009af8:	4b05      	ldr	r3, [pc, #20]	; (8009b10 <prvIdleTask+0x2c>)
 8009afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009afe:	601a      	str	r2, [r3, #0]
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009b08:	e7f0      	b.n	8009aec <prvIdleTask+0x8>
 8009b0a:	bf00      	nop
 8009b0c:	20000ca8 	.word	0x20000ca8
 8009b10:	e000ed04 	.word	0xe000ed04

08009b14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	607b      	str	r3, [r7, #4]
 8009b1e:	e00c      	b.n	8009b3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	4613      	mov	r3, r2
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4413      	add	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4a12      	ldr	r2, [pc, #72]	; (8009b74 <prvInitialiseTaskLists+0x60>)
 8009b2c:	4413      	add	r3, r2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fe fbab 	bl	800828a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	3301      	adds	r3, #1
 8009b38:	607b      	str	r3, [r7, #4]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2b06      	cmp	r3, #6
 8009b3e:	d9ef      	bls.n	8009b20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b40:	480d      	ldr	r0, [pc, #52]	; (8009b78 <prvInitialiseTaskLists+0x64>)
 8009b42:	f7fe fba2 	bl	800828a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b46:	480d      	ldr	r0, [pc, #52]	; (8009b7c <prvInitialiseTaskLists+0x68>)
 8009b48:	f7fe fb9f 	bl	800828a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b4c:	480c      	ldr	r0, [pc, #48]	; (8009b80 <prvInitialiseTaskLists+0x6c>)
 8009b4e:	f7fe fb9c 	bl	800828a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b52:	480c      	ldr	r0, [pc, #48]	; (8009b84 <prvInitialiseTaskLists+0x70>)
 8009b54:	f7fe fb99 	bl	800828a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b58:	480b      	ldr	r0, [pc, #44]	; (8009b88 <prvInitialiseTaskLists+0x74>)
 8009b5a:	f7fe fb96 	bl	800828a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b5e:	4b0b      	ldr	r3, [pc, #44]	; (8009b8c <prvInitialiseTaskLists+0x78>)
 8009b60:	4a05      	ldr	r2, [pc, #20]	; (8009b78 <prvInitialiseTaskLists+0x64>)
 8009b62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b64:	4b0a      	ldr	r3, [pc, #40]	; (8009b90 <prvInitialiseTaskLists+0x7c>)
 8009b66:	4a05      	ldr	r2, [pc, #20]	; (8009b7c <prvInitialiseTaskLists+0x68>)
 8009b68:	601a      	str	r2, [r3, #0]
}
 8009b6a:	bf00      	nop
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	20000ca8 	.word	0x20000ca8
 8009b78:	20000d34 	.word	0x20000d34
 8009b7c:	20000d48 	.word	0x20000d48
 8009b80:	20000d64 	.word	0x20000d64
 8009b84:	20000d78 	.word	0x20000d78
 8009b88:	20000d90 	.word	0x20000d90
 8009b8c:	20000d5c 	.word	0x20000d5c
 8009b90:	20000d60 	.word	0x20000d60

08009b94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b9a:	e019      	b.n	8009bd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b9c:	f000 fefa 	bl	800a994 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ba0:	4b10      	ldr	r3, [pc, #64]	; (8009be4 <prvCheckTasksWaitingTermination+0x50>)
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	3304      	adds	r3, #4
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7fe fbf6 	bl	800839e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009bb2:	4b0d      	ldr	r3, [pc, #52]	; (8009be8 <prvCheckTasksWaitingTermination+0x54>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	4a0b      	ldr	r2, [pc, #44]	; (8009be8 <prvCheckTasksWaitingTermination+0x54>)
 8009bba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009bbc:	4b0b      	ldr	r3, [pc, #44]	; (8009bec <prvCheckTasksWaitingTermination+0x58>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	4a0a      	ldr	r2, [pc, #40]	; (8009bec <prvCheckTasksWaitingTermination+0x58>)
 8009bc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009bc6:	f000 ff15 	bl	800a9f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f810 	bl	8009bf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bd0:	4b06      	ldr	r3, [pc, #24]	; (8009bec <prvCheckTasksWaitingTermination+0x58>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1e1      	bne.n	8009b9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009bd8:	bf00      	nop
 8009bda:	bf00      	nop
 8009bdc:	3708      	adds	r7, #8
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	20000d78 	.word	0x20000d78
 8009be8:	20000da4 	.word	0x20000da4
 8009bec:	20000d8c 	.word	0x20000d8c

08009bf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d108      	bne.n	8009c14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c06:	4618      	mov	r0, r3
 8009c08:	f001 f8b2 	bl	800ad70 <vPortFree>
				vPortFree( pxTCB );
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f001 f8af 	bl	800ad70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009c12:	e018      	b.n	8009c46 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d103      	bne.n	8009c26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f001 f8a6 	bl	800ad70 <vPortFree>
	}
 8009c24:	e00f      	b.n	8009c46 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d00a      	beq.n	8009c46 <prvDeleteTCB+0x56>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	60fb      	str	r3, [r7, #12]
}
 8009c42:	bf00      	nop
 8009c44:	e7fe      	b.n	8009c44 <prvDeleteTCB+0x54>
	}
 8009c46:	bf00      	nop
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
	...

08009c50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c56:	4b0c      	ldr	r3, [pc, #48]	; (8009c88 <prvResetNextTaskUnblockTime+0x38>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d104      	bne.n	8009c6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c60:	4b0a      	ldr	r3, [pc, #40]	; (8009c8c <prvResetNextTaskUnblockTime+0x3c>)
 8009c62:	f04f 32ff 	mov.w	r2, #4294967295
 8009c66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c68:	e008      	b.n	8009c7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c6a:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <prvResetNextTaskUnblockTime+0x38>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	4a04      	ldr	r2, [pc, #16]	; (8009c8c <prvResetNextTaskUnblockTime+0x3c>)
 8009c7a:	6013      	str	r3, [r2, #0]
}
 8009c7c:	bf00      	nop
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	20000d5c 	.word	0x20000d5c
 8009c8c:	20000dc4 	.word	0x20000dc4

08009c90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c96:	4b0b      	ldr	r3, [pc, #44]	; (8009cc4 <xTaskGetSchedulerState+0x34>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d102      	bne.n	8009ca4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	607b      	str	r3, [r7, #4]
 8009ca2:	e008      	b.n	8009cb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ca4:	4b08      	ldr	r3, [pc, #32]	; (8009cc8 <xTaskGetSchedulerState+0x38>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d102      	bne.n	8009cb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009cac:	2302      	movs	r3, #2
 8009cae:	607b      	str	r3, [r7, #4]
 8009cb0:	e001      	b.n	8009cb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009cb6:	687b      	ldr	r3, [r7, #4]
	}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr
 8009cc4:	20000db0 	.word	0x20000db0
 8009cc8:	20000dcc 	.word	0x20000dcc

08009ccc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d05e      	beq.n	8009da0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce6:	4b31      	ldr	r3, [pc, #196]	; (8009dac <xTaskPriorityInherit+0xe0>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d24e      	bcs.n	8009d8e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	db06      	blt.n	8009d06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cf8:	4b2c      	ldr	r3, [pc, #176]	; (8009dac <xTaskPriorityInherit+0xe0>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfe:	f1c3 0207 	rsb	r2, r3, #7
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	6959      	ldr	r1, [r3, #20]
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d0e:	4613      	mov	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	4a26      	ldr	r2, [pc, #152]	; (8009db0 <xTaskPriorityInherit+0xe4>)
 8009d18:	4413      	add	r3, r2
 8009d1a:	4299      	cmp	r1, r3
 8009d1c:	d12f      	bne.n	8009d7e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	3304      	adds	r3, #4
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fe fb3b 	bl	800839e <uxListRemove>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10a      	bne.n	8009d44 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d32:	2201      	movs	r2, #1
 8009d34:	fa02 f303 	lsl.w	r3, r2, r3
 8009d38:	43da      	mvns	r2, r3
 8009d3a:	4b1e      	ldr	r3, [pc, #120]	; (8009db4 <xTaskPriorityInherit+0xe8>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4013      	ands	r3, r2
 8009d40:	4a1c      	ldr	r2, [pc, #112]	; (8009db4 <xTaskPriorityInherit+0xe8>)
 8009d42:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d44:	4b19      	ldr	r3, [pc, #100]	; (8009dac <xTaskPriorityInherit+0xe0>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d52:	2201      	movs	r2, #1
 8009d54:	409a      	lsls	r2, r3
 8009d56:	4b17      	ldr	r3, [pc, #92]	; (8009db4 <xTaskPriorityInherit+0xe8>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	4a15      	ldr	r2, [pc, #84]	; (8009db4 <xTaskPriorityInherit+0xe8>)
 8009d5e:	6013      	str	r3, [r2, #0]
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d64:	4613      	mov	r3, r2
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4413      	add	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4a10      	ldr	r2, [pc, #64]	; (8009db0 <xTaskPriorityInherit+0xe4>)
 8009d6e:	441a      	add	r2, r3
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	3304      	adds	r3, #4
 8009d74:	4619      	mov	r1, r3
 8009d76:	4610      	mov	r0, r2
 8009d78:	f7fe fab4 	bl	80082e4 <vListInsertEnd>
 8009d7c:	e004      	b.n	8009d88 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d7e:	4b0b      	ldr	r3, [pc, #44]	; (8009dac <xTaskPriorityInherit+0xe0>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	60fb      	str	r3, [r7, #12]
 8009d8c:	e008      	b.n	8009da0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d92:	4b06      	ldr	r3, [pc, #24]	; (8009dac <xTaskPriorityInherit+0xe0>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d201      	bcs.n	8009da0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009da0:	68fb      	ldr	r3, [r7, #12]
	}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	20000ca4 	.word	0x20000ca4
 8009db0:	20000ca8 	.word	0x20000ca8
 8009db4:	20000dac 	.word	0x20000dac

08009db8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d06e      	beq.n	8009eac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009dce:	4b3a      	ldr	r3, [pc, #232]	; (8009eb8 <xTaskPriorityDisinherit+0x100>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	693a      	ldr	r2, [r7, #16]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d00a      	beq.n	8009dee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	60fb      	str	r3, [r7, #12]
}
 8009dea:	bf00      	nop
 8009dec:	e7fe      	b.n	8009dec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10a      	bne.n	8009e0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfa:	f383 8811 	msr	BASEPRI, r3
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f3bf 8f4f 	dsb	sy
 8009e06:	60bb      	str	r3, [r7, #8]
}
 8009e08:	bf00      	nop
 8009e0a:	e7fe      	b.n	8009e0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e10:	1e5a      	subs	r2, r3, #1
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d044      	beq.n	8009eac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d140      	bne.n	8009eac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fe fab5 	bl	800839e <uxListRemove>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d115      	bne.n	8009e66 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3e:	491f      	ldr	r1, [pc, #124]	; (8009ebc <xTaskPriorityDisinherit+0x104>)
 8009e40:	4613      	mov	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	440b      	add	r3, r1
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d10a      	bne.n	8009e66 <xTaskPriorityDisinherit+0xae>
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e54:	2201      	movs	r2, #1
 8009e56:	fa02 f303 	lsl.w	r3, r2, r3
 8009e5a:	43da      	mvns	r2, r3
 8009e5c:	4b18      	ldr	r3, [pc, #96]	; (8009ec0 <xTaskPriorityDisinherit+0x108>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4013      	ands	r3, r2
 8009e62:	4a17      	ldr	r2, [pc, #92]	; (8009ec0 <xTaskPriorityDisinherit+0x108>)
 8009e64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e72:	f1c3 0207 	rsb	r2, r3, #7
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7e:	2201      	movs	r2, #1
 8009e80:	409a      	lsls	r2, r3
 8009e82:	4b0f      	ldr	r3, [pc, #60]	; (8009ec0 <xTaskPriorityDisinherit+0x108>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	4a0d      	ldr	r2, [pc, #52]	; (8009ec0 <xTaskPriorityDisinherit+0x108>)
 8009e8a:	6013      	str	r3, [r2, #0]
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e90:	4613      	mov	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4413      	add	r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	4a08      	ldr	r2, [pc, #32]	; (8009ebc <xTaskPriorityDisinherit+0x104>)
 8009e9a:	441a      	add	r2, r3
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	3304      	adds	r3, #4
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	4610      	mov	r0, r2
 8009ea4:	f7fe fa1e 	bl	80082e4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009eac:	697b      	ldr	r3, [r7, #20]
	}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3718      	adds	r7, #24
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	20000ca4 	.word	0x20000ca4
 8009ebc:	20000ca8 	.word	0x20000ca8
 8009ec0:	20000dac 	.word	0x20000dac

08009ec4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b088      	sub	sp, #32
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d077      	beq.n	8009fcc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10a      	bne.n	8009efa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	60fb      	str	r3, [r7, #12]
}
 8009ef6:	bf00      	nop
 8009ef8:	e7fe      	b.n	8009ef8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009efe:	683a      	ldr	r2, [r7, #0]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d902      	bls.n	8009f0a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	61fb      	str	r3, [r7, #28]
 8009f08:	e002      	b.n	8009f10 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f0e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f14:	69fa      	ldr	r2, [r7, #28]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d058      	beq.n	8009fcc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d153      	bne.n	8009fcc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009f24:	4b2b      	ldr	r3, [pc, #172]	; (8009fd4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	69ba      	ldr	r2, [r7, #24]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d10a      	bne.n	8009f44 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	60bb      	str	r3, [r7, #8]
}
 8009f40:	bf00      	nop
 8009f42:	e7fe      	b.n	8009f42 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f48:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	69fa      	ldr	r2, [r7, #28]
 8009f4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	db04      	blt.n	8009f62 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	f1c3 0207 	rsb	r2, r3, #7
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	6959      	ldr	r1, [r3, #20]
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	4413      	add	r3, r2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4a19      	ldr	r2, [pc, #100]	; (8009fd8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009f72:	4413      	add	r3, r2
 8009f74:	4299      	cmp	r1, r3
 8009f76:	d129      	bne.n	8009fcc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	3304      	adds	r3, #4
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fe fa0e 	bl	800839e <uxListRemove>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10a      	bne.n	8009f9e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f92:	43da      	mvns	r2, r3
 8009f94:	4b11      	ldr	r3, [pc, #68]	; (8009fdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4013      	ands	r3, r2
 8009f9a:	4a10      	ldr	r2, [pc, #64]	; (8009fdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009f9c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	409a      	lsls	r2, r3
 8009fa6:	4b0d      	ldr	r3, [pc, #52]	; (8009fdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	4a0b      	ldr	r2, [pc, #44]	; (8009fdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4a06      	ldr	r2, [pc, #24]	; (8009fd8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009fbe:	441a      	add	r2, r3
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	f7fe f98c 	bl	80082e4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fcc:	bf00      	nop
 8009fce:	3720      	adds	r7, #32
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	20000ca4 	.word	0x20000ca4
 8009fd8:	20000ca8 	.word	0x20000ca8
 8009fdc:	20000dac 	.word	0x20000dac

08009fe0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009fe0:	b480      	push	{r7}
 8009fe2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009fe4:	4b07      	ldr	r3, [pc, #28]	; (800a004 <pvTaskIncrementMutexHeldCount+0x24>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d004      	beq.n	8009ff6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009fec:	4b05      	ldr	r3, [pc, #20]	; (800a004 <pvTaskIncrementMutexHeldCount+0x24>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ff2:	3201      	adds	r2, #1
 8009ff4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009ff6:	4b03      	ldr	r3, [pc, #12]	; (800a004 <pvTaskIncrementMutexHeldCount+0x24>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
	}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr
 800a004:	20000ca4 	.word	0x20000ca4

0800a008 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a012:	4b29      	ldr	r3, [pc, #164]	; (800a0b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a018:	4b28      	ldr	r3, [pc, #160]	; (800a0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	3304      	adds	r3, #4
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fe f9bd 	bl	800839e <uxListRemove>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10b      	bne.n	800a042 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a02a:	4b24      	ldr	r3, [pc, #144]	; (800a0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a030:	2201      	movs	r2, #1
 800a032:	fa02 f303 	lsl.w	r3, r2, r3
 800a036:	43da      	mvns	r2, r3
 800a038:	4b21      	ldr	r3, [pc, #132]	; (800a0c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4013      	ands	r3, r2
 800a03e:	4a20      	ldr	r2, [pc, #128]	; (800a0c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a040:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a048:	d10a      	bne.n	800a060 <prvAddCurrentTaskToDelayedList+0x58>
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d007      	beq.n	800a060 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a050:	4b1a      	ldr	r3, [pc, #104]	; (800a0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	3304      	adds	r3, #4
 800a056:	4619      	mov	r1, r3
 800a058:	481a      	ldr	r0, [pc, #104]	; (800a0c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a05a:	f7fe f943 	bl	80082e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a05e:	e026      	b.n	800a0ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4413      	add	r3, r2
 800a066:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a068:	4b14      	ldr	r3, [pc, #80]	; (800a0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	429a      	cmp	r2, r3
 800a076:	d209      	bcs.n	800a08c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a078:	4b13      	ldr	r3, [pc, #76]	; (800a0c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	4b0f      	ldr	r3, [pc, #60]	; (800a0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3304      	adds	r3, #4
 800a082:	4619      	mov	r1, r3
 800a084:	4610      	mov	r0, r2
 800a086:	f7fe f951 	bl	800832c <vListInsert>
}
 800a08a:	e010      	b.n	800a0ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a08c:	4b0f      	ldr	r3, [pc, #60]	; (800a0cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	4b0a      	ldr	r3, [pc, #40]	; (800a0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3304      	adds	r3, #4
 800a096:	4619      	mov	r1, r3
 800a098:	4610      	mov	r0, r2
 800a09a:	f7fe f947 	bl	800832c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a09e:	4b0c      	ldr	r3, [pc, #48]	; (800a0d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68ba      	ldr	r2, [r7, #8]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d202      	bcs.n	800a0ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a0a8:	4a09      	ldr	r2, [pc, #36]	; (800a0d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	6013      	str	r3, [r2, #0]
}
 800a0ae:	bf00      	nop
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	20000da8 	.word	0x20000da8
 800a0bc:	20000ca4 	.word	0x20000ca4
 800a0c0:	20000dac 	.word	0x20000dac
 800a0c4:	20000d90 	.word	0x20000d90
 800a0c8:	20000d60 	.word	0x20000d60
 800a0cc:	20000d5c 	.word	0x20000d5c
 800a0d0:	20000dc4 	.word	0x20000dc4

0800a0d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08a      	sub	sp, #40	; 0x28
 800a0d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a0de:	f000 faeb 	bl	800a6b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a0e2:	4b1c      	ldr	r3, [pc, #112]	; (800a154 <xTimerCreateTimerTask+0x80>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d021      	beq.n	800a12e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a0f2:	1d3a      	adds	r2, r7, #4
 800a0f4:	f107 0108 	add.w	r1, r7, #8
 800a0f8:	f107 030c 	add.w	r3, r7, #12
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7f7 f8fb 	bl	80012f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a102:	6879      	ldr	r1, [r7, #4]
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	9202      	str	r2, [sp, #8]
 800a10a:	9301      	str	r3, [sp, #4]
 800a10c:	2302      	movs	r3, #2
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	2300      	movs	r3, #0
 800a112:	460a      	mov	r2, r1
 800a114:	4910      	ldr	r1, [pc, #64]	; (800a158 <xTimerCreateTimerTask+0x84>)
 800a116:	4811      	ldr	r0, [pc, #68]	; (800a15c <xTimerCreateTimerTask+0x88>)
 800a118:	f7fe ffb2 	bl	8009080 <xTaskCreateStatic>
 800a11c:	4603      	mov	r3, r0
 800a11e:	4a10      	ldr	r2, [pc, #64]	; (800a160 <xTimerCreateTimerTask+0x8c>)
 800a120:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a122:	4b0f      	ldr	r3, [pc, #60]	; (800a160 <xTimerCreateTimerTask+0x8c>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a12a:	2301      	movs	r3, #1
 800a12c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10a      	bne.n	800a14a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	613b      	str	r3, [r7, #16]
}
 800a146:	bf00      	nop
 800a148:	e7fe      	b.n	800a148 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a14a:	697b      	ldr	r3, [r7, #20]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3718      	adds	r7, #24
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	20000e00 	.word	0x20000e00
 800a158:	0800d990 	.word	0x0800d990
 800a15c:	0800a299 	.word	0x0800a299
 800a160:	20000e04 	.word	0x20000e04

0800a164 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b08a      	sub	sp, #40	; 0x28
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
 800a170:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a172:	2300      	movs	r3, #0
 800a174:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10a      	bne.n	800a192 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a180:	f383 8811 	msr	BASEPRI, r3
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	623b      	str	r3, [r7, #32]
}
 800a18e:	bf00      	nop
 800a190:	e7fe      	b.n	800a190 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a192:	4b1a      	ldr	r3, [pc, #104]	; (800a1fc <xTimerGenericCommand+0x98>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d02a      	beq.n	800a1f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2b05      	cmp	r3, #5
 800a1aa:	dc18      	bgt.n	800a1de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a1ac:	f7ff fd70 	bl	8009c90 <xTaskGetSchedulerState>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d109      	bne.n	800a1ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a1b6:	4b11      	ldr	r3, [pc, #68]	; (800a1fc <xTimerGenericCommand+0x98>)
 800a1b8:	6818      	ldr	r0, [r3, #0]
 800a1ba:	f107 0114 	add.w	r1, r7, #20
 800a1be:	2300      	movs	r3, #0
 800a1c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1c2:	f7fe fa51 	bl	8008668 <xQueueGenericSend>
 800a1c6:	6278      	str	r0, [r7, #36]	; 0x24
 800a1c8:	e012      	b.n	800a1f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a1ca:	4b0c      	ldr	r3, [pc, #48]	; (800a1fc <xTimerGenericCommand+0x98>)
 800a1cc:	6818      	ldr	r0, [r3, #0]
 800a1ce:	f107 0114 	add.w	r1, r7, #20
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f7fe fa47 	bl	8008668 <xQueueGenericSend>
 800a1da:	6278      	str	r0, [r7, #36]	; 0x24
 800a1dc:	e008      	b.n	800a1f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a1de:	4b07      	ldr	r3, [pc, #28]	; (800a1fc <xTimerGenericCommand+0x98>)
 800a1e0:	6818      	ldr	r0, [r3, #0]
 800a1e2:	f107 0114 	add.w	r1, r7, #20
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	f7fe fb3b 	bl	8008864 <xQueueGenericSendFromISR>
 800a1ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3728      	adds	r7, #40	; 0x28
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20000e00 	.word	0x20000e00

0800a200 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b088      	sub	sp, #32
 800a204:	af02      	add	r7, sp, #8
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a20a:	4b22      	ldr	r3, [pc, #136]	; (800a294 <prvProcessExpiredTimer+0x94>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	3304      	adds	r3, #4
 800a218:	4618      	mov	r0, r3
 800a21a:	f7fe f8c0 	bl	800839e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a224:	f003 0304 	and.w	r3, r3, #4
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d022      	beq.n	800a272 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	699a      	ldr	r2, [r3, #24]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	18d1      	adds	r1, r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	6978      	ldr	r0, [r7, #20]
 800a23a:	f000 f8d1 	bl	800a3e0 <prvInsertTimerInActiveList>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d01f      	beq.n	800a284 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a244:	2300      	movs	r3, #0
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	2300      	movs	r3, #0
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	2100      	movs	r1, #0
 800a24e:	6978      	ldr	r0, [r7, #20]
 800a250:	f7ff ff88 	bl	800a164 <xTimerGenericCommand>
 800a254:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d113      	bne.n	800a284 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	60fb      	str	r3, [r7, #12]
}
 800a26e:	bf00      	nop
 800a270:	e7fe      	b.n	800a270 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a278:	f023 0301 	bic.w	r3, r3, #1
 800a27c:	b2da      	uxtb	r2, r3
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	6a1b      	ldr	r3, [r3, #32]
 800a288:	6978      	ldr	r0, [r7, #20]
 800a28a:	4798      	blx	r3
}
 800a28c:	bf00      	nop
 800a28e:	3718      	adds	r7, #24
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	20000df8 	.word	0x20000df8

0800a298 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2a0:	f107 0308 	add.w	r3, r7, #8
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f000 f857 	bl	800a358 <prvGetNextExpireTime>
 800a2aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f000 f803 	bl	800a2bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a2b6:	f000 f8d5 	bl	800a464 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2ba:	e7f1      	b.n	800a2a0 <prvTimerTask+0x8>

0800a2bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a2c6:	f7ff f909 	bl	80094dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2ca:	f107 0308 	add.w	r3, r7, #8
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f000 f866 	bl	800a3a0 <prvSampleTimeNow>
 800a2d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d130      	bne.n	800a33e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10a      	bne.n	800a2f8 <prvProcessTimerOrBlockTask+0x3c>
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d806      	bhi.n	800a2f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a2ea:	f7ff f905 	bl	80094f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a2ee:	68f9      	ldr	r1, [r7, #12]
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f7ff ff85 	bl	800a200 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a2f6:	e024      	b.n	800a342 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d008      	beq.n	800a310 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a2fe:	4b13      	ldr	r3, [pc, #76]	; (800a34c <prvProcessTimerOrBlockTask+0x90>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d101      	bne.n	800a30c <prvProcessTimerOrBlockTask+0x50>
 800a308:	2301      	movs	r3, #1
 800a30a:	e000      	b.n	800a30e <prvProcessTimerOrBlockTask+0x52>
 800a30c:	2300      	movs	r3, #0
 800a30e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a310:	4b0f      	ldr	r3, [pc, #60]	; (800a350 <prvProcessTimerOrBlockTask+0x94>)
 800a312:	6818      	ldr	r0, [r3, #0]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	4619      	mov	r1, r3
 800a31e:	f7fe fe7b 	bl	8009018 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a322:	f7ff f8e9 	bl	80094f8 <xTaskResumeAll>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10a      	bne.n	800a342 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a32c:	4b09      	ldr	r3, [pc, #36]	; (800a354 <prvProcessTimerOrBlockTask+0x98>)
 800a32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	f3bf 8f6f 	isb	sy
}
 800a33c:	e001      	b.n	800a342 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a33e:	f7ff f8db 	bl	80094f8 <xTaskResumeAll>
}
 800a342:	bf00      	nop
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	20000dfc 	.word	0x20000dfc
 800a350:	20000e00 	.word	0x20000e00
 800a354:	e000ed04 	.word	0xe000ed04

0800a358 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a360:	4b0e      	ldr	r3, [pc, #56]	; (800a39c <prvGetNextExpireTime+0x44>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d101      	bne.n	800a36e <prvGetNextExpireTime+0x16>
 800a36a:	2201      	movs	r2, #1
 800a36c:	e000      	b.n	800a370 <prvGetNextExpireTime+0x18>
 800a36e:	2200      	movs	r2, #0
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d105      	bne.n	800a388 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a37c:	4b07      	ldr	r3, [pc, #28]	; (800a39c <prvGetNextExpireTime+0x44>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	60fb      	str	r3, [r7, #12]
 800a386:	e001      	b.n	800a38c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a388:	2300      	movs	r3, #0
 800a38a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a38c:	68fb      	ldr	r3, [r7, #12]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3714      	adds	r7, #20
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr
 800a39a:	bf00      	nop
 800a39c:	20000df8 	.word	0x20000df8

0800a3a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a3a8:	f7ff f942 	bl	8009630 <xTaskGetTickCount>
 800a3ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a3ae:	4b0b      	ldr	r3, [pc, #44]	; (800a3dc <prvSampleTimeNow+0x3c>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d205      	bcs.n	800a3c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a3b8:	f000 f91a 	bl	800a5f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	601a      	str	r2, [r3, #0]
 800a3c2:	e002      	b.n	800a3ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a3ca:	4a04      	ldr	r2, [pc, #16]	; (800a3dc <prvSampleTimeNow+0x3c>)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	20000e08 	.word	0x20000e08

0800a3e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
 800a3ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	429a      	cmp	r2, r3
 800a404:	d812      	bhi.n	800a42c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	1ad2      	subs	r2, r2, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	699b      	ldr	r3, [r3, #24]
 800a410:	429a      	cmp	r2, r3
 800a412:	d302      	bcc.n	800a41a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a414:	2301      	movs	r3, #1
 800a416:	617b      	str	r3, [r7, #20]
 800a418:	e01b      	b.n	800a452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a41a:	4b10      	ldr	r3, [pc, #64]	; (800a45c <prvInsertTimerInActiveList+0x7c>)
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	3304      	adds	r3, #4
 800a422:	4619      	mov	r1, r3
 800a424:	4610      	mov	r0, r2
 800a426:	f7fd ff81 	bl	800832c <vListInsert>
 800a42a:	e012      	b.n	800a452 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	429a      	cmp	r2, r3
 800a432:	d206      	bcs.n	800a442 <prvInsertTimerInActiveList+0x62>
 800a434:	68ba      	ldr	r2, [r7, #8]
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d302      	bcc.n	800a442 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a43c:	2301      	movs	r3, #1
 800a43e:	617b      	str	r3, [r7, #20]
 800a440:	e007      	b.n	800a452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a442:	4b07      	ldr	r3, [pc, #28]	; (800a460 <prvInsertTimerInActiveList+0x80>)
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	3304      	adds	r3, #4
 800a44a:	4619      	mov	r1, r3
 800a44c:	4610      	mov	r0, r2
 800a44e:	f7fd ff6d 	bl	800832c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a452:	697b      	ldr	r3, [r7, #20]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3718      	adds	r7, #24
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	20000dfc 	.word	0x20000dfc
 800a460:	20000df8 	.word	0x20000df8

0800a464 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b08c      	sub	sp, #48	; 0x30
 800a468:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a46a:	e0ae      	b.n	800a5ca <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f2c0 80ab 	blt.w	800a5ca <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d004      	beq.n	800a48a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	3304      	adds	r3, #4
 800a484:	4618      	mov	r0, r3
 800a486:	f7fd ff8a 	bl	800839e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a48a:	1d3b      	adds	r3, r7, #4
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7ff ff87 	bl	800a3a0 <prvSampleTimeNow>
 800a492:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	2b09      	cmp	r3, #9
 800a498:	f200 8096 	bhi.w	800a5c8 <prvProcessReceivedCommands+0x164>
 800a49c:	a201      	add	r2, pc, #4	; (adr r2, 800a4a4 <prvProcessReceivedCommands+0x40>)
 800a49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a2:	bf00      	nop
 800a4a4:	0800a4cd 	.word	0x0800a4cd
 800a4a8:	0800a4cd 	.word	0x0800a4cd
 800a4ac:	0800a4cd 	.word	0x0800a4cd
 800a4b0:	0800a541 	.word	0x0800a541
 800a4b4:	0800a555 	.word	0x0800a555
 800a4b8:	0800a59f 	.word	0x0800a59f
 800a4bc:	0800a4cd 	.word	0x0800a4cd
 800a4c0:	0800a4cd 	.word	0x0800a4cd
 800a4c4:	0800a541 	.word	0x0800a541
 800a4c8:	0800a555 	.word	0x0800a555
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a4d2:	f043 0301 	orr.w	r3, r3, #1
 800a4d6:	b2da      	uxtb	r2, r3
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	699b      	ldr	r3, [r3, #24]
 800a4e4:	18d1      	adds	r1, r2, r3
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6a3a      	ldr	r2, [r7, #32]
 800a4ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4ec:	f7ff ff78 	bl	800a3e0 <prvInsertTimerInActiveList>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d069      	beq.n	800a5ca <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a504:	f003 0304 	and.w	r3, r3, #4
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d05e      	beq.n	800a5ca <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	441a      	add	r2, r3
 800a514:	2300      	movs	r3, #0
 800a516:	9300      	str	r3, [sp, #0]
 800a518:	2300      	movs	r3, #0
 800a51a:	2100      	movs	r1, #0
 800a51c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a51e:	f7ff fe21 	bl	800a164 <xTimerGenericCommand>
 800a522:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d14f      	bne.n	800a5ca <prvProcessReceivedCommands+0x166>
	__asm volatile
 800a52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52e:	f383 8811 	msr	BASEPRI, r3
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	61bb      	str	r3, [r7, #24]
}
 800a53c:	bf00      	nop
 800a53e:	e7fe      	b.n	800a53e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a542:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a546:	f023 0301 	bic.w	r3, r3, #1
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800a552:	e03a      	b.n	800a5ca <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a556:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a55a:	f043 0301 	orr.w	r3, r3, #1
 800a55e:	b2da      	uxtb	r2, r3
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10a      	bne.n	800a58a <prvProcessReceivedCommands+0x126>
	__asm volatile
 800a574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	617b      	str	r3, [r7, #20]
}
 800a586:	bf00      	nop
 800a588:	e7fe      	b.n	800a588 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58c:	699a      	ldr	r2, [r3, #24]
 800a58e:	6a3b      	ldr	r3, [r7, #32]
 800a590:	18d1      	adds	r1, r2, r3
 800a592:	6a3b      	ldr	r3, [r7, #32]
 800a594:	6a3a      	ldr	r2, [r7, #32]
 800a596:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a598:	f7ff ff22 	bl	800a3e0 <prvInsertTimerInActiveList>
					break;
 800a59c:	e015      	b.n	800a5ca <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a5a4:	f003 0302 	and.w	r3, r3, #2
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d103      	bne.n	800a5b4 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800a5ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5ae:	f000 fbdf 	bl	800ad70 <vPortFree>
 800a5b2:	e00a      	b.n	800a5ca <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a5ba:	f023 0301 	bic.w	r3, r3, #1
 800a5be:	b2da      	uxtb	r2, r3
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a5c6:	e000      	b.n	800a5ca <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 800a5c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5ca:	4b08      	ldr	r3, [pc, #32]	; (800a5ec <prvProcessReceivedCommands+0x188>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f107 0108 	add.w	r1, r7, #8
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7fe f9e1 	bl	800899c <xQueueReceive>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f47f af45 	bne.w	800a46c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a5e2:	bf00      	nop
 800a5e4:	bf00      	nop
 800a5e6:	3728      	adds	r7, #40	; 0x28
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	20000e00 	.word	0x20000e00

0800a5f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b088      	sub	sp, #32
 800a5f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5f6:	e048      	b.n	800a68a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5f8:	4b2d      	ldr	r3, [pc, #180]	; (800a6b0 <prvSwitchTimerLists+0xc0>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a602:	4b2b      	ldr	r3, [pc, #172]	; (800a6b0 <prvSwitchTimerLists+0xc0>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	3304      	adds	r3, #4
 800a610:	4618      	mov	r0, r3
 800a612:	f7fd fec4 	bl	800839e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6a1b      	ldr	r3, [r3, #32]
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a624:	f003 0304 	and.w	r3, r3, #4
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d02e      	beq.n	800a68a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	699b      	ldr	r3, [r3, #24]
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	4413      	add	r3, r2
 800a634:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d90e      	bls.n	800a65c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a64a:	4b19      	ldr	r3, [pc, #100]	; (800a6b0 <prvSwitchTimerLists+0xc0>)
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	3304      	adds	r3, #4
 800a652:	4619      	mov	r1, r3
 800a654:	4610      	mov	r0, r2
 800a656:	f7fd fe69 	bl	800832c <vListInsert>
 800a65a:	e016      	b.n	800a68a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a65c:	2300      	movs	r3, #0
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	2300      	movs	r3, #0
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	2100      	movs	r1, #0
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f7ff fd7c 	bl	800a164 <xTimerGenericCommand>
 800a66c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d10a      	bne.n	800a68a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	603b      	str	r3, [r7, #0]
}
 800a686:	bf00      	nop
 800a688:	e7fe      	b.n	800a688 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a68a:	4b09      	ldr	r3, [pc, #36]	; (800a6b0 <prvSwitchTimerLists+0xc0>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1b1      	bne.n	800a5f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a694:	4b06      	ldr	r3, [pc, #24]	; (800a6b0 <prvSwitchTimerLists+0xc0>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a69a:	4b06      	ldr	r3, [pc, #24]	; (800a6b4 <prvSwitchTimerLists+0xc4>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a04      	ldr	r2, [pc, #16]	; (800a6b0 <prvSwitchTimerLists+0xc0>)
 800a6a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a6a2:	4a04      	ldr	r2, [pc, #16]	; (800a6b4 <prvSwitchTimerLists+0xc4>)
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	6013      	str	r3, [r2, #0]
}
 800a6a8:	bf00      	nop
 800a6aa:	3718      	adds	r7, #24
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	20000df8 	.word	0x20000df8
 800a6b4:	20000dfc 	.word	0x20000dfc

0800a6b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a6be:	f000 f969 	bl	800a994 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a6c2:	4b15      	ldr	r3, [pc, #84]	; (800a718 <prvCheckForValidListAndQueue+0x60>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d120      	bne.n	800a70c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a6ca:	4814      	ldr	r0, [pc, #80]	; (800a71c <prvCheckForValidListAndQueue+0x64>)
 800a6cc:	f7fd fddd 	bl	800828a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a6d0:	4813      	ldr	r0, [pc, #76]	; (800a720 <prvCheckForValidListAndQueue+0x68>)
 800a6d2:	f7fd fdda 	bl	800828a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a6d6:	4b13      	ldr	r3, [pc, #76]	; (800a724 <prvCheckForValidListAndQueue+0x6c>)
 800a6d8:	4a10      	ldr	r2, [pc, #64]	; (800a71c <prvCheckForValidListAndQueue+0x64>)
 800a6da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a6dc:	4b12      	ldr	r3, [pc, #72]	; (800a728 <prvCheckForValidListAndQueue+0x70>)
 800a6de:	4a10      	ldr	r2, [pc, #64]	; (800a720 <prvCheckForValidListAndQueue+0x68>)
 800a6e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	4b11      	ldr	r3, [pc, #68]	; (800a72c <prvCheckForValidListAndQueue+0x74>)
 800a6e8:	4a11      	ldr	r2, [pc, #68]	; (800a730 <prvCheckForValidListAndQueue+0x78>)
 800a6ea:	210c      	movs	r1, #12
 800a6ec:	200a      	movs	r0, #10
 800a6ee:	f7fd fee9 	bl	80084c4 <xQueueGenericCreateStatic>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	4a08      	ldr	r2, [pc, #32]	; (800a718 <prvCheckForValidListAndQueue+0x60>)
 800a6f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a6f8:	4b07      	ldr	r3, [pc, #28]	; (800a718 <prvCheckForValidListAndQueue+0x60>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d005      	beq.n	800a70c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a700:	4b05      	ldr	r3, [pc, #20]	; (800a718 <prvCheckForValidListAndQueue+0x60>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	490b      	ldr	r1, [pc, #44]	; (800a734 <prvCheckForValidListAndQueue+0x7c>)
 800a706:	4618      	mov	r0, r3
 800a708:	f7fe fc5c 	bl	8008fc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a70c:	f000 f972 	bl	800a9f4 <vPortExitCritical>
}
 800a710:	bf00      	nop
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	20000e00 	.word	0x20000e00
 800a71c:	20000dd0 	.word	0x20000dd0
 800a720:	20000de4 	.word	0x20000de4
 800a724:	20000df8 	.word	0x20000df8
 800a728:	20000dfc 	.word	0x20000dfc
 800a72c:	20000e84 	.word	0x20000e84
 800a730:	20000e0c 	.word	0x20000e0c
 800a734:	0800d998 	.word	0x0800d998

0800a738 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	3b04      	subs	r3, #4
 800a748:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a750:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3b04      	subs	r3, #4
 800a756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	f023 0201 	bic.w	r2, r3, #1
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	3b04      	subs	r3, #4
 800a766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a768:	4a0c      	ldr	r2, [pc, #48]	; (800a79c <pxPortInitialiseStack+0x64>)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	3b14      	subs	r3, #20
 800a772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	3b04      	subs	r3, #4
 800a77e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f06f 0202 	mvn.w	r2, #2
 800a786:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	3b20      	subs	r3, #32
 800a78c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a78e:	68fb      	ldr	r3, [r7, #12]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3714      	adds	r7, #20
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr
 800a79c:	0800a7a1 	.word	0x0800a7a1

0800a7a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a7aa:	4b12      	ldr	r3, [pc, #72]	; (800a7f4 <prvTaskExitError+0x54>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b2:	d00a      	beq.n	800a7ca <prvTaskExitError+0x2a>
	__asm volatile
 800a7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b8:	f383 8811 	msr	BASEPRI, r3
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	60fb      	str	r3, [r7, #12]
}
 800a7c6:	bf00      	nop
 800a7c8:	e7fe      	b.n	800a7c8 <prvTaskExitError+0x28>
	__asm volatile
 800a7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	60bb      	str	r3, [r7, #8]
}
 800a7dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a7de:	bf00      	nop
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d0fc      	beq.n	800a7e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a7e6:	bf00      	nop
 800a7e8:	bf00      	nop
 800a7ea:	3714      	adds	r7, #20
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr
 800a7f4:	2000000c 	.word	0x2000000c
	...

0800a800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a800:	4b07      	ldr	r3, [pc, #28]	; (800a820 <pxCurrentTCBConst2>)
 800a802:	6819      	ldr	r1, [r3, #0]
 800a804:	6808      	ldr	r0, [r1, #0]
 800a806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80a:	f380 8809 	msr	PSP, r0
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f04f 0000 	mov.w	r0, #0
 800a816:	f380 8811 	msr	BASEPRI, r0
 800a81a:	4770      	bx	lr
 800a81c:	f3af 8000 	nop.w

0800a820 <pxCurrentTCBConst2>:
 800a820:	20000ca4 	.word	0x20000ca4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a824:	bf00      	nop
 800a826:	bf00      	nop

0800a828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a828:	4808      	ldr	r0, [pc, #32]	; (800a84c <prvPortStartFirstTask+0x24>)
 800a82a:	6800      	ldr	r0, [r0, #0]
 800a82c:	6800      	ldr	r0, [r0, #0]
 800a82e:	f380 8808 	msr	MSP, r0
 800a832:	f04f 0000 	mov.w	r0, #0
 800a836:	f380 8814 	msr	CONTROL, r0
 800a83a:	b662      	cpsie	i
 800a83c:	b661      	cpsie	f
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	df00      	svc	0
 800a848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a84a:	bf00      	nop
 800a84c:	e000ed08 	.word	0xe000ed08

0800a850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b086      	sub	sp, #24
 800a854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a856:	4b46      	ldr	r3, [pc, #280]	; (800a970 <xPortStartScheduler+0x120>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a46      	ldr	r2, [pc, #280]	; (800a974 <xPortStartScheduler+0x124>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d10a      	bne.n	800a876 <xPortStartScheduler+0x26>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	613b      	str	r3, [r7, #16]
}
 800a872:	bf00      	nop
 800a874:	e7fe      	b.n	800a874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a876:	4b3e      	ldr	r3, [pc, #248]	; (800a970 <xPortStartScheduler+0x120>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a3f      	ldr	r2, [pc, #252]	; (800a978 <xPortStartScheduler+0x128>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d10a      	bne.n	800a896 <xPortStartScheduler+0x46>
	__asm volatile
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	60fb      	str	r3, [r7, #12]
}
 800a892:	bf00      	nop
 800a894:	e7fe      	b.n	800a894 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a896:	4b39      	ldr	r3, [pc, #228]	; (800a97c <xPortStartScheduler+0x12c>)
 800a898:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	22ff      	movs	r2, #255	; 0xff
 800a8a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8b0:	78fb      	ldrb	r3, [r7, #3]
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a8b8:	b2da      	uxtb	r2, r3
 800a8ba:	4b31      	ldr	r3, [pc, #196]	; (800a980 <xPortStartScheduler+0x130>)
 800a8bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a8be:	4b31      	ldr	r3, [pc, #196]	; (800a984 <xPortStartScheduler+0x134>)
 800a8c0:	2207      	movs	r2, #7
 800a8c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8c4:	e009      	b.n	800a8da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a8c6:	4b2f      	ldr	r3, [pc, #188]	; (800a984 <xPortStartScheduler+0x134>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	4a2d      	ldr	r2, [pc, #180]	; (800a984 <xPortStartScheduler+0x134>)
 800a8ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8d0:	78fb      	ldrb	r3, [r7, #3]
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8da:	78fb      	ldrb	r3, [r7, #3]
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8e2:	2b80      	cmp	r3, #128	; 0x80
 800a8e4:	d0ef      	beq.n	800a8c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a8e6:	4b27      	ldr	r3, [pc, #156]	; (800a984 <xPortStartScheduler+0x134>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f1c3 0307 	rsb	r3, r3, #7
 800a8ee:	2b04      	cmp	r3, #4
 800a8f0:	d00a      	beq.n	800a908 <xPortStartScheduler+0xb8>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	60bb      	str	r3, [r7, #8]
}
 800a904:	bf00      	nop
 800a906:	e7fe      	b.n	800a906 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a908:	4b1e      	ldr	r3, [pc, #120]	; (800a984 <xPortStartScheduler+0x134>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	021b      	lsls	r3, r3, #8
 800a90e:	4a1d      	ldr	r2, [pc, #116]	; (800a984 <xPortStartScheduler+0x134>)
 800a910:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a912:	4b1c      	ldr	r3, [pc, #112]	; (800a984 <xPortStartScheduler+0x134>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a91a:	4a1a      	ldr	r2, [pc, #104]	; (800a984 <xPortStartScheduler+0x134>)
 800a91c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	b2da      	uxtb	r2, r3
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a926:	4b18      	ldr	r3, [pc, #96]	; (800a988 <xPortStartScheduler+0x138>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a17      	ldr	r2, [pc, #92]	; (800a988 <xPortStartScheduler+0x138>)
 800a92c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a930:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a932:	4b15      	ldr	r3, [pc, #84]	; (800a988 <xPortStartScheduler+0x138>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a14      	ldr	r2, [pc, #80]	; (800a988 <xPortStartScheduler+0x138>)
 800a938:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a93c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a93e:	f000 f8dd 	bl	800aafc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a942:	4b12      	ldr	r3, [pc, #72]	; (800a98c <xPortStartScheduler+0x13c>)
 800a944:	2200      	movs	r2, #0
 800a946:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a948:	f000 f8fc 	bl	800ab44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a94c:	4b10      	ldr	r3, [pc, #64]	; (800a990 <xPortStartScheduler+0x140>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a0f      	ldr	r2, [pc, #60]	; (800a990 <xPortStartScheduler+0x140>)
 800a952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a956:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a958:	f7ff ff66 	bl	800a828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a95c:	f7fe ff30 	bl	80097c0 <vTaskSwitchContext>
	prvTaskExitError();
 800a960:	f7ff ff1e 	bl	800a7a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3718      	adds	r7, #24
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	e000ed00 	.word	0xe000ed00
 800a974:	410fc271 	.word	0x410fc271
 800a978:	410fc270 	.word	0x410fc270
 800a97c:	e000e400 	.word	0xe000e400
 800a980:	20000ecc 	.word	0x20000ecc
 800a984:	20000ed0 	.word	0x20000ed0
 800a988:	e000ed20 	.word	0xe000ed20
 800a98c:	2000000c 	.word	0x2000000c
 800a990:	e000ef34 	.word	0xe000ef34

0800a994 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
	__asm volatile
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	607b      	str	r3, [r7, #4]
}
 800a9ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a9ae:	4b0f      	ldr	r3, [pc, #60]	; (800a9ec <vPortEnterCritical+0x58>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	4a0d      	ldr	r2, [pc, #52]	; (800a9ec <vPortEnterCritical+0x58>)
 800a9b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a9b8:	4b0c      	ldr	r3, [pc, #48]	; (800a9ec <vPortEnterCritical+0x58>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d10f      	bne.n	800a9e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9c0:	4b0b      	ldr	r3, [pc, #44]	; (800a9f0 <vPortEnterCritical+0x5c>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00a      	beq.n	800a9e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ce:	f383 8811 	msr	BASEPRI, r3
 800a9d2:	f3bf 8f6f 	isb	sy
 800a9d6:	f3bf 8f4f 	dsb	sy
 800a9da:	603b      	str	r3, [r7, #0]
}
 800a9dc:	bf00      	nop
 800a9de:	e7fe      	b.n	800a9de <vPortEnterCritical+0x4a>
	}
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	2000000c 	.word	0x2000000c
 800a9f0:	e000ed04 	.word	0xe000ed04

0800a9f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a9fa:	4b12      	ldr	r3, [pc, #72]	; (800aa44 <vPortExitCritical+0x50>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10a      	bne.n	800aa18 <vPortExitCritical+0x24>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	607b      	str	r3, [r7, #4]
}
 800aa14:	bf00      	nop
 800aa16:	e7fe      	b.n	800aa16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa18:	4b0a      	ldr	r3, [pc, #40]	; (800aa44 <vPortExitCritical+0x50>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	4a09      	ldr	r2, [pc, #36]	; (800aa44 <vPortExitCritical+0x50>)
 800aa20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa22:	4b08      	ldr	r3, [pc, #32]	; (800aa44 <vPortExitCritical+0x50>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d105      	bne.n	800aa36 <vPortExitCritical+0x42>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	f383 8811 	msr	BASEPRI, r3
}
 800aa34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa36:	bf00      	nop
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	2000000c 	.word	0x2000000c
	...

0800aa50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa50:	f3ef 8009 	mrs	r0, PSP
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	4b15      	ldr	r3, [pc, #84]	; (800aab0 <pxCurrentTCBConst>)
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	f01e 0f10 	tst.w	lr, #16
 800aa60:	bf08      	it	eq
 800aa62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6a:	6010      	str	r0, [r2, #0]
 800aa6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa74:	f380 8811 	msr	BASEPRI, r0
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f7fe fe9e 	bl	80097c0 <vTaskSwitchContext>
 800aa84:	f04f 0000 	mov.w	r0, #0
 800aa88:	f380 8811 	msr	BASEPRI, r0
 800aa8c:	bc09      	pop	{r0, r3}
 800aa8e:	6819      	ldr	r1, [r3, #0]
 800aa90:	6808      	ldr	r0, [r1, #0]
 800aa92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa96:	f01e 0f10 	tst.w	lr, #16
 800aa9a:	bf08      	it	eq
 800aa9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aaa0:	f380 8809 	msr	PSP, r0
 800aaa4:	f3bf 8f6f 	isb	sy
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	f3af 8000 	nop.w

0800aab0 <pxCurrentTCBConst>:
 800aab0:	20000ca4 	.word	0x20000ca4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aab4:	bf00      	nop
 800aab6:	bf00      	nop

0800aab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	607b      	str	r3, [r7, #4]
}
 800aad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aad2:	f7fe fdbd 	bl	8009650 <xTaskIncrementTick>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d003      	beq.n	800aae4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aadc:	4b06      	ldr	r3, [pc, #24]	; (800aaf8 <SysTick_Handler+0x40>)
 800aade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aae2:	601a      	str	r2, [r3, #0]
 800aae4:	2300      	movs	r3, #0
 800aae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	f383 8811 	msr	BASEPRI, r3
}
 800aaee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aaf0:	bf00      	nop
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	e000ed04 	.word	0xe000ed04

0800aafc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aafc:	b480      	push	{r7}
 800aafe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab00:	4b0b      	ldr	r3, [pc, #44]	; (800ab30 <vPortSetupTimerInterrupt+0x34>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab06:	4b0b      	ldr	r3, [pc, #44]	; (800ab34 <vPortSetupTimerInterrupt+0x38>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab0c:	4b0a      	ldr	r3, [pc, #40]	; (800ab38 <vPortSetupTimerInterrupt+0x3c>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a0a      	ldr	r2, [pc, #40]	; (800ab3c <vPortSetupTimerInterrupt+0x40>)
 800ab12:	fba2 2303 	umull	r2, r3, r2, r3
 800ab16:	099b      	lsrs	r3, r3, #6
 800ab18:	4a09      	ldr	r2, [pc, #36]	; (800ab40 <vPortSetupTimerInterrupt+0x44>)
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab1e:	4b04      	ldr	r3, [pc, #16]	; (800ab30 <vPortSetupTimerInterrupt+0x34>)
 800ab20:	2207      	movs	r2, #7
 800ab22:	601a      	str	r2, [r3, #0]
}
 800ab24:	bf00      	nop
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	e000e010 	.word	0xe000e010
 800ab34:	e000e018 	.word	0xe000e018
 800ab38:	20000000 	.word	0x20000000
 800ab3c:	10624dd3 	.word	0x10624dd3
 800ab40:	e000e014 	.word	0xe000e014

0800ab44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab54 <vPortEnableVFP+0x10>
 800ab48:	6801      	ldr	r1, [r0, #0]
 800ab4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab4e:	6001      	str	r1, [r0, #0]
 800ab50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab52:	bf00      	nop
 800ab54:	e000ed88 	.word	0xe000ed88

0800ab58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab5e:	f3ef 8305 	mrs	r3, IPSR
 800ab62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2b0f      	cmp	r3, #15
 800ab68:	d914      	bls.n	800ab94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab6a:	4a17      	ldr	r2, [pc, #92]	; (800abc8 <vPortValidateInterruptPriority+0x70>)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4413      	add	r3, r2
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab74:	4b15      	ldr	r3, [pc, #84]	; (800abcc <vPortValidateInterruptPriority+0x74>)
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	7afa      	ldrb	r2, [r7, #11]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d20a      	bcs.n	800ab94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	607b      	str	r3, [r7, #4]
}
 800ab90:	bf00      	nop
 800ab92:	e7fe      	b.n	800ab92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab94:	4b0e      	ldr	r3, [pc, #56]	; (800abd0 <vPortValidateInterruptPriority+0x78>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab9c:	4b0d      	ldr	r3, [pc, #52]	; (800abd4 <vPortValidateInterruptPriority+0x7c>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d90a      	bls.n	800abba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba8:	f383 8811 	msr	BASEPRI, r3
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	603b      	str	r3, [r7, #0]
}
 800abb6:	bf00      	nop
 800abb8:	e7fe      	b.n	800abb8 <vPortValidateInterruptPriority+0x60>
	}
 800abba:	bf00      	nop
 800abbc:	3714      	adds	r7, #20
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	e000e3f0 	.word	0xe000e3f0
 800abcc:	20000ecc 	.word	0x20000ecc
 800abd0:	e000ed0c 	.word	0xe000ed0c
 800abd4:	20000ed0 	.word	0x20000ed0

0800abd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08a      	sub	sp, #40	; 0x28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800abe0:	2300      	movs	r3, #0
 800abe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800abe4:	f7fe fc7a 	bl	80094dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800abe8:	4b5b      	ldr	r3, [pc, #364]	; (800ad58 <pvPortMalloc+0x180>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d101      	bne.n	800abf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abf0:	f000 f920 	bl	800ae34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abf4:	4b59      	ldr	r3, [pc, #356]	; (800ad5c <pvPortMalloc+0x184>)
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4013      	ands	r3, r2
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f040 8093 	bne.w	800ad28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d01d      	beq.n	800ac44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ac08:	2208      	movs	r2, #8
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f003 0307 	and.w	r3, r3, #7
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d014      	beq.n	800ac44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f023 0307 	bic.w	r3, r3, #7
 800ac20:	3308      	adds	r3, #8
 800ac22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f003 0307 	and.w	r3, r3, #7
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00a      	beq.n	800ac44 <pvPortMalloc+0x6c>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	617b      	str	r3, [r7, #20]
}
 800ac40:	bf00      	nop
 800ac42:	e7fe      	b.n	800ac42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d06e      	beq.n	800ad28 <pvPortMalloc+0x150>
 800ac4a:	4b45      	ldr	r3, [pc, #276]	; (800ad60 <pvPortMalloc+0x188>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d869      	bhi.n	800ad28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac54:	4b43      	ldr	r3, [pc, #268]	; (800ad64 <pvPortMalloc+0x18c>)
 800ac56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac58:	4b42      	ldr	r3, [pc, #264]	; (800ad64 <pvPortMalloc+0x18c>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac5e:	e004      	b.n	800ac6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ac60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d903      	bls.n	800ac7c <pvPortMalloc+0xa4>
 800ac74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1f1      	bne.n	800ac60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac7c:	4b36      	ldr	r3, [pc, #216]	; (800ad58 <pvPortMalloc+0x180>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d050      	beq.n	800ad28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac86:	6a3b      	ldr	r3, [r7, #32]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2208      	movs	r2, #8
 800ac8c:	4413      	add	r3, r2
 800ac8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	6a3b      	ldr	r3, [r7, #32]
 800ac96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9a:	685a      	ldr	r2, [r3, #4]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	1ad2      	subs	r2, r2, r3
 800aca0:	2308      	movs	r3, #8
 800aca2:	005b      	lsls	r3, r3, #1
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d91f      	bls.n	800ace8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4413      	add	r3, r2
 800acae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	f003 0307 	and.w	r3, r3, #7
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00a      	beq.n	800acd0 <pvPortMalloc+0xf8>
	__asm volatile
 800acba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	613b      	str	r3, [r7, #16]
}
 800accc:	bf00      	nop
 800acce:	e7fe      	b.n	800acce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800acd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	1ad2      	subs	r2, r2, r3
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ace2:	69b8      	ldr	r0, [r7, #24]
 800ace4:	f000 f908 	bl	800aef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ace8:	4b1d      	ldr	r3, [pc, #116]	; (800ad60 <pvPortMalloc+0x188>)
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	4a1b      	ldr	r2, [pc, #108]	; (800ad60 <pvPortMalloc+0x188>)
 800acf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acf6:	4b1a      	ldr	r3, [pc, #104]	; (800ad60 <pvPortMalloc+0x188>)
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	4b1b      	ldr	r3, [pc, #108]	; (800ad68 <pvPortMalloc+0x190>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d203      	bcs.n	800ad0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad02:	4b17      	ldr	r3, [pc, #92]	; (800ad60 <pvPortMalloc+0x188>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a18      	ldr	r2, [pc, #96]	; (800ad68 <pvPortMalloc+0x190>)
 800ad08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	4b13      	ldr	r3, [pc, #76]	; (800ad5c <pvPortMalloc+0x184>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	431a      	orrs	r2, r3
 800ad14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ad1e:	4b13      	ldr	r3, [pc, #76]	; (800ad6c <pvPortMalloc+0x194>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3301      	adds	r3, #1
 800ad24:	4a11      	ldr	r2, [pc, #68]	; (800ad6c <pvPortMalloc+0x194>)
 800ad26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad28:	f7fe fbe6 	bl	80094f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	f003 0307 	and.w	r3, r3, #7
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00a      	beq.n	800ad4c <pvPortMalloc+0x174>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	60fb      	str	r3, [r7, #12]
}
 800ad48:	bf00      	nop
 800ad4a:	e7fe      	b.n	800ad4a <pvPortMalloc+0x172>
	return pvReturn;
 800ad4c:	69fb      	ldr	r3, [r7, #28]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3728      	adds	r7, #40	; 0x28
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20004adc 	.word	0x20004adc
 800ad5c:	20004af0 	.word	0x20004af0
 800ad60:	20004ae0 	.word	0x20004ae0
 800ad64:	20004ad4 	.word	0x20004ad4
 800ad68:	20004ae4 	.word	0x20004ae4
 800ad6c:	20004ae8 	.word	0x20004ae8

0800ad70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d04d      	beq.n	800ae1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad82:	2308      	movs	r3, #8
 800ad84:	425b      	negs	r3, r3
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	4413      	add	r3, r2
 800ad8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	685a      	ldr	r2, [r3, #4]
 800ad94:	4b24      	ldr	r3, [pc, #144]	; (800ae28 <vPortFree+0xb8>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4013      	ands	r3, r2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d10a      	bne.n	800adb4 <vPortFree+0x44>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	60fb      	str	r3, [r7, #12]
}
 800adb0:	bf00      	nop
 800adb2:	e7fe      	b.n	800adb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00a      	beq.n	800add2 <vPortFree+0x62>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	60bb      	str	r3, [r7, #8]
}
 800adce:	bf00      	nop
 800add0:	e7fe      	b.n	800add0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	685a      	ldr	r2, [r3, #4]
 800add6:	4b14      	ldr	r3, [pc, #80]	; (800ae28 <vPortFree+0xb8>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4013      	ands	r3, r2
 800addc:	2b00      	cmp	r3, #0
 800adde:	d01e      	beq.n	800ae1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d11a      	bne.n	800ae1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	685a      	ldr	r2, [r3, #4]
 800adec:	4b0e      	ldr	r3, [pc, #56]	; (800ae28 <vPortFree+0xb8>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	43db      	mvns	r3, r3
 800adf2:	401a      	ands	r2, r3
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800adf8:	f7fe fb70 	bl	80094dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	4b0a      	ldr	r3, [pc, #40]	; (800ae2c <vPortFree+0xbc>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4413      	add	r3, r2
 800ae06:	4a09      	ldr	r2, [pc, #36]	; (800ae2c <vPortFree+0xbc>)
 800ae08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae0a:	6938      	ldr	r0, [r7, #16]
 800ae0c:	f000 f874 	bl	800aef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ae10:	4b07      	ldr	r3, [pc, #28]	; (800ae30 <vPortFree+0xc0>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	3301      	adds	r3, #1
 800ae16:	4a06      	ldr	r2, [pc, #24]	; (800ae30 <vPortFree+0xc0>)
 800ae18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ae1a:	f7fe fb6d 	bl	80094f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae1e:	bf00      	nop
 800ae20:	3718      	adds	r7, #24
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	20004af0 	.word	0x20004af0
 800ae2c:	20004ae0 	.word	0x20004ae0
 800ae30:	20004aec 	.word	0x20004aec

0800ae34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae34:	b480      	push	{r7}
 800ae36:	b085      	sub	sp, #20
 800ae38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ae3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae40:	4b27      	ldr	r3, [pc, #156]	; (800aee0 <prvHeapInit+0xac>)
 800ae42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f003 0307 	and.w	r3, r3, #7
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00c      	beq.n	800ae68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	3307      	adds	r3, #7
 800ae52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f023 0307 	bic.w	r3, r3, #7
 800ae5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae5c:	68ba      	ldr	r2, [r7, #8]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	4a1f      	ldr	r2, [pc, #124]	; (800aee0 <prvHeapInit+0xac>)
 800ae64:	4413      	add	r3, r2
 800ae66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae6c:	4a1d      	ldr	r2, [pc, #116]	; (800aee4 <prvHeapInit+0xb0>)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae72:	4b1c      	ldr	r3, [pc, #112]	; (800aee4 <prvHeapInit+0xb0>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae80:	2208      	movs	r2, #8
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	1a9b      	subs	r3, r3, r2
 800ae86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f023 0307 	bic.w	r3, r3, #7
 800ae8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	4a15      	ldr	r2, [pc, #84]	; (800aee8 <prvHeapInit+0xb4>)
 800ae94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae96:	4b14      	ldr	r3, [pc, #80]	; (800aee8 <prvHeapInit+0xb4>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae9e:	4b12      	ldr	r3, [pc, #72]	; (800aee8 <prvHeapInit+0xb4>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2200      	movs	r2, #0
 800aea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	1ad2      	subs	r2, r2, r3
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aeb4:	4b0c      	ldr	r3, [pc, #48]	; (800aee8 <prvHeapInit+0xb4>)
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	4a0a      	ldr	r2, [pc, #40]	; (800aeec <prvHeapInit+0xb8>)
 800aec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	4a09      	ldr	r2, [pc, #36]	; (800aef0 <prvHeapInit+0xbc>)
 800aeca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aecc:	4b09      	ldr	r3, [pc, #36]	; (800aef4 <prvHeapInit+0xc0>)
 800aece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aed2:	601a      	str	r2, [r3, #0]
}
 800aed4:	bf00      	nop
 800aed6:	3714      	adds	r7, #20
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr
 800aee0:	20000ed4 	.word	0x20000ed4
 800aee4:	20004ad4 	.word	0x20004ad4
 800aee8:	20004adc 	.word	0x20004adc
 800aeec:	20004ae4 	.word	0x20004ae4
 800aef0:	20004ae0 	.word	0x20004ae0
 800aef4:	20004af0 	.word	0x20004af0

0800aef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aef8:	b480      	push	{r7}
 800aefa:	b085      	sub	sp, #20
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af00:	4b28      	ldr	r3, [pc, #160]	; (800afa4 <prvInsertBlockIntoFreeList+0xac>)
 800af02:	60fb      	str	r3, [r7, #12]
 800af04:	e002      	b.n	800af0c <prvInsertBlockIntoFreeList+0x14>
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	60fb      	str	r3, [r7, #12]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	429a      	cmp	r2, r3
 800af14:	d8f7      	bhi.n	800af06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	68ba      	ldr	r2, [r7, #8]
 800af20:	4413      	add	r3, r2
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	429a      	cmp	r2, r3
 800af26:	d108      	bne.n	800af3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	685a      	ldr	r2, [r3, #4]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	441a      	add	r2, r3
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	68ba      	ldr	r2, [r7, #8]
 800af44:	441a      	add	r2, r3
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d118      	bne.n	800af80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	4b15      	ldr	r3, [pc, #84]	; (800afa8 <prvInsertBlockIntoFreeList+0xb0>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	429a      	cmp	r2, r3
 800af58:	d00d      	beq.n	800af76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	685a      	ldr	r2, [r3, #4]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	441a      	add	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	601a      	str	r2, [r3, #0]
 800af74:	e008      	b.n	800af88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af76:	4b0c      	ldr	r3, [pc, #48]	; (800afa8 <prvInsertBlockIntoFreeList+0xb0>)
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	601a      	str	r2, [r3, #0]
 800af7e:	e003      	b.n	800af88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d002      	beq.n	800af96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af96:	bf00      	nop
 800af98:	3714      	adds	r7, #20
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	20004ad4 	.word	0x20004ad4
 800afa8:	20004adc 	.word	0x20004adc

0800afac <__cvt>:
 800afac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afb0:	ec55 4b10 	vmov	r4, r5, d0
 800afb4:	2d00      	cmp	r5, #0
 800afb6:	460e      	mov	r6, r1
 800afb8:	4619      	mov	r1, r3
 800afba:	462b      	mov	r3, r5
 800afbc:	bfbb      	ittet	lt
 800afbe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800afc2:	461d      	movlt	r5, r3
 800afc4:	2300      	movge	r3, #0
 800afc6:	232d      	movlt	r3, #45	; 0x2d
 800afc8:	700b      	strb	r3, [r1, #0]
 800afca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afcc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800afd0:	4691      	mov	r9, r2
 800afd2:	f023 0820 	bic.w	r8, r3, #32
 800afd6:	bfbc      	itt	lt
 800afd8:	4622      	movlt	r2, r4
 800afda:	4614      	movlt	r4, r2
 800afdc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800afe0:	d005      	beq.n	800afee <__cvt+0x42>
 800afe2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800afe6:	d100      	bne.n	800afea <__cvt+0x3e>
 800afe8:	3601      	adds	r6, #1
 800afea:	2102      	movs	r1, #2
 800afec:	e000      	b.n	800aff0 <__cvt+0x44>
 800afee:	2103      	movs	r1, #3
 800aff0:	ab03      	add	r3, sp, #12
 800aff2:	9301      	str	r3, [sp, #4]
 800aff4:	ab02      	add	r3, sp, #8
 800aff6:	9300      	str	r3, [sp, #0]
 800aff8:	ec45 4b10 	vmov	d0, r4, r5
 800affc:	4653      	mov	r3, sl
 800affe:	4632      	mov	r2, r6
 800b000:	f000 fe56 	bl	800bcb0 <_dtoa_r>
 800b004:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b008:	4607      	mov	r7, r0
 800b00a:	d102      	bne.n	800b012 <__cvt+0x66>
 800b00c:	f019 0f01 	tst.w	r9, #1
 800b010:	d022      	beq.n	800b058 <__cvt+0xac>
 800b012:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b016:	eb07 0906 	add.w	r9, r7, r6
 800b01a:	d110      	bne.n	800b03e <__cvt+0x92>
 800b01c:	783b      	ldrb	r3, [r7, #0]
 800b01e:	2b30      	cmp	r3, #48	; 0x30
 800b020:	d10a      	bne.n	800b038 <__cvt+0x8c>
 800b022:	2200      	movs	r2, #0
 800b024:	2300      	movs	r3, #0
 800b026:	4620      	mov	r0, r4
 800b028:	4629      	mov	r1, r5
 800b02a:	f7f5 fd55 	bl	8000ad8 <__aeabi_dcmpeq>
 800b02e:	b918      	cbnz	r0, 800b038 <__cvt+0x8c>
 800b030:	f1c6 0601 	rsb	r6, r6, #1
 800b034:	f8ca 6000 	str.w	r6, [sl]
 800b038:	f8da 3000 	ldr.w	r3, [sl]
 800b03c:	4499      	add	r9, r3
 800b03e:	2200      	movs	r2, #0
 800b040:	2300      	movs	r3, #0
 800b042:	4620      	mov	r0, r4
 800b044:	4629      	mov	r1, r5
 800b046:	f7f5 fd47 	bl	8000ad8 <__aeabi_dcmpeq>
 800b04a:	b108      	cbz	r0, 800b050 <__cvt+0xa4>
 800b04c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b050:	2230      	movs	r2, #48	; 0x30
 800b052:	9b03      	ldr	r3, [sp, #12]
 800b054:	454b      	cmp	r3, r9
 800b056:	d307      	bcc.n	800b068 <__cvt+0xbc>
 800b058:	9b03      	ldr	r3, [sp, #12]
 800b05a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b05c:	1bdb      	subs	r3, r3, r7
 800b05e:	4638      	mov	r0, r7
 800b060:	6013      	str	r3, [r2, #0]
 800b062:	b004      	add	sp, #16
 800b064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b068:	1c59      	adds	r1, r3, #1
 800b06a:	9103      	str	r1, [sp, #12]
 800b06c:	701a      	strb	r2, [r3, #0]
 800b06e:	e7f0      	b.n	800b052 <__cvt+0xa6>

0800b070 <__exponent>:
 800b070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b072:	4603      	mov	r3, r0
 800b074:	2900      	cmp	r1, #0
 800b076:	bfb8      	it	lt
 800b078:	4249      	neglt	r1, r1
 800b07a:	f803 2b02 	strb.w	r2, [r3], #2
 800b07e:	bfb4      	ite	lt
 800b080:	222d      	movlt	r2, #45	; 0x2d
 800b082:	222b      	movge	r2, #43	; 0x2b
 800b084:	2909      	cmp	r1, #9
 800b086:	7042      	strb	r2, [r0, #1]
 800b088:	dd2a      	ble.n	800b0e0 <__exponent+0x70>
 800b08a:	f10d 0207 	add.w	r2, sp, #7
 800b08e:	4617      	mov	r7, r2
 800b090:	260a      	movs	r6, #10
 800b092:	4694      	mov	ip, r2
 800b094:	fb91 f5f6 	sdiv	r5, r1, r6
 800b098:	fb06 1415 	mls	r4, r6, r5, r1
 800b09c:	3430      	adds	r4, #48	; 0x30
 800b09e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b0a2:	460c      	mov	r4, r1
 800b0a4:	2c63      	cmp	r4, #99	; 0x63
 800b0a6:	f102 32ff 	add.w	r2, r2, #4294967295
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	dcf1      	bgt.n	800b092 <__exponent+0x22>
 800b0ae:	3130      	adds	r1, #48	; 0x30
 800b0b0:	f1ac 0402 	sub.w	r4, ip, #2
 800b0b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b0b8:	1c41      	adds	r1, r0, #1
 800b0ba:	4622      	mov	r2, r4
 800b0bc:	42ba      	cmp	r2, r7
 800b0be:	d30a      	bcc.n	800b0d6 <__exponent+0x66>
 800b0c0:	f10d 0209 	add.w	r2, sp, #9
 800b0c4:	eba2 020c 	sub.w	r2, r2, ip
 800b0c8:	42bc      	cmp	r4, r7
 800b0ca:	bf88      	it	hi
 800b0cc:	2200      	movhi	r2, #0
 800b0ce:	4413      	add	r3, r2
 800b0d0:	1a18      	subs	r0, r3, r0
 800b0d2:	b003      	add	sp, #12
 800b0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b0da:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b0de:	e7ed      	b.n	800b0bc <__exponent+0x4c>
 800b0e0:	2330      	movs	r3, #48	; 0x30
 800b0e2:	3130      	adds	r1, #48	; 0x30
 800b0e4:	7083      	strb	r3, [r0, #2]
 800b0e6:	70c1      	strb	r1, [r0, #3]
 800b0e8:	1d03      	adds	r3, r0, #4
 800b0ea:	e7f1      	b.n	800b0d0 <__exponent+0x60>

0800b0ec <_printf_float>:
 800b0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f0:	ed2d 8b02 	vpush	{d8}
 800b0f4:	b08d      	sub	sp, #52	; 0x34
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b0fc:	4616      	mov	r6, r2
 800b0fe:	461f      	mov	r7, r3
 800b100:	4605      	mov	r5, r0
 800b102:	f000 fcc7 	bl	800ba94 <_localeconv_r>
 800b106:	f8d0 a000 	ldr.w	sl, [r0]
 800b10a:	4650      	mov	r0, sl
 800b10c:	f7f5 f8b8 	bl	8000280 <strlen>
 800b110:	2300      	movs	r3, #0
 800b112:	930a      	str	r3, [sp, #40]	; 0x28
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	9305      	str	r3, [sp, #20]
 800b118:	f8d8 3000 	ldr.w	r3, [r8]
 800b11c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b120:	3307      	adds	r3, #7
 800b122:	f023 0307 	bic.w	r3, r3, #7
 800b126:	f103 0208 	add.w	r2, r3, #8
 800b12a:	f8c8 2000 	str.w	r2, [r8]
 800b12e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b132:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b136:	9307      	str	r3, [sp, #28]
 800b138:	f8cd 8018 	str.w	r8, [sp, #24]
 800b13c:	ee08 0a10 	vmov	s16, r0
 800b140:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b144:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b148:	4b9e      	ldr	r3, [pc, #632]	; (800b3c4 <_printf_float+0x2d8>)
 800b14a:	f04f 32ff 	mov.w	r2, #4294967295
 800b14e:	f7f5 fcf5 	bl	8000b3c <__aeabi_dcmpun>
 800b152:	bb88      	cbnz	r0, 800b1b8 <_printf_float+0xcc>
 800b154:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b158:	4b9a      	ldr	r3, [pc, #616]	; (800b3c4 <_printf_float+0x2d8>)
 800b15a:	f04f 32ff 	mov.w	r2, #4294967295
 800b15e:	f7f5 fccf 	bl	8000b00 <__aeabi_dcmple>
 800b162:	bb48      	cbnz	r0, 800b1b8 <_printf_float+0xcc>
 800b164:	2200      	movs	r2, #0
 800b166:	2300      	movs	r3, #0
 800b168:	4640      	mov	r0, r8
 800b16a:	4649      	mov	r1, r9
 800b16c:	f7f5 fcbe 	bl	8000aec <__aeabi_dcmplt>
 800b170:	b110      	cbz	r0, 800b178 <_printf_float+0x8c>
 800b172:	232d      	movs	r3, #45	; 0x2d
 800b174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b178:	4a93      	ldr	r2, [pc, #588]	; (800b3c8 <_printf_float+0x2dc>)
 800b17a:	4b94      	ldr	r3, [pc, #592]	; (800b3cc <_printf_float+0x2e0>)
 800b17c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b180:	bf94      	ite	ls
 800b182:	4690      	movls	r8, r2
 800b184:	4698      	movhi	r8, r3
 800b186:	2303      	movs	r3, #3
 800b188:	6123      	str	r3, [r4, #16]
 800b18a:	9b05      	ldr	r3, [sp, #20]
 800b18c:	f023 0304 	bic.w	r3, r3, #4
 800b190:	6023      	str	r3, [r4, #0]
 800b192:	f04f 0900 	mov.w	r9, #0
 800b196:	9700      	str	r7, [sp, #0]
 800b198:	4633      	mov	r3, r6
 800b19a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b19c:	4621      	mov	r1, r4
 800b19e:	4628      	mov	r0, r5
 800b1a0:	f000 f9da 	bl	800b558 <_printf_common>
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	f040 8090 	bne.w	800b2ca <_printf_float+0x1de>
 800b1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ae:	b00d      	add	sp, #52	; 0x34
 800b1b0:	ecbd 8b02 	vpop	{d8}
 800b1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b8:	4642      	mov	r2, r8
 800b1ba:	464b      	mov	r3, r9
 800b1bc:	4640      	mov	r0, r8
 800b1be:	4649      	mov	r1, r9
 800b1c0:	f7f5 fcbc 	bl	8000b3c <__aeabi_dcmpun>
 800b1c4:	b140      	cbz	r0, 800b1d8 <_printf_float+0xec>
 800b1c6:	464b      	mov	r3, r9
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	bfbc      	itt	lt
 800b1cc:	232d      	movlt	r3, #45	; 0x2d
 800b1ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b1d2:	4a7f      	ldr	r2, [pc, #508]	; (800b3d0 <_printf_float+0x2e4>)
 800b1d4:	4b7f      	ldr	r3, [pc, #508]	; (800b3d4 <_printf_float+0x2e8>)
 800b1d6:	e7d1      	b.n	800b17c <_printf_float+0x90>
 800b1d8:	6863      	ldr	r3, [r4, #4]
 800b1da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b1de:	9206      	str	r2, [sp, #24]
 800b1e0:	1c5a      	adds	r2, r3, #1
 800b1e2:	d13f      	bne.n	800b264 <_printf_float+0x178>
 800b1e4:	2306      	movs	r3, #6
 800b1e6:	6063      	str	r3, [r4, #4]
 800b1e8:	9b05      	ldr	r3, [sp, #20]
 800b1ea:	6861      	ldr	r1, [r4, #4]
 800b1ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	9303      	str	r3, [sp, #12]
 800b1f4:	ab0a      	add	r3, sp, #40	; 0x28
 800b1f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b1fa:	ab09      	add	r3, sp, #36	; 0x24
 800b1fc:	ec49 8b10 	vmov	d0, r8, r9
 800b200:	9300      	str	r3, [sp, #0]
 800b202:	6022      	str	r2, [r4, #0]
 800b204:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b208:	4628      	mov	r0, r5
 800b20a:	f7ff fecf 	bl	800afac <__cvt>
 800b20e:	9b06      	ldr	r3, [sp, #24]
 800b210:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b212:	2b47      	cmp	r3, #71	; 0x47
 800b214:	4680      	mov	r8, r0
 800b216:	d108      	bne.n	800b22a <_printf_float+0x13e>
 800b218:	1cc8      	adds	r0, r1, #3
 800b21a:	db02      	blt.n	800b222 <_printf_float+0x136>
 800b21c:	6863      	ldr	r3, [r4, #4]
 800b21e:	4299      	cmp	r1, r3
 800b220:	dd41      	ble.n	800b2a6 <_printf_float+0x1ba>
 800b222:	f1ab 0302 	sub.w	r3, fp, #2
 800b226:	fa5f fb83 	uxtb.w	fp, r3
 800b22a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b22e:	d820      	bhi.n	800b272 <_printf_float+0x186>
 800b230:	3901      	subs	r1, #1
 800b232:	465a      	mov	r2, fp
 800b234:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b238:	9109      	str	r1, [sp, #36]	; 0x24
 800b23a:	f7ff ff19 	bl	800b070 <__exponent>
 800b23e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b240:	1813      	adds	r3, r2, r0
 800b242:	2a01      	cmp	r2, #1
 800b244:	4681      	mov	r9, r0
 800b246:	6123      	str	r3, [r4, #16]
 800b248:	dc02      	bgt.n	800b250 <_printf_float+0x164>
 800b24a:	6822      	ldr	r2, [r4, #0]
 800b24c:	07d2      	lsls	r2, r2, #31
 800b24e:	d501      	bpl.n	800b254 <_printf_float+0x168>
 800b250:	3301      	adds	r3, #1
 800b252:	6123      	str	r3, [r4, #16]
 800b254:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d09c      	beq.n	800b196 <_printf_float+0xaa>
 800b25c:	232d      	movs	r3, #45	; 0x2d
 800b25e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b262:	e798      	b.n	800b196 <_printf_float+0xaa>
 800b264:	9a06      	ldr	r2, [sp, #24]
 800b266:	2a47      	cmp	r2, #71	; 0x47
 800b268:	d1be      	bne.n	800b1e8 <_printf_float+0xfc>
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1bc      	bne.n	800b1e8 <_printf_float+0xfc>
 800b26e:	2301      	movs	r3, #1
 800b270:	e7b9      	b.n	800b1e6 <_printf_float+0xfa>
 800b272:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b276:	d118      	bne.n	800b2aa <_printf_float+0x1be>
 800b278:	2900      	cmp	r1, #0
 800b27a:	6863      	ldr	r3, [r4, #4]
 800b27c:	dd0b      	ble.n	800b296 <_printf_float+0x1aa>
 800b27e:	6121      	str	r1, [r4, #16]
 800b280:	b913      	cbnz	r3, 800b288 <_printf_float+0x19c>
 800b282:	6822      	ldr	r2, [r4, #0]
 800b284:	07d0      	lsls	r0, r2, #31
 800b286:	d502      	bpl.n	800b28e <_printf_float+0x1a2>
 800b288:	3301      	adds	r3, #1
 800b28a:	440b      	add	r3, r1
 800b28c:	6123      	str	r3, [r4, #16]
 800b28e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b290:	f04f 0900 	mov.w	r9, #0
 800b294:	e7de      	b.n	800b254 <_printf_float+0x168>
 800b296:	b913      	cbnz	r3, 800b29e <_printf_float+0x1b2>
 800b298:	6822      	ldr	r2, [r4, #0]
 800b29a:	07d2      	lsls	r2, r2, #31
 800b29c:	d501      	bpl.n	800b2a2 <_printf_float+0x1b6>
 800b29e:	3302      	adds	r3, #2
 800b2a0:	e7f4      	b.n	800b28c <_printf_float+0x1a0>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e7f2      	b.n	800b28c <_printf_float+0x1a0>
 800b2a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b2aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2ac:	4299      	cmp	r1, r3
 800b2ae:	db05      	blt.n	800b2bc <_printf_float+0x1d0>
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	6121      	str	r1, [r4, #16]
 800b2b4:	07d8      	lsls	r0, r3, #31
 800b2b6:	d5ea      	bpl.n	800b28e <_printf_float+0x1a2>
 800b2b8:	1c4b      	adds	r3, r1, #1
 800b2ba:	e7e7      	b.n	800b28c <_printf_float+0x1a0>
 800b2bc:	2900      	cmp	r1, #0
 800b2be:	bfd4      	ite	le
 800b2c0:	f1c1 0202 	rsble	r2, r1, #2
 800b2c4:	2201      	movgt	r2, #1
 800b2c6:	4413      	add	r3, r2
 800b2c8:	e7e0      	b.n	800b28c <_printf_float+0x1a0>
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	055a      	lsls	r2, r3, #21
 800b2ce:	d407      	bmi.n	800b2e0 <_printf_float+0x1f4>
 800b2d0:	6923      	ldr	r3, [r4, #16]
 800b2d2:	4642      	mov	r2, r8
 800b2d4:	4631      	mov	r1, r6
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	47b8      	blx	r7
 800b2da:	3001      	adds	r0, #1
 800b2dc:	d12c      	bne.n	800b338 <_printf_float+0x24c>
 800b2de:	e764      	b.n	800b1aa <_printf_float+0xbe>
 800b2e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2e4:	f240 80e0 	bls.w	800b4a8 <_printf_float+0x3bc>
 800b2e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	f7f5 fbf2 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d034      	beq.n	800b362 <_printf_float+0x276>
 800b2f8:	4a37      	ldr	r2, [pc, #220]	; (800b3d8 <_printf_float+0x2ec>)
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	4631      	mov	r1, r6
 800b2fe:	4628      	mov	r0, r5
 800b300:	47b8      	blx	r7
 800b302:	3001      	adds	r0, #1
 800b304:	f43f af51 	beq.w	800b1aa <_printf_float+0xbe>
 800b308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b30c:	429a      	cmp	r2, r3
 800b30e:	db02      	blt.n	800b316 <_printf_float+0x22a>
 800b310:	6823      	ldr	r3, [r4, #0]
 800b312:	07d8      	lsls	r0, r3, #31
 800b314:	d510      	bpl.n	800b338 <_printf_float+0x24c>
 800b316:	ee18 3a10 	vmov	r3, s16
 800b31a:	4652      	mov	r2, sl
 800b31c:	4631      	mov	r1, r6
 800b31e:	4628      	mov	r0, r5
 800b320:	47b8      	blx	r7
 800b322:	3001      	adds	r0, #1
 800b324:	f43f af41 	beq.w	800b1aa <_printf_float+0xbe>
 800b328:	f04f 0800 	mov.w	r8, #0
 800b32c:	f104 091a 	add.w	r9, r4, #26
 800b330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b332:	3b01      	subs	r3, #1
 800b334:	4543      	cmp	r3, r8
 800b336:	dc09      	bgt.n	800b34c <_printf_float+0x260>
 800b338:	6823      	ldr	r3, [r4, #0]
 800b33a:	079b      	lsls	r3, r3, #30
 800b33c:	f100 8107 	bmi.w	800b54e <_printf_float+0x462>
 800b340:	68e0      	ldr	r0, [r4, #12]
 800b342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b344:	4298      	cmp	r0, r3
 800b346:	bfb8      	it	lt
 800b348:	4618      	movlt	r0, r3
 800b34a:	e730      	b.n	800b1ae <_printf_float+0xc2>
 800b34c:	2301      	movs	r3, #1
 800b34e:	464a      	mov	r2, r9
 800b350:	4631      	mov	r1, r6
 800b352:	4628      	mov	r0, r5
 800b354:	47b8      	blx	r7
 800b356:	3001      	adds	r0, #1
 800b358:	f43f af27 	beq.w	800b1aa <_printf_float+0xbe>
 800b35c:	f108 0801 	add.w	r8, r8, #1
 800b360:	e7e6      	b.n	800b330 <_printf_float+0x244>
 800b362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b364:	2b00      	cmp	r3, #0
 800b366:	dc39      	bgt.n	800b3dc <_printf_float+0x2f0>
 800b368:	4a1b      	ldr	r2, [pc, #108]	; (800b3d8 <_printf_float+0x2ec>)
 800b36a:	2301      	movs	r3, #1
 800b36c:	4631      	mov	r1, r6
 800b36e:	4628      	mov	r0, r5
 800b370:	47b8      	blx	r7
 800b372:	3001      	adds	r0, #1
 800b374:	f43f af19 	beq.w	800b1aa <_printf_float+0xbe>
 800b378:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b37c:	4313      	orrs	r3, r2
 800b37e:	d102      	bne.n	800b386 <_printf_float+0x29a>
 800b380:	6823      	ldr	r3, [r4, #0]
 800b382:	07d9      	lsls	r1, r3, #31
 800b384:	d5d8      	bpl.n	800b338 <_printf_float+0x24c>
 800b386:	ee18 3a10 	vmov	r3, s16
 800b38a:	4652      	mov	r2, sl
 800b38c:	4631      	mov	r1, r6
 800b38e:	4628      	mov	r0, r5
 800b390:	47b8      	blx	r7
 800b392:	3001      	adds	r0, #1
 800b394:	f43f af09 	beq.w	800b1aa <_printf_float+0xbe>
 800b398:	f04f 0900 	mov.w	r9, #0
 800b39c:	f104 0a1a 	add.w	sl, r4, #26
 800b3a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3a2:	425b      	negs	r3, r3
 800b3a4:	454b      	cmp	r3, r9
 800b3a6:	dc01      	bgt.n	800b3ac <_printf_float+0x2c0>
 800b3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3aa:	e792      	b.n	800b2d2 <_printf_float+0x1e6>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	4652      	mov	r2, sl
 800b3b0:	4631      	mov	r1, r6
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	47b8      	blx	r7
 800b3b6:	3001      	adds	r0, #1
 800b3b8:	f43f aef7 	beq.w	800b1aa <_printf_float+0xbe>
 800b3bc:	f109 0901 	add.w	r9, r9, #1
 800b3c0:	e7ee      	b.n	800b3a0 <_printf_float+0x2b4>
 800b3c2:	bf00      	nop
 800b3c4:	7fefffff 	.word	0x7fefffff
 800b3c8:	0800d9c0 	.word	0x0800d9c0
 800b3cc:	0800d9c4 	.word	0x0800d9c4
 800b3d0:	0800d9c8 	.word	0x0800d9c8
 800b3d4:	0800d9cc 	.word	0x0800d9cc
 800b3d8:	0800d9d0 	.word	0x0800d9d0
 800b3dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	bfa8      	it	ge
 800b3e4:	461a      	movge	r2, r3
 800b3e6:	2a00      	cmp	r2, #0
 800b3e8:	4691      	mov	r9, r2
 800b3ea:	dc37      	bgt.n	800b45c <_printf_float+0x370>
 800b3ec:	f04f 0b00 	mov.w	fp, #0
 800b3f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3f4:	f104 021a 	add.w	r2, r4, #26
 800b3f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3fa:	9305      	str	r3, [sp, #20]
 800b3fc:	eba3 0309 	sub.w	r3, r3, r9
 800b400:	455b      	cmp	r3, fp
 800b402:	dc33      	bgt.n	800b46c <_printf_float+0x380>
 800b404:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b408:	429a      	cmp	r2, r3
 800b40a:	db3b      	blt.n	800b484 <_printf_float+0x398>
 800b40c:	6823      	ldr	r3, [r4, #0]
 800b40e:	07da      	lsls	r2, r3, #31
 800b410:	d438      	bmi.n	800b484 <_printf_float+0x398>
 800b412:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b416:	eba2 0903 	sub.w	r9, r2, r3
 800b41a:	9b05      	ldr	r3, [sp, #20]
 800b41c:	1ad2      	subs	r2, r2, r3
 800b41e:	4591      	cmp	r9, r2
 800b420:	bfa8      	it	ge
 800b422:	4691      	movge	r9, r2
 800b424:	f1b9 0f00 	cmp.w	r9, #0
 800b428:	dc35      	bgt.n	800b496 <_printf_float+0x3aa>
 800b42a:	f04f 0800 	mov.w	r8, #0
 800b42e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b432:	f104 0a1a 	add.w	sl, r4, #26
 800b436:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b43a:	1a9b      	subs	r3, r3, r2
 800b43c:	eba3 0309 	sub.w	r3, r3, r9
 800b440:	4543      	cmp	r3, r8
 800b442:	f77f af79 	ble.w	800b338 <_printf_float+0x24c>
 800b446:	2301      	movs	r3, #1
 800b448:	4652      	mov	r2, sl
 800b44a:	4631      	mov	r1, r6
 800b44c:	4628      	mov	r0, r5
 800b44e:	47b8      	blx	r7
 800b450:	3001      	adds	r0, #1
 800b452:	f43f aeaa 	beq.w	800b1aa <_printf_float+0xbe>
 800b456:	f108 0801 	add.w	r8, r8, #1
 800b45a:	e7ec      	b.n	800b436 <_printf_float+0x34a>
 800b45c:	4613      	mov	r3, r2
 800b45e:	4631      	mov	r1, r6
 800b460:	4642      	mov	r2, r8
 800b462:	4628      	mov	r0, r5
 800b464:	47b8      	blx	r7
 800b466:	3001      	adds	r0, #1
 800b468:	d1c0      	bne.n	800b3ec <_printf_float+0x300>
 800b46a:	e69e      	b.n	800b1aa <_printf_float+0xbe>
 800b46c:	2301      	movs	r3, #1
 800b46e:	4631      	mov	r1, r6
 800b470:	4628      	mov	r0, r5
 800b472:	9205      	str	r2, [sp, #20]
 800b474:	47b8      	blx	r7
 800b476:	3001      	adds	r0, #1
 800b478:	f43f ae97 	beq.w	800b1aa <_printf_float+0xbe>
 800b47c:	9a05      	ldr	r2, [sp, #20]
 800b47e:	f10b 0b01 	add.w	fp, fp, #1
 800b482:	e7b9      	b.n	800b3f8 <_printf_float+0x30c>
 800b484:	ee18 3a10 	vmov	r3, s16
 800b488:	4652      	mov	r2, sl
 800b48a:	4631      	mov	r1, r6
 800b48c:	4628      	mov	r0, r5
 800b48e:	47b8      	blx	r7
 800b490:	3001      	adds	r0, #1
 800b492:	d1be      	bne.n	800b412 <_printf_float+0x326>
 800b494:	e689      	b.n	800b1aa <_printf_float+0xbe>
 800b496:	9a05      	ldr	r2, [sp, #20]
 800b498:	464b      	mov	r3, r9
 800b49a:	4442      	add	r2, r8
 800b49c:	4631      	mov	r1, r6
 800b49e:	4628      	mov	r0, r5
 800b4a0:	47b8      	blx	r7
 800b4a2:	3001      	adds	r0, #1
 800b4a4:	d1c1      	bne.n	800b42a <_printf_float+0x33e>
 800b4a6:	e680      	b.n	800b1aa <_printf_float+0xbe>
 800b4a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4aa:	2a01      	cmp	r2, #1
 800b4ac:	dc01      	bgt.n	800b4b2 <_printf_float+0x3c6>
 800b4ae:	07db      	lsls	r3, r3, #31
 800b4b0:	d53a      	bpl.n	800b528 <_printf_float+0x43c>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	4642      	mov	r2, r8
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	47b8      	blx	r7
 800b4bc:	3001      	adds	r0, #1
 800b4be:	f43f ae74 	beq.w	800b1aa <_printf_float+0xbe>
 800b4c2:	ee18 3a10 	vmov	r3, s16
 800b4c6:	4652      	mov	r2, sl
 800b4c8:	4631      	mov	r1, r6
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	47b8      	blx	r7
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	f43f ae6b 	beq.w	800b1aa <_printf_float+0xbe>
 800b4d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b4d8:	2200      	movs	r2, #0
 800b4da:	2300      	movs	r3, #0
 800b4dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b4e0:	f7f5 fafa 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4e4:	b9d8      	cbnz	r0, 800b51e <_printf_float+0x432>
 800b4e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b4ea:	f108 0201 	add.w	r2, r8, #1
 800b4ee:	4631      	mov	r1, r6
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	47b8      	blx	r7
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	d10e      	bne.n	800b516 <_printf_float+0x42a>
 800b4f8:	e657      	b.n	800b1aa <_printf_float+0xbe>
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	4652      	mov	r2, sl
 800b4fe:	4631      	mov	r1, r6
 800b500:	4628      	mov	r0, r5
 800b502:	47b8      	blx	r7
 800b504:	3001      	adds	r0, #1
 800b506:	f43f ae50 	beq.w	800b1aa <_printf_float+0xbe>
 800b50a:	f108 0801 	add.w	r8, r8, #1
 800b50e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b510:	3b01      	subs	r3, #1
 800b512:	4543      	cmp	r3, r8
 800b514:	dcf1      	bgt.n	800b4fa <_printf_float+0x40e>
 800b516:	464b      	mov	r3, r9
 800b518:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b51c:	e6da      	b.n	800b2d4 <_printf_float+0x1e8>
 800b51e:	f04f 0800 	mov.w	r8, #0
 800b522:	f104 0a1a 	add.w	sl, r4, #26
 800b526:	e7f2      	b.n	800b50e <_printf_float+0x422>
 800b528:	2301      	movs	r3, #1
 800b52a:	4642      	mov	r2, r8
 800b52c:	e7df      	b.n	800b4ee <_printf_float+0x402>
 800b52e:	2301      	movs	r3, #1
 800b530:	464a      	mov	r2, r9
 800b532:	4631      	mov	r1, r6
 800b534:	4628      	mov	r0, r5
 800b536:	47b8      	blx	r7
 800b538:	3001      	adds	r0, #1
 800b53a:	f43f ae36 	beq.w	800b1aa <_printf_float+0xbe>
 800b53e:	f108 0801 	add.w	r8, r8, #1
 800b542:	68e3      	ldr	r3, [r4, #12]
 800b544:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b546:	1a5b      	subs	r3, r3, r1
 800b548:	4543      	cmp	r3, r8
 800b54a:	dcf0      	bgt.n	800b52e <_printf_float+0x442>
 800b54c:	e6f8      	b.n	800b340 <_printf_float+0x254>
 800b54e:	f04f 0800 	mov.w	r8, #0
 800b552:	f104 0919 	add.w	r9, r4, #25
 800b556:	e7f4      	b.n	800b542 <_printf_float+0x456>

0800b558 <_printf_common>:
 800b558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b55c:	4616      	mov	r6, r2
 800b55e:	4699      	mov	r9, r3
 800b560:	688a      	ldr	r2, [r1, #8]
 800b562:	690b      	ldr	r3, [r1, #16]
 800b564:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b568:	4293      	cmp	r3, r2
 800b56a:	bfb8      	it	lt
 800b56c:	4613      	movlt	r3, r2
 800b56e:	6033      	str	r3, [r6, #0]
 800b570:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b574:	4607      	mov	r7, r0
 800b576:	460c      	mov	r4, r1
 800b578:	b10a      	cbz	r2, 800b57e <_printf_common+0x26>
 800b57a:	3301      	adds	r3, #1
 800b57c:	6033      	str	r3, [r6, #0]
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	0699      	lsls	r1, r3, #26
 800b582:	bf42      	ittt	mi
 800b584:	6833      	ldrmi	r3, [r6, #0]
 800b586:	3302      	addmi	r3, #2
 800b588:	6033      	strmi	r3, [r6, #0]
 800b58a:	6825      	ldr	r5, [r4, #0]
 800b58c:	f015 0506 	ands.w	r5, r5, #6
 800b590:	d106      	bne.n	800b5a0 <_printf_common+0x48>
 800b592:	f104 0a19 	add.w	sl, r4, #25
 800b596:	68e3      	ldr	r3, [r4, #12]
 800b598:	6832      	ldr	r2, [r6, #0]
 800b59a:	1a9b      	subs	r3, r3, r2
 800b59c:	42ab      	cmp	r3, r5
 800b59e:	dc26      	bgt.n	800b5ee <_printf_common+0x96>
 800b5a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b5a4:	1e13      	subs	r3, r2, #0
 800b5a6:	6822      	ldr	r2, [r4, #0]
 800b5a8:	bf18      	it	ne
 800b5aa:	2301      	movne	r3, #1
 800b5ac:	0692      	lsls	r2, r2, #26
 800b5ae:	d42b      	bmi.n	800b608 <_printf_common+0xb0>
 800b5b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5b4:	4649      	mov	r1, r9
 800b5b6:	4638      	mov	r0, r7
 800b5b8:	47c0      	blx	r8
 800b5ba:	3001      	adds	r0, #1
 800b5bc:	d01e      	beq.n	800b5fc <_printf_common+0xa4>
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	6922      	ldr	r2, [r4, #16]
 800b5c2:	f003 0306 	and.w	r3, r3, #6
 800b5c6:	2b04      	cmp	r3, #4
 800b5c8:	bf02      	ittt	eq
 800b5ca:	68e5      	ldreq	r5, [r4, #12]
 800b5cc:	6833      	ldreq	r3, [r6, #0]
 800b5ce:	1aed      	subeq	r5, r5, r3
 800b5d0:	68a3      	ldr	r3, [r4, #8]
 800b5d2:	bf0c      	ite	eq
 800b5d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5d8:	2500      	movne	r5, #0
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	bfc4      	itt	gt
 800b5de:	1a9b      	subgt	r3, r3, r2
 800b5e0:	18ed      	addgt	r5, r5, r3
 800b5e2:	2600      	movs	r6, #0
 800b5e4:	341a      	adds	r4, #26
 800b5e6:	42b5      	cmp	r5, r6
 800b5e8:	d11a      	bne.n	800b620 <_printf_common+0xc8>
 800b5ea:	2000      	movs	r0, #0
 800b5ec:	e008      	b.n	800b600 <_printf_common+0xa8>
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	4652      	mov	r2, sl
 800b5f2:	4649      	mov	r1, r9
 800b5f4:	4638      	mov	r0, r7
 800b5f6:	47c0      	blx	r8
 800b5f8:	3001      	adds	r0, #1
 800b5fa:	d103      	bne.n	800b604 <_printf_common+0xac>
 800b5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b604:	3501      	adds	r5, #1
 800b606:	e7c6      	b.n	800b596 <_printf_common+0x3e>
 800b608:	18e1      	adds	r1, r4, r3
 800b60a:	1c5a      	adds	r2, r3, #1
 800b60c:	2030      	movs	r0, #48	; 0x30
 800b60e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b612:	4422      	add	r2, r4
 800b614:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b618:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b61c:	3302      	adds	r3, #2
 800b61e:	e7c7      	b.n	800b5b0 <_printf_common+0x58>
 800b620:	2301      	movs	r3, #1
 800b622:	4622      	mov	r2, r4
 800b624:	4649      	mov	r1, r9
 800b626:	4638      	mov	r0, r7
 800b628:	47c0      	blx	r8
 800b62a:	3001      	adds	r0, #1
 800b62c:	d0e6      	beq.n	800b5fc <_printf_common+0xa4>
 800b62e:	3601      	adds	r6, #1
 800b630:	e7d9      	b.n	800b5e6 <_printf_common+0x8e>
	...

0800b634 <_printf_i>:
 800b634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b638:	7e0f      	ldrb	r7, [r1, #24]
 800b63a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b63c:	2f78      	cmp	r7, #120	; 0x78
 800b63e:	4691      	mov	r9, r2
 800b640:	4680      	mov	r8, r0
 800b642:	460c      	mov	r4, r1
 800b644:	469a      	mov	sl, r3
 800b646:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b64a:	d807      	bhi.n	800b65c <_printf_i+0x28>
 800b64c:	2f62      	cmp	r7, #98	; 0x62
 800b64e:	d80a      	bhi.n	800b666 <_printf_i+0x32>
 800b650:	2f00      	cmp	r7, #0
 800b652:	f000 80d4 	beq.w	800b7fe <_printf_i+0x1ca>
 800b656:	2f58      	cmp	r7, #88	; 0x58
 800b658:	f000 80c0 	beq.w	800b7dc <_printf_i+0x1a8>
 800b65c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b660:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b664:	e03a      	b.n	800b6dc <_printf_i+0xa8>
 800b666:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b66a:	2b15      	cmp	r3, #21
 800b66c:	d8f6      	bhi.n	800b65c <_printf_i+0x28>
 800b66e:	a101      	add	r1, pc, #4	; (adr r1, 800b674 <_printf_i+0x40>)
 800b670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b674:	0800b6cd 	.word	0x0800b6cd
 800b678:	0800b6e1 	.word	0x0800b6e1
 800b67c:	0800b65d 	.word	0x0800b65d
 800b680:	0800b65d 	.word	0x0800b65d
 800b684:	0800b65d 	.word	0x0800b65d
 800b688:	0800b65d 	.word	0x0800b65d
 800b68c:	0800b6e1 	.word	0x0800b6e1
 800b690:	0800b65d 	.word	0x0800b65d
 800b694:	0800b65d 	.word	0x0800b65d
 800b698:	0800b65d 	.word	0x0800b65d
 800b69c:	0800b65d 	.word	0x0800b65d
 800b6a0:	0800b7e5 	.word	0x0800b7e5
 800b6a4:	0800b70d 	.word	0x0800b70d
 800b6a8:	0800b79f 	.word	0x0800b79f
 800b6ac:	0800b65d 	.word	0x0800b65d
 800b6b0:	0800b65d 	.word	0x0800b65d
 800b6b4:	0800b807 	.word	0x0800b807
 800b6b8:	0800b65d 	.word	0x0800b65d
 800b6bc:	0800b70d 	.word	0x0800b70d
 800b6c0:	0800b65d 	.word	0x0800b65d
 800b6c4:	0800b65d 	.word	0x0800b65d
 800b6c8:	0800b7a7 	.word	0x0800b7a7
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	1d1a      	adds	r2, r3, #4
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	602a      	str	r2, [r5, #0]
 800b6d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e09f      	b.n	800b820 <_printf_i+0x1ec>
 800b6e0:	6820      	ldr	r0, [r4, #0]
 800b6e2:	682b      	ldr	r3, [r5, #0]
 800b6e4:	0607      	lsls	r7, r0, #24
 800b6e6:	f103 0104 	add.w	r1, r3, #4
 800b6ea:	6029      	str	r1, [r5, #0]
 800b6ec:	d501      	bpl.n	800b6f2 <_printf_i+0xbe>
 800b6ee:	681e      	ldr	r6, [r3, #0]
 800b6f0:	e003      	b.n	800b6fa <_printf_i+0xc6>
 800b6f2:	0646      	lsls	r6, r0, #25
 800b6f4:	d5fb      	bpl.n	800b6ee <_printf_i+0xba>
 800b6f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b6fa:	2e00      	cmp	r6, #0
 800b6fc:	da03      	bge.n	800b706 <_printf_i+0xd2>
 800b6fe:	232d      	movs	r3, #45	; 0x2d
 800b700:	4276      	negs	r6, r6
 800b702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b706:	485a      	ldr	r0, [pc, #360]	; (800b870 <_printf_i+0x23c>)
 800b708:	230a      	movs	r3, #10
 800b70a:	e012      	b.n	800b732 <_printf_i+0xfe>
 800b70c:	682b      	ldr	r3, [r5, #0]
 800b70e:	6820      	ldr	r0, [r4, #0]
 800b710:	1d19      	adds	r1, r3, #4
 800b712:	6029      	str	r1, [r5, #0]
 800b714:	0605      	lsls	r5, r0, #24
 800b716:	d501      	bpl.n	800b71c <_printf_i+0xe8>
 800b718:	681e      	ldr	r6, [r3, #0]
 800b71a:	e002      	b.n	800b722 <_printf_i+0xee>
 800b71c:	0641      	lsls	r1, r0, #25
 800b71e:	d5fb      	bpl.n	800b718 <_printf_i+0xe4>
 800b720:	881e      	ldrh	r6, [r3, #0]
 800b722:	4853      	ldr	r0, [pc, #332]	; (800b870 <_printf_i+0x23c>)
 800b724:	2f6f      	cmp	r7, #111	; 0x6f
 800b726:	bf0c      	ite	eq
 800b728:	2308      	moveq	r3, #8
 800b72a:	230a      	movne	r3, #10
 800b72c:	2100      	movs	r1, #0
 800b72e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b732:	6865      	ldr	r5, [r4, #4]
 800b734:	60a5      	str	r5, [r4, #8]
 800b736:	2d00      	cmp	r5, #0
 800b738:	bfa2      	ittt	ge
 800b73a:	6821      	ldrge	r1, [r4, #0]
 800b73c:	f021 0104 	bicge.w	r1, r1, #4
 800b740:	6021      	strge	r1, [r4, #0]
 800b742:	b90e      	cbnz	r6, 800b748 <_printf_i+0x114>
 800b744:	2d00      	cmp	r5, #0
 800b746:	d04b      	beq.n	800b7e0 <_printf_i+0x1ac>
 800b748:	4615      	mov	r5, r2
 800b74a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b74e:	fb03 6711 	mls	r7, r3, r1, r6
 800b752:	5dc7      	ldrb	r7, [r0, r7]
 800b754:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b758:	4637      	mov	r7, r6
 800b75a:	42bb      	cmp	r3, r7
 800b75c:	460e      	mov	r6, r1
 800b75e:	d9f4      	bls.n	800b74a <_printf_i+0x116>
 800b760:	2b08      	cmp	r3, #8
 800b762:	d10b      	bne.n	800b77c <_printf_i+0x148>
 800b764:	6823      	ldr	r3, [r4, #0]
 800b766:	07de      	lsls	r6, r3, #31
 800b768:	d508      	bpl.n	800b77c <_printf_i+0x148>
 800b76a:	6923      	ldr	r3, [r4, #16]
 800b76c:	6861      	ldr	r1, [r4, #4]
 800b76e:	4299      	cmp	r1, r3
 800b770:	bfde      	ittt	le
 800b772:	2330      	movle	r3, #48	; 0x30
 800b774:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b778:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b77c:	1b52      	subs	r2, r2, r5
 800b77e:	6122      	str	r2, [r4, #16]
 800b780:	f8cd a000 	str.w	sl, [sp]
 800b784:	464b      	mov	r3, r9
 800b786:	aa03      	add	r2, sp, #12
 800b788:	4621      	mov	r1, r4
 800b78a:	4640      	mov	r0, r8
 800b78c:	f7ff fee4 	bl	800b558 <_printf_common>
 800b790:	3001      	adds	r0, #1
 800b792:	d14a      	bne.n	800b82a <_printf_i+0x1f6>
 800b794:	f04f 30ff 	mov.w	r0, #4294967295
 800b798:	b004      	add	sp, #16
 800b79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	f043 0320 	orr.w	r3, r3, #32
 800b7a4:	6023      	str	r3, [r4, #0]
 800b7a6:	4833      	ldr	r0, [pc, #204]	; (800b874 <_printf_i+0x240>)
 800b7a8:	2778      	movs	r7, #120	; 0x78
 800b7aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b7ae:	6823      	ldr	r3, [r4, #0]
 800b7b0:	6829      	ldr	r1, [r5, #0]
 800b7b2:	061f      	lsls	r7, r3, #24
 800b7b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b7b8:	d402      	bmi.n	800b7c0 <_printf_i+0x18c>
 800b7ba:	065f      	lsls	r7, r3, #25
 800b7bc:	bf48      	it	mi
 800b7be:	b2b6      	uxthmi	r6, r6
 800b7c0:	07df      	lsls	r7, r3, #31
 800b7c2:	bf48      	it	mi
 800b7c4:	f043 0320 	orrmi.w	r3, r3, #32
 800b7c8:	6029      	str	r1, [r5, #0]
 800b7ca:	bf48      	it	mi
 800b7cc:	6023      	strmi	r3, [r4, #0]
 800b7ce:	b91e      	cbnz	r6, 800b7d8 <_printf_i+0x1a4>
 800b7d0:	6823      	ldr	r3, [r4, #0]
 800b7d2:	f023 0320 	bic.w	r3, r3, #32
 800b7d6:	6023      	str	r3, [r4, #0]
 800b7d8:	2310      	movs	r3, #16
 800b7da:	e7a7      	b.n	800b72c <_printf_i+0xf8>
 800b7dc:	4824      	ldr	r0, [pc, #144]	; (800b870 <_printf_i+0x23c>)
 800b7de:	e7e4      	b.n	800b7aa <_printf_i+0x176>
 800b7e0:	4615      	mov	r5, r2
 800b7e2:	e7bd      	b.n	800b760 <_printf_i+0x12c>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	6826      	ldr	r6, [r4, #0]
 800b7e8:	6961      	ldr	r1, [r4, #20]
 800b7ea:	1d18      	adds	r0, r3, #4
 800b7ec:	6028      	str	r0, [r5, #0]
 800b7ee:	0635      	lsls	r5, r6, #24
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	d501      	bpl.n	800b7f8 <_printf_i+0x1c4>
 800b7f4:	6019      	str	r1, [r3, #0]
 800b7f6:	e002      	b.n	800b7fe <_printf_i+0x1ca>
 800b7f8:	0670      	lsls	r0, r6, #25
 800b7fa:	d5fb      	bpl.n	800b7f4 <_printf_i+0x1c0>
 800b7fc:	8019      	strh	r1, [r3, #0]
 800b7fe:	2300      	movs	r3, #0
 800b800:	6123      	str	r3, [r4, #16]
 800b802:	4615      	mov	r5, r2
 800b804:	e7bc      	b.n	800b780 <_printf_i+0x14c>
 800b806:	682b      	ldr	r3, [r5, #0]
 800b808:	1d1a      	adds	r2, r3, #4
 800b80a:	602a      	str	r2, [r5, #0]
 800b80c:	681d      	ldr	r5, [r3, #0]
 800b80e:	6862      	ldr	r2, [r4, #4]
 800b810:	2100      	movs	r1, #0
 800b812:	4628      	mov	r0, r5
 800b814:	f7f4 fce4 	bl	80001e0 <memchr>
 800b818:	b108      	cbz	r0, 800b81e <_printf_i+0x1ea>
 800b81a:	1b40      	subs	r0, r0, r5
 800b81c:	6060      	str	r0, [r4, #4]
 800b81e:	6863      	ldr	r3, [r4, #4]
 800b820:	6123      	str	r3, [r4, #16]
 800b822:	2300      	movs	r3, #0
 800b824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b828:	e7aa      	b.n	800b780 <_printf_i+0x14c>
 800b82a:	6923      	ldr	r3, [r4, #16]
 800b82c:	462a      	mov	r2, r5
 800b82e:	4649      	mov	r1, r9
 800b830:	4640      	mov	r0, r8
 800b832:	47d0      	blx	sl
 800b834:	3001      	adds	r0, #1
 800b836:	d0ad      	beq.n	800b794 <_printf_i+0x160>
 800b838:	6823      	ldr	r3, [r4, #0]
 800b83a:	079b      	lsls	r3, r3, #30
 800b83c:	d413      	bmi.n	800b866 <_printf_i+0x232>
 800b83e:	68e0      	ldr	r0, [r4, #12]
 800b840:	9b03      	ldr	r3, [sp, #12]
 800b842:	4298      	cmp	r0, r3
 800b844:	bfb8      	it	lt
 800b846:	4618      	movlt	r0, r3
 800b848:	e7a6      	b.n	800b798 <_printf_i+0x164>
 800b84a:	2301      	movs	r3, #1
 800b84c:	4632      	mov	r2, r6
 800b84e:	4649      	mov	r1, r9
 800b850:	4640      	mov	r0, r8
 800b852:	47d0      	blx	sl
 800b854:	3001      	adds	r0, #1
 800b856:	d09d      	beq.n	800b794 <_printf_i+0x160>
 800b858:	3501      	adds	r5, #1
 800b85a:	68e3      	ldr	r3, [r4, #12]
 800b85c:	9903      	ldr	r1, [sp, #12]
 800b85e:	1a5b      	subs	r3, r3, r1
 800b860:	42ab      	cmp	r3, r5
 800b862:	dcf2      	bgt.n	800b84a <_printf_i+0x216>
 800b864:	e7eb      	b.n	800b83e <_printf_i+0x20a>
 800b866:	2500      	movs	r5, #0
 800b868:	f104 0619 	add.w	r6, r4, #25
 800b86c:	e7f5      	b.n	800b85a <_printf_i+0x226>
 800b86e:	bf00      	nop
 800b870:	0800d9d2 	.word	0x0800d9d2
 800b874:	0800d9e3 	.word	0x0800d9e3

0800b878 <std>:
 800b878:	2300      	movs	r3, #0
 800b87a:	b510      	push	{r4, lr}
 800b87c:	4604      	mov	r4, r0
 800b87e:	e9c0 3300 	strd	r3, r3, [r0]
 800b882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b886:	6083      	str	r3, [r0, #8]
 800b888:	8181      	strh	r1, [r0, #12]
 800b88a:	6643      	str	r3, [r0, #100]	; 0x64
 800b88c:	81c2      	strh	r2, [r0, #14]
 800b88e:	6183      	str	r3, [r0, #24]
 800b890:	4619      	mov	r1, r3
 800b892:	2208      	movs	r2, #8
 800b894:	305c      	adds	r0, #92	; 0x5c
 800b896:	f000 f8f4 	bl	800ba82 <memset>
 800b89a:	4b0d      	ldr	r3, [pc, #52]	; (800b8d0 <std+0x58>)
 800b89c:	6263      	str	r3, [r4, #36]	; 0x24
 800b89e:	4b0d      	ldr	r3, [pc, #52]	; (800b8d4 <std+0x5c>)
 800b8a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8a2:	4b0d      	ldr	r3, [pc, #52]	; (800b8d8 <std+0x60>)
 800b8a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8a6:	4b0d      	ldr	r3, [pc, #52]	; (800b8dc <std+0x64>)
 800b8a8:	6323      	str	r3, [r4, #48]	; 0x30
 800b8aa:	4b0d      	ldr	r3, [pc, #52]	; (800b8e0 <std+0x68>)
 800b8ac:	6224      	str	r4, [r4, #32]
 800b8ae:	429c      	cmp	r4, r3
 800b8b0:	d006      	beq.n	800b8c0 <std+0x48>
 800b8b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b8b6:	4294      	cmp	r4, r2
 800b8b8:	d002      	beq.n	800b8c0 <std+0x48>
 800b8ba:	33d0      	adds	r3, #208	; 0xd0
 800b8bc:	429c      	cmp	r4, r3
 800b8be:	d105      	bne.n	800b8cc <std+0x54>
 800b8c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8c8:	f000 b958 	b.w	800bb7c <__retarget_lock_init_recursive>
 800b8cc:	bd10      	pop	{r4, pc}
 800b8ce:	bf00      	nop
 800b8d0:	0800b9fd 	.word	0x0800b9fd
 800b8d4:	0800ba1f 	.word	0x0800ba1f
 800b8d8:	0800ba57 	.word	0x0800ba57
 800b8dc:	0800ba7b 	.word	0x0800ba7b
 800b8e0:	20004af4 	.word	0x20004af4

0800b8e4 <stdio_exit_handler>:
 800b8e4:	4a02      	ldr	r2, [pc, #8]	; (800b8f0 <stdio_exit_handler+0xc>)
 800b8e6:	4903      	ldr	r1, [pc, #12]	; (800b8f4 <stdio_exit_handler+0x10>)
 800b8e8:	4803      	ldr	r0, [pc, #12]	; (800b8f8 <stdio_exit_handler+0x14>)
 800b8ea:	f000 b869 	b.w	800b9c0 <_fwalk_sglue>
 800b8ee:	bf00      	nop
 800b8f0:	20000010 	.word	0x20000010
 800b8f4:	0800d299 	.word	0x0800d299
 800b8f8:	2000001c 	.word	0x2000001c

0800b8fc <cleanup_stdio>:
 800b8fc:	6841      	ldr	r1, [r0, #4]
 800b8fe:	4b0c      	ldr	r3, [pc, #48]	; (800b930 <cleanup_stdio+0x34>)
 800b900:	4299      	cmp	r1, r3
 800b902:	b510      	push	{r4, lr}
 800b904:	4604      	mov	r4, r0
 800b906:	d001      	beq.n	800b90c <cleanup_stdio+0x10>
 800b908:	f001 fcc6 	bl	800d298 <_fflush_r>
 800b90c:	68a1      	ldr	r1, [r4, #8]
 800b90e:	4b09      	ldr	r3, [pc, #36]	; (800b934 <cleanup_stdio+0x38>)
 800b910:	4299      	cmp	r1, r3
 800b912:	d002      	beq.n	800b91a <cleanup_stdio+0x1e>
 800b914:	4620      	mov	r0, r4
 800b916:	f001 fcbf 	bl	800d298 <_fflush_r>
 800b91a:	68e1      	ldr	r1, [r4, #12]
 800b91c:	4b06      	ldr	r3, [pc, #24]	; (800b938 <cleanup_stdio+0x3c>)
 800b91e:	4299      	cmp	r1, r3
 800b920:	d004      	beq.n	800b92c <cleanup_stdio+0x30>
 800b922:	4620      	mov	r0, r4
 800b924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b928:	f001 bcb6 	b.w	800d298 <_fflush_r>
 800b92c:	bd10      	pop	{r4, pc}
 800b92e:	bf00      	nop
 800b930:	20004af4 	.word	0x20004af4
 800b934:	20004b5c 	.word	0x20004b5c
 800b938:	20004bc4 	.word	0x20004bc4

0800b93c <global_stdio_init.part.0>:
 800b93c:	b510      	push	{r4, lr}
 800b93e:	4b0b      	ldr	r3, [pc, #44]	; (800b96c <global_stdio_init.part.0+0x30>)
 800b940:	4c0b      	ldr	r4, [pc, #44]	; (800b970 <global_stdio_init.part.0+0x34>)
 800b942:	4a0c      	ldr	r2, [pc, #48]	; (800b974 <global_stdio_init.part.0+0x38>)
 800b944:	601a      	str	r2, [r3, #0]
 800b946:	4620      	mov	r0, r4
 800b948:	2200      	movs	r2, #0
 800b94a:	2104      	movs	r1, #4
 800b94c:	f7ff ff94 	bl	800b878 <std>
 800b950:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b954:	2201      	movs	r2, #1
 800b956:	2109      	movs	r1, #9
 800b958:	f7ff ff8e 	bl	800b878 <std>
 800b95c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b960:	2202      	movs	r2, #2
 800b962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b966:	2112      	movs	r1, #18
 800b968:	f7ff bf86 	b.w	800b878 <std>
 800b96c:	20004c2c 	.word	0x20004c2c
 800b970:	20004af4 	.word	0x20004af4
 800b974:	0800b8e5 	.word	0x0800b8e5

0800b978 <__sfp_lock_acquire>:
 800b978:	4801      	ldr	r0, [pc, #4]	; (800b980 <__sfp_lock_acquire+0x8>)
 800b97a:	f000 b900 	b.w	800bb7e <__retarget_lock_acquire_recursive>
 800b97e:	bf00      	nop
 800b980:	20004c35 	.word	0x20004c35

0800b984 <__sfp_lock_release>:
 800b984:	4801      	ldr	r0, [pc, #4]	; (800b98c <__sfp_lock_release+0x8>)
 800b986:	f000 b8fb 	b.w	800bb80 <__retarget_lock_release_recursive>
 800b98a:	bf00      	nop
 800b98c:	20004c35 	.word	0x20004c35

0800b990 <__sinit>:
 800b990:	b510      	push	{r4, lr}
 800b992:	4604      	mov	r4, r0
 800b994:	f7ff fff0 	bl	800b978 <__sfp_lock_acquire>
 800b998:	6a23      	ldr	r3, [r4, #32]
 800b99a:	b11b      	cbz	r3, 800b9a4 <__sinit+0x14>
 800b99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9a0:	f7ff bff0 	b.w	800b984 <__sfp_lock_release>
 800b9a4:	4b04      	ldr	r3, [pc, #16]	; (800b9b8 <__sinit+0x28>)
 800b9a6:	6223      	str	r3, [r4, #32]
 800b9a8:	4b04      	ldr	r3, [pc, #16]	; (800b9bc <__sinit+0x2c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1f5      	bne.n	800b99c <__sinit+0xc>
 800b9b0:	f7ff ffc4 	bl	800b93c <global_stdio_init.part.0>
 800b9b4:	e7f2      	b.n	800b99c <__sinit+0xc>
 800b9b6:	bf00      	nop
 800b9b8:	0800b8fd 	.word	0x0800b8fd
 800b9bc:	20004c2c 	.word	0x20004c2c

0800b9c0 <_fwalk_sglue>:
 800b9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c4:	4607      	mov	r7, r0
 800b9c6:	4688      	mov	r8, r1
 800b9c8:	4614      	mov	r4, r2
 800b9ca:	2600      	movs	r6, #0
 800b9cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9d0:	f1b9 0901 	subs.w	r9, r9, #1
 800b9d4:	d505      	bpl.n	800b9e2 <_fwalk_sglue+0x22>
 800b9d6:	6824      	ldr	r4, [r4, #0]
 800b9d8:	2c00      	cmp	r4, #0
 800b9da:	d1f7      	bne.n	800b9cc <_fwalk_sglue+0xc>
 800b9dc:	4630      	mov	r0, r6
 800b9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9e2:	89ab      	ldrh	r3, [r5, #12]
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d907      	bls.n	800b9f8 <_fwalk_sglue+0x38>
 800b9e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	d003      	beq.n	800b9f8 <_fwalk_sglue+0x38>
 800b9f0:	4629      	mov	r1, r5
 800b9f2:	4638      	mov	r0, r7
 800b9f4:	47c0      	blx	r8
 800b9f6:	4306      	orrs	r6, r0
 800b9f8:	3568      	adds	r5, #104	; 0x68
 800b9fa:	e7e9      	b.n	800b9d0 <_fwalk_sglue+0x10>

0800b9fc <__sread>:
 800b9fc:	b510      	push	{r4, lr}
 800b9fe:	460c      	mov	r4, r1
 800ba00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba04:	f000 f86c 	bl	800bae0 <_read_r>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	bfab      	itete	ge
 800ba0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba0e:	89a3      	ldrhlt	r3, [r4, #12]
 800ba10:	181b      	addge	r3, r3, r0
 800ba12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba16:	bfac      	ite	ge
 800ba18:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba1a:	81a3      	strhlt	r3, [r4, #12]
 800ba1c:	bd10      	pop	{r4, pc}

0800ba1e <__swrite>:
 800ba1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba22:	461f      	mov	r7, r3
 800ba24:	898b      	ldrh	r3, [r1, #12]
 800ba26:	05db      	lsls	r3, r3, #23
 800ba28:	4605      	mov	r5, r0
 800ba2a:	460c      	mov	r4, r1
 800ba2c:	4616      	mov	r6, r2
 800ba2e:	d505      	bpl.n	800ba3c <__swrite+0x1e>
 800ba30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba34:	2302      	movs	r3, #2
 800ba36:	2200      	movs	r2, #0
 800ba38:	f000 f840 	bl	800babc <_lseek_r>
 800ba3c:	89a3      	ldrh	r3, [r4, #12]
 800ba3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba46:	81a3      	strh	r3, [r4, #12]
 800ba48:	4632      	mov	r2, r6
 800ba4a:	463b      	mov	r3, r7
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba52:	f000 b857 	b.w	800bb04 <_write_r>

0800ba56 <__sseek>:
 800ba56:	b510      	push	{r4, lr}
 800ba58:	460c      	mov	r4, r1
 800ba5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba5e:	f000 f82d 	bl	800babc <_lseek_r>
 800ba62:	1c43      	adds	r3, r0, #1
 800ba64:	89a3      	ldrh	r3, [r4, #12]
 800ba66:	bf15      	itete	ne
 800ba68:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba72:	81a3      	strheq	r3, [r4, #12]
 800ba74:	bf18      	it	ne
 800ba76:	81a3      	strhne	r3, [r4, #12]
 800ba78:	bd10      	pop	{r4, pc}

0800ba7a <__sclose>:
 800ba7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba7e:	f000 b80d 	b.w	800ba9c <_close_r>

0800ba82 <memset>:
 800ba82:	4402      	add	r2, r0
 800ba84:	4603      	mov	r3, r0
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d100      	bne.n	800ba8c <memset+0xa>
 800ba8a:	4770      	bx	lr
 800ba8c:	f803 1b01 	strb.w	r1, [r3], #1
 800ba90:	e7f9      	b.n	800ba86 <memset+0x4>
	...

0800ba94 <_localeconv_r>:
 800ba94:	4800      	ldr	r0, [pc, #0]	; (800ba98 <_localeconv_r+0x4>)
 800ba96:	4770      	bx	lr
 800ba98:	2000015c 	.word	0x2000015c

0800ba9c <_close_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	4d06      	ldr	r5, [pc, #24]	; (800bab8 <_close_r+0x1c>)
 800baa0:	2300      	movs	r3, #0
 800baa2:	4604      	mov	r4, r0
 800baa4:	4608      	mov	r0, r1
 800baa6:	602b      	str	r3, [r5, #0]
 800baa8:	f7f6 fc0d 	bl	80022c6 <_close>
 800baac:	1c43      	adds	r3, r0, #1
 800baae:	d102      	bne.n	800bab6 <_close_r+0x1a>
 800bab0:	682b      	ldr	r3, [r5, #0]
 800bab2:	b103      	cbz	r3, 800bab6 <_close_r+0x1a>
 800bab4:	6023      	str	r3, [r4, #0]
 800bab6:	bd38      	pop	{r3, r4, r5, pc}
 800bab8:	20004c30 	.word	0x20004c30

0800babc <_lseek_r>:
 800babc:	b538      	push	{r3, r4, r5, lr}
 800babe:	4d07      	ldr	r5, [pc, #28]	; (800badc <_lseek_r+0x20>)
 800bac0:	4604      	mov	r4, r0
 800bac2:	4608      	mov	r0, r1
 800bac4:	4611      	mov	r1, r2
 800bac6:	2200      	movs	r2, #0
 800bac8:	602a      	str	r2, [r5, #0]
 800baca:	461a      	mov	r2, r3
 800bacc:	f7f6 fc22 	bl	8002314 <_lseek>
 800bad0:	1c43      	adds	r3, r0, #1
 800bad2:	d102      	bne.n	800bada <_lseek_r+0x1e>
 800bad4:	682b      	ldr	r3, [r5, #0]
 800bad6:	b103      	cbz	r3, 800bada <_lseek_r+0x1e>
 800bad8:	6023      	str	r3, [r4, #0]
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	20004c30 	.word	0x20004c30

0800bae0 <_read_r>:
 800bae0:	b538      	push	{r3, r4, r5, lr}
 800bae2:	4d07      	ldr	r5, [pc, #28]	; (800bb00 <_read_r+0x20>)
 800bae4:	4604      	mov	r4, r0
 800bae6:	4608      	mov	r0, r1
 800bae8:	4611      	mov	r1, r2
 800baea:	2200      	movs	r2, #0
 800baec:	602a      	str	r2, [r5, #0]
 800baee:	461a      	mov	r2, r3
 800baf0:	f7f6 fbb0 	bl	8002254 <_read>
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	d102      	bne.n	800bafe <_read_r+0x1e>
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	b103      	cbz	r3, 800bafe <_read_r+0x1e>
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
 800bb00:	20004c30 	.word	0x20004c30

0800bb04 <_write_r>:
 800bb04:	b538      	push	{r3, r4, r5, lr}
 800bb06:	4d07      	ldr	r5, [pc, #28]	; (800bb24 <_write_r+0x20>)
 800bb08:	4604      	mov	r4, r0
 800bb0a:	4608      	mov	r0, r1
 800bb0c:	4611      	mov	r1, r2
 800bb0e:	2200      	movs	r2, #0
 800bb10:	602a      	str	r2, [r5, #0]
 800bb12:	461a      	mov	r2, r3
 800bb14:	f7f6 fbbb 	bl	800228e <_write>
 800bb18:	1c43      	adds	r3, r0, #1
 800bb1a:	d102      	bne.n	800bb22 <_write_r+0x1e>
 800bb1c:	682b      	ldr	r3, [r5, #0]
 800bb1e:	b103      	cbz	r3, 800bb22 <_write_r+0x1e>
 800bb20:	6023      	str	r3, [r4, #0]
 800bb22:	bd38      	pop	{r3, r4, r5, pc}
 800bb24:	20004c30 	.word	0x20004c30

0800bb28 <__errno>:
 800bb28:	4b01      	ldr	r3, [pc, #4]	; (800bb30 <__errno+0x8>)
 800bb2a:	6818      	ldr	r0, [r3, #0]
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop
 800bb30:	20000068 	.word	0x20000068

0800bb34 <__libc_init_array>:
 800bb34:	b570      	push	{r4, r5, r6, lr}
 800bb36:	4d0d      	ldr	r5, [pc, #52]	; (800bb6c <__libc_init_array+0x38>)
 800bb38:	4c0d      	ldr	r4, [pc, #52]	; (800bb70 <__libc_init_array+0x3c>)
 800bb3a:	1b64      	subs	r4, r4, r5
 800bb3c:	10a4      	asrs	r4, r4, #2
 800bb3e:	2600      	movs	r6, #0
 800bb40:	42a6      	cmp	r6, r4
 800bb42:	d109      	bne.n	800bb58 <__libc_init_array+0x24>
 800bb44:	4d0b      	ldr	r5, [pc, #44]	; (800bb74 <__libc_init_array+0x40>)
 800bb46:	4c0c      	ldr	r4, [pc, #48]	; (800bb78 <__libc_init_array+0x44>)
 800bb48:	f001 feec 	bl	800d924 <_init>
 800bb4c:	1b64      	subs	r4, r4, r5
 800bb4e:	10a4      	asrs	r4, r4, #2
 800bb50:	2600      	movs	r6, #0
 800bb52:	42a6      	cmp	r6, r4
 800bb54:	d105      	bne.n	800bb62 <__libc_init_array+0x2e>
 800bb56:	bd70      	pop	{r4, r5, r6, pc}
 800bb58:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb5c:	4798      	blx	r3
 800bb5e:	3601      	adds	r6, #1
 800bb60:	e7ee      	b.n	800bb40 <__libc_init_array+0xc>
 800bb62:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb66:	4798      	blx	r3
 800bb68:	3601      	adds	r6, #1
 800bb6a:	e7f2      	b.n	800bb52 <__libc_init_array+0x1e>
 800bb6c:	0800dd3c 	.word	0x0800dd3c
 800bb70:	0800dd3c 	.word	0x0800dd3c
 800bb74:	0800dd3c 	.word	0x0800dd3c
 800bb78:	0800dd40 	.word	0x0800dd40

0800bb7c <__retarget_lock_init_recursive>:
 800bb7c:	4770      	bx	lr

0800bb7e <__retarget_lock_acquire_recursive>:
 800bb7e:	4770      	bx	lr

0800bb80 <__retarget_lock_release_recursive>:
 800bb80:	4770      	bx	lr

0800bb82 <memcpy>:
 800bb82:	440a      	add	r2, r1
 800bb84:	4291      	cmp	r1, r2
 800bb86:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb8a:	d100      	bne.n	800bb8e <memcpy+0xc>
 800bb8c:	4770      	bx	lr
 800bb8e:	b510      	push	{r4, lr}
 800bb90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb98:	4291      	cmp	r1, r2
 800bb9a:	d1f9      	bne.n	800bb90 <memcpy+0xe>
 800bb9c:	bd10      	pop	{r4, pc}

0800bb9e <quorem>:
 800bb9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba2:	6903      	ldr	r3, [r0, #16]
 800bba4:	690c      	ldr	r4, [r1, #16]
 800bba6:	42a3      	cmp	r3, r4
 800bba8:	4607      	mov	r7, r0
 800bbaa:	db7e      	blt.n	800bcaa <quorem+0x10c>
 800bbac:	3c01      	subs	r4, #1
 800bbae:	f101 0814 	add.w	r8, r1, #20
 800bbb2:	f100 0514 	add.w	r5, r0, #20
 800bbb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbba:	9301      	str	r3, [sp, #4]
 800bbbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bbc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bbcc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bbd0:	fbb2 f6f3 	udiv	r6, r2, r3
 800bbd4:	d331      	bcc.n	800bc3a <quorem+0x9c>
 800bbd6:	f04f 0e00 	mov.w	lr, #0
 800bbda:	4640      	mov	r0, r8
 800bbdc:	46ac      	mov	ip, r5
 800bbde:	46f2      	mov	sl, lr
 800bbe0:	f850 2b04 	ldr.w	r2, [r0], #4
 800bbe4:	b293      	uxth	r3, r2
 800bbe6:	fb06 e303 	mla	r3, r6, r3, lr
 800bbea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbee:	0c1a      	lsrs	r2, r3, #16
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	ebaa 0303 	sub.w	r3, sl, r3
 800bbf6:	f8dc a000 	ldr.w	sl, [ip]
 800bbfa:	fa13 f38a 	uxtah	r3, r3, sl
 800bbfe:	fb06 220e 	mla	r2, r6, lr, r2
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	9b00      	ldr	r3, [sp, #0]
 800bc06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc0a:	b292      	uxth	r2, r2
 800bc0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bc10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc14:	f8bd 3000 	ldrh.w	r3, [sp]
 800bc18:	4581      	cmp	r9, r0
 800bc1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc1e:	f84c 3b04 	str.w	r3, [ip], #4
 800bc22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bc26:	d2db      	bcs.n	800bbe0 <quorem+0x42>
 800bc28:	f855 300b 	ldr.w	r3, [r5, fp]
 800bc2c:	b92b      	cbnz	r3, 800bc3a <quorem+0x9c>
 800bc2e:	9b01      	ldr	r3, [sp, #4]
 800bc30:	3b04      	subs	r3, #4
 800bc32:	429d      	cmp	r5, r3
 800bc34:	461a      	mov	r2, r3
 800bc36:	d32c      	bcc.n	800bc92 <quorem+0xf4>
 800bc38:	613c      	str	r4, [r7, #16]
 800bc3a:	4638      	mov	r0, r7
 800bc3c:	f001 f9a6 	bl	800cf8c <__mcmp>
 800bc40:	2800      	cmp	r0, #0
 800bc42:	db22      	blt.n	800bc8a <quorem+0xec>
 800bc44:	3601      	adds	r6, #1
 800bc46:	4629      	mov	r1, r5
 800bc48:	2000      	movs	r0, #0
 800bc4a:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc4e:	f8d1 c000 	ldr.w	ip, [r1]
 800bc52:	b293      	uxth	r3, r2
 800bc54:	1ac3      	subs	r3, r0, r3
 800bc56:	0c12      	lsrs	r2, r2, #16
 800bc58:	fa13 f38c 	uxtah	r3, r3, ip
 800bc5c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bc60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc6a:	45c1      	cmp	r9, r8
 800bc6c:	f841 3b04 	str.w	r3, [r1], #4
 800bc70:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc74:	d2e9      	bcs.n	800bc4a <quorem+0xac>
 800bc76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc7e:	b922      	cbnz	r2, 800bc8a <quorem+0xec>
 800bc80:	3b04      	subs	r3, #4
 800bc82:	429d      	cmp	r5, r3
 800bc84:	461a      	mov	r2, r3
 800bc86:	d30a      	bcc.n	800bc9e <quorem+0x100>
 800bc88:	613c      	str	r4, [r7, #16]
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	b003      	add	sp, #12
 800bc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc92:	6812      	ldr	r2, [r2, #0]
 800bc94:	3b04      	subs	r3, #4
 800bc96:	2a00      	cmp	r2, #0
 800bc98:	d1ce      	bne.n	800bc38 <quorem+0x9a>
 800bc9a:	3c01      	subs	r4, #1
 800bc9c:	e7c9      	b.n	800bc32 <quorem+0x94>
 800bc9e:	6812      	ldr	r2, [r2, #0]
 800bca0:	3b04      	subs	r3, #4
 800bca2:	2a00      	cmp	r2, #0
 800bca4:	d1f0      	bne.n	800bc88 <quorem+0xea>
 800bca6:	3c01      	subs	r4, #1
 800bca8:	e7eb      	b.n	800bc82 <quorem+0xe4>
 800bcaa:	2000      	movs	r0, #0
 800bcac:	e7ee      	b.n	800bc8c <quorem+0xee>
	...

0800bcb0 <_dtoa_r>:
 800bcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb4:	ed2d 8b04 	vpush	{d8-d9}
 800bcb8:	69c5      	ldr	r5, [r0, #28]
 800bcba:	b093      	sub	sp, #76	; 0x4c
 800bcbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bcc0:	ec57 6b10 	vmov	r6, r7, d0
 800bcc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bcc8:	9107      	str	r1, [sp, #28]
 800bcca:	4604      	mov	r4, r0
 800bccc:	920a      	str	r2, [sp, #40]	; 0x28
 800bcce:	930d      	str	r3, [sp, #52]	; 0x34
 800bcd0:	b975      	cbnz	r5, 800bcf0 <_dtoa_r+0x40>
 800bcd2:	2010      	movs	r0, #16
 800bcd4:	f000 fe2a 	bl	800c92c <malloc>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	61e0      	str	r0, [r4, #28]
 800bcdc:	b920      	cbnz	r0, 800bce8 <_dtoa_r+0x38>
 800bcde:	4bae      	ldr	r3, [pc, #696]	; (800bf98 <_dtoa_r+0x2e8>)
 800bce0:	21ef      	movs	r1, #239	; 0xef
 800bce2:	48ae      	ldr	r0, [pc, #696]	; (800bf9c <_dtoa_r+0x2ec>)
 800bce4:	f001 fb10 	bl	800d308 <__assert_func>
 800bce8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bcec:	6005      	str	r5, [r0, #0]
 800bcee:	60c5      	str	r5, [r0, #12]
 800bcf0:	69e3      	ldr	r3, [r4, #28]
 800bcf2:	6819      	ldr	r1, [r3, #0]
 800bcf4:	b151      	cbz	r1, 800bd0c <_dtoa_r+0x5c>
 800bcf6:	685a      	ldr	r2, [r3, #4]
 800bcf8:	604a      	str	r2, [r1, #4]
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	4093      	lsls	r3, r2
 800bcfe:	608b      	str	r3, [r1, #8]
 800bd00:	4620      	mov	r0, r4
 800bd02:	f000 ff07 	bl	800cb14 <_Bfree>
 800bd06:	69e3      	ldr	r3, [r4, #28]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	601a      	str	r2, [r3, #0]
 800bd0c:	1e3b      	subs	r3, r7, #0
 800bd0e:	bfbb      	ittet	lt
 800bd10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bd14:	9303      	strlt	r3, [sp, #12]
 800bd16:	2300      	movge	r3, #0
 800bd18:	2201      	movlt	r2, #1
 800bd1a:	bfac      	ite	ge
 800bd1c:	f8c8 3000 	strge.w	r3, [r8]
 800bd20:	f8c8 2000 	strlt.w	r2, [r8]
 800bd24:	4b9e      	ldr	r3, [pc, #632]	; (800bfa0 <_dtoa_r+0x2f0>)
 800bd26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bd2a:	ea33 0308 	bics.w	r3, r3, r8
 800bd2e:	d11b      	bne.n	800bd68 <_dtoa_r+0xb8>
 800bd30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd32:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd36:	6013      	str	r3, [r2, #0]
 800bd38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bd3c:	4333      	orrs	r3, r6
 800bd3e:	f000 8593 	beq.w	800c868 <_dtoa_r+0xbb8>
 800bd42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd44:	b963      	cbnz	r3, 800bd60 <_dtoa_r+0xb0>
 800bd46:	4b97      	ldr	r3, [pc, #604]	; (800bfa4 <_dtoa_r+0x2f4>)
 800bd48:	e027      	b.n	800bd9a <_dtoa_r+0xea>
 800bd4a:	4b97      	ldr	r3, [pc, #604]	; (800bfa8 <_dtoa_r+0x2f8>)
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	3308      	adds	r3, #8
 800bd50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd52:	6013      	str	r3, [r2, #0]
 800bd54:	9800      	ldr	r0, [sp, #0]
 800bd56:	b013      	add	sp, #76	; 0x4c
 800bd58:	ecbd 8b04 	vpop	{d8-d9}
 800bd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd60:	4b90      	ldr	r3, [pc, #576]	; (800bfa4 <_dtoa_r+0x2f4>)
 800bd62:	9300      	str	r3, [sp, #0]
 800bd64:	3303      	adds	r3, #3
 800bd66:	e7f3      	b.n	800bd50 <_dtoa_r+0xa0>
 800bd68:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	ec51 0b17 	vmov	r0, r1, d7
 800bd72:	eeb0 8a47 	vmov.f32	s16, s14
 800bd76:	eef0 8a67 	vmov.f32	s17, s15
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f7f4 feac 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd80:	4681      	mov	r9, r0
 800bd82:	b160      	cbz	r0, 800bd9e <_dtoa_r+0xee>
 800bd84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd86:	2301      	movs	r3, #1
 800bd88:	6013      	str	r3, [r2, #0]
 800bd8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f000 8568 	beq.w	800c862 <_dtoa_r+0xbb2>
 800bd92:	4b86      	ldr	r3, [pc, #536]	; (800bfac <_dtoa_r+0x2fc>)
 800bd94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	9300      	str	r3, [sp, #0]
 800bd9c:	e7da      	b.n	800bd54 <_dtoa_r+0xa4>
 800bd9e:	aa10      	add	r2, sp, #64	; 0x40
 800bda0:	a911      	add	r1, sp, #68	; 0x44
 800bda2:	4620      	mov	r0, r4
 800bda4:	eeb0 0a48 	vmov.f32	s0, s16
 800bda8:	eef0 0a68 	vmov.f32	s1, s17
 800bdac:	f001 f994 	bl	800d0d8 <__d2b>
 800bdb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bdb4:	4682      	mov	sl, r0
 800bdb6:	2d00      	cmp	r5, #0
 800bdb8:	d07f      	beq.n	800beba <_dtoa_r+0x20a>
 800bdba:	ee18 3a90 	vmov	r3, s17
 800bdbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bdc6:	ec51 0b18 	vmov	r0, r1, d8
 800bdca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bdce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bdd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	2200      	movs	r2, #0
 800bdda:	4b75      	ldr	r3, [pc, #468]	; (800bfb0 <_dtoa_r+0x300>)
 800bddc:	f7f4 fa5c 	bl	8000298 <__aeabi_dsub>
 800bde0:	a367      	add	r3, pc, #412	; (adr r3, 800bf80 <_dtoa_r+0x2d0>)
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	f7f4 fc0f 	bl	8000608 <__aeabi_dmul>
 800bdea:	a367      	add	r3, pc, #412	; (adr r3, 800bf88 <_dtoa_r+0x2d8>)
 800bdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf0:	f7f4 fa54 	bl	800029c <__adddf3>
 800bdf4:	4606      	mov	r6, r0
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	460f      	mov	r7, r1
 800bdfa:	f7f4 fb9b 	bl	8000534 <__aeabi_i2d>
 800bdfe:	a364      	add	r3, pc, #400	; (adr r3, 800bf90 <_dtoa_r+0x2e0>)
 800be00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be04:	f7f4 fc00 	bl	8000608 <__aeabi_dmul>
 800be08:	4602      	mov	r2, r0
 800be0a:	460b      	mov	r3, r1
 800be0c:	4630      	mov	r0, r6
 800be0e:	4639      	mov	r1, r7
 800be10:	f7f4 fa44 	bl	800029c <__adddf3>
 800be14:	4606      	mov	r6, r0
 800be16:	460f      	mov	r7, r1
 800be18:	f7f4 fea6 	bl	8000b68 <__aeabi_d2iz>
 800be1c:	2200      	movs	r2, #0
 800be1e:	4683      	mov	fp, r0
 800be20:	2300      	movs	r3, #0
 800be22:	4630      	mov	r0, r6
 800be24:	4639      	mov	r1, r7
 800be26:	f7f4 fe61 	bl	8000aec <__aeabi_dcmplt>
 800be2a:	b148      	cbz	r0, 800be40 <_dtoa_r+0x190>
 800be2c:	4658      	mov	r0, fp
 800be2e:	f7f4 fb81 	bl	8000534 <__aeabi_i2d>
 800be32:	4632      	mov	r2, r6
 800be34:	463b      	mov	r3, r7
 800be36:	f7f4 fe4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800be3a:	b908      	cbnz	r0, 800be40 <_dtoa_r+0x190>
 800be3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be40:	f1bb 0f16 	cmp.w	fp, #22
 800be44:	d857      	bhi.n	800bef6 <_dtoa_r+0x246>
 800be46:	4b5b      	ldr	r3, [pc, #364]	; (800bfb4 <_dtoa_r+0x304>)
 800be48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be50:	ec51 0b18 	vmov	r0, r1, d8
 800be54:	f7f4 fe4a 	bl	8000aec <__aeabi_dcmplt>
 800be58:	2800      	cmp	r0, #0
 800be5a:	d04e      	beq.n	800befa <_dtoa_r+0x24a>
 800be5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be60:	2300      	movs	r3, #0
 800be62:	930c      	str	r3, [sp, #48]	; 0x30
 800be64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be66:	1b5b      	subs	r3, r3, r5
 800be68:	1e5a      	subs	r2, r3, #1
 800be6a:	bf45      	ittet	mi
 800be6c:	f1c3 0301 	rsbmi	r3, r3, #1
 800be70:	9305      	strmi	r3, [sp, #20]
 800be72:	2300      	movpl	r3, #0
 800be74:	2300      	movmi	r3, #0
 800be76:	9206      	str	r2, [sp, #24]
 800be78:	bf54      	ite	pl
 800be7a:	9305      	strpl	r3, [sp, #20]
 800be7c:	9306      	strmi	r3, [sp, #24]
 800be7e:	f1bb 0f00 	cmp.w	fp, #0
 800be82:	db3c      	blt.n	800befe <_dtoa_r+0x24e>
 800be84:	9b06      	ldr	r3, [sp, #24]
 800be86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800be8a:	445b      	add	r3, fp
 800be8c:	9306      	str	r3, [sp, #24]
 800be8e:	2300      	movs	r3, #0
 800be90:	9308      	str	r3, [sp, #32]
 800be92:	9b07      	ldr	r3, [sp, #28]
 800be94:	2b09      	cmp	r3, #9
 800be96:	d868      	bhi.n	800bf6a <_dtoa_r+0x2ba>
 800be98:	2b05      	cmp	r3, #5
 800be9a:	bfc4      	itt	gt
 800be9c:	3b04      	subgt	r3, #4
 800be9e:	9307      	strgt	r3, [sp, #28]
 800bea0:	9b07      	ldr	r3, [sp, #28]
 800bea2:	f1a3 0302 	sub.w	r3, r3, #2
 800bea6:	bfcc      	ite	gt
 800bea8:	2500      	movgt	r5, #0
 800beaa:	2501      	movle	r5, #1
 800beac:	2b03      	cmp	r3, #3
 800beae:	f200 8085 	bhi.w	800bfbc <_dtoa_r+0x30c>
 800beb2:	e8df f003 	tbb	[pc, r3]
 800beb6:	3b2e      	.short	0x3b2e
 800beb8:	5839      	.short	0x5839
 800beba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bebe:	441d      	add	r5, r3
 800bec0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bec4:	2b20      	cmp	r3, #32
 800bec6:	bfc1      	itttt	gt
 800bec8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800becc:	fa08 f803 	lslgt.w	r8, r8, r3
 800bed0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bed4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bed8:	bfd6      	itet	le
 800beda:	f1c3 0320 	rsble	r3, r3, #32
 800bede:	ea48 0003 	orrgt.w	r0, r8, r3
 800bee2:	fa06 f003 	lslle.w	r0, r6, r3
 800bee6:	f7f4 fb15 	bl	8000514 <__aeabi_ui2d>
 800beea:	2201      	movs	r2, #1
 800beec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bef0:	3d01      	subs	r5, #1
 800bef2:	920e      	str	r2, [sp, #56]	; 0x38
 800bef4:	e76f      	b.n	800bdd6 <_dtoa_r+0x126>
 800bef6:	2301      	movs	r3, #1
 800bef8:	e7b3      	b.n	800be62 <_dtoa_r+0x1b2>
 800befa:	900c      	str	r0, [sp, #48]	; 0x30
 800befc:	e7b2      	b.n	800be64 <_dtoa_r+0x1b4>
 800befe:	9b05      	ldr	r3, [sp, #20]
 800bf00:	eba3 030b 	sub.w	r3, r3, fp
 800bf04:	9305      	str	r3, [sp, #20]
 800bf06:	f1cb 0300 	rsb	r3, fp, #0
 800bf0a:	9308      	str	r3, [sp, #32]
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf10:	e7bf      	b.n	800be92 <_dtoa_r+0x1e2>
 800bf12:	2300      	movs	r3, #0
 800bf14:	9309      	str	r3, [sp, #36]	; 0x24
 800bf16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	dc52      	bgt.n	800bfc2 <_dtoa_r+0x312>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	9301      	str	r3, [sp, #4]
 800bf20:	9304      	str	r3, [sp, #16]
 800bf22:	461a      	mov	r2, r3
 800bf24:	920a      	str	r2, [sp, #40]	; 0x28
 800bf26:	e00b      	b.n	800bf40 <_dtoa_r+0x290>
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e7f3      	b.n	800bf14 <_dtoa_r+0x264>
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf32:	445b      	add	r3, fp
 800bf34:	9301      	str	r3, [sp, #4]
 800bf36:	3301      	adds	r3, #1
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	9304      	str	r3, [sp, #16]
 800bf3c:	bfb8      	it	lt
 800bf3e:	2301      	movlt	r3, #1
 800bf40:	69e0      	ldr	r0, [r4, #28]
 800bf42:	2100      	movs	r1, #0
 800bf44:	2204      	movs	r2, #4
 800bf46:	f102 0614 	add.w	r6, r2, #20
 800bf4a:	429e      	cmp	r6, r3
 800bf4c:	d93d      	bls.n	800bfca <_dtoa_r+0x31a>
 800bf4e:	6041      	str	r1, [r0, #4]
 800bf50:	4620      	mov	r0, r4
 800bf52:	f000 fd9f 	bl	800ca94 <_Balloc>
 800bf56:	9000      	str	r0, [sp, #0]
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	d139      	bne.n	800bfd0 <_dtoa_r+0x320>
 800bf5c:	4b16      	ldr	r3, [pc, #88]	; (800bfb8 <_dtoa_r+0x308>)
 800bf5e:	4602      	mov	r2, r0
 800bf60:	f240 11af 	movw	r1, #431	; 0x1af
 800bf64:	e6bd      	b.n	800bce2 <_dtoa_r+0x32>
 800bf66:	2301      	movs	r3, #1
 800bf68:	e7e1      	b.n	800bf2e <_dtoa_r+0x27e>
 800bf6a:	2501      	movs	r5, #1
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	9307      	str	r3, [sp, #28]
 800bf70:	9509      	str	r5, [sp, #36]	; 0x24
 800bf72:	f04f 33ff 	mov.w	r3, #4294967295
 800bf76:	9301      	str	r3, [sp, #4]
 800bf78:	9304      	str	r3, [sp, #16]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	2312      	movs	r3, #18
 800bf7e:	e7d1      	b.n	800bf24 <_dtoa_r+0x274>
 800bf80:	636f4361 	.word	0x636f4361
 800bf84:	3fd287a7 	.word	0x3fd287a7
 800bf88:	8b60c8b3 	.word	0x8b60c8b3
 800bf8c:	3fc68a28 	.word	0x3fc68a28
 800bf90:	509f79fb 	.word	0x509f79fb
 800bf94:	3fd34413 	.word	0x3fd34413
 800bf98:	0800da01 	.word	0x0800da01
 800bf9c:	0800da18 	.word	0x0800da18
 800bfa0:	7ff00000 	.word	0x7ff00000
 800bfa4:	0800d9fd 	.word	0x0800d9fd
 800bfa8:	0800d9f4 	.word	0x0800d9f4
 800bfac:	0800d9d1 	.word	0x0800d9d1
 800bfb0:	3ff80000 	.word	0x3ff80000
 800bfb4:	0800db08 	.word	0x0800db08
 800bfb8:	0800da70 	.word	0x0800da70
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	9309      	str	r3, [sp, #36]	; 0x24
 800bfc0:	e7d7      	b.n	800bf72 <_dtoa_r+0x2c2>
 800bfc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfc4:	9301      	str	r3, [sp, #4]
 800bfc6:	9304      	str	r3, [sp, #16]
 800bfc8:	e7ba      	b.n	800bf40 <_dtoa_r+0x290>
 800bfca:	3101      	adds	r1, #1
 800bfcc:	0052      	lsls	r2, r2, #1
 800bfce:	e7ba      	b.n	800bf46 <_dtoa_r+0x296>
 800bfd0:	69e3      	ldr	r3, [r4, #28]
 800bfd2:	9a00      	ldr	r2, [sp, #0]
 800bfd4:	601a      	str	r2, [r3, #0]
 800bfd6:	9b04      	ldr	r3, [sp, #16]
 800bfd8:	2b0e      	cmp	r3, #14
 800bfda:	f200 80a8 	bhi.w	800c12e <_dtoa_r+0x47e>
 800bfde:	2d00      	cmp	r5, #0
 800bfe0:	f000 80a5 	beq.w	800c12e <_dtoa_r+0x47e>
 800bfe4:	f1bb 0f00 	cmp.w	fp, #0
 800bfe8:	dd38      	ble.n	800c05c <_dtoa_r+0x3ac>
 800bfea:	4bc0      	ldr	r3, [pc, #768]	; (800c2ec <_dtoa_r+0x63c>)
 800bfec:	f00b 020f 	and.w	r2, fp, #15
 800bff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bff4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bff8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bffc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c000:	d019      	beq.n	800c036 <_dtoa_r+0x386>
 800c002:	4bbb      	ldr	r3, [pc, #748]	; (800c2f0 <_dtoa_r+0x640>)
 800c004:	ec51 0b18 	vmov	r0, r1, d8
 800c008:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c00c:	f7f4 fc26 	bl	800085c <__aeabi_ddiv>
 800c010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c014:	f008 080f 	and.w	r8, r8, #15
 800c018:	2503      	movs	r5, #3
 800c01a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c2f0 <_dtoa_r+0x640>
 800c01e:	f1b8 0f00 	cmp.w	r8, #0
 800c022:	d10a      	bne.n	800c03a <_dtoa_r+0x38a>
 800c024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c028:	4632      	mov	r2, r6
 800c02a:	463b      	mov	r3, r7
 800c02c:	f7f4 fc16 	bl	800085c <__aeabi_ddiv>
 800c030:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c034:	e02b      	b.n	800c08e <_dtoa_r+0x3de>
 800c036:	2502      	movs	r5, #2
 800c038:	e7ef      	b.n	800c01a <_dtoa_r+0x36a>
 800c03a:	f018 0f01 	tst.w	r8, #1
 800c03e:	d008      	beq.n	800c052 <_dtoa_r+0x3a2>
 800c040:	4630      	mov	r0, r6
 800c042:	4639      	mov	r1, r7
 800c044:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c048:	f7f4 fade 	bl	8000608 <__aeabi_dmul>
 800c04c:	3501      	adds	r5, #1
 800c04e:	4606      	mov	r6, r0
 800c050:	460f      	mov	r7, r1
 800c052:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c056:	f109 0908 	add.w	r9, r9, #8
 800c05a:	e7e0      	b.n	800c01e <_dtoa_r+0x36e>
 800c05c:	f000 809f 	beq.w	800c19e <_dtoa_r+0x4ee>
 800c060:	f1cb 0600 	rsb	r6, fp, #0
 800c064:	4ba1      	ldr	r3, [pc, #644]	; (800c2ec <_dtoa_r+0x63c>)
 800c066:	4fa2      	ldr	r7, [pc, #648]	; (800c2f0 <_dtoa_r+0x640>)
 800c068:	f006 020f 	and.w	r2, r6, #15
 800c06c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c074:	ec51 0b18 	vmov	r0, r1, d8
 800c078:	f7f4 fac6 	bl	8000608 <__aeabi_dmul>
 800c07c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c080:	1136      	asrs	r6, r6, #4
 800c082:	2300      	movs	r3, #0
 800c084:	2502      	movs	r5, #2
 800c086:	2e00      	cmp	r6, #0
 800c088:	d17e      	bne.n	800c188 <_dtoa_r+0x4d8>
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d1d0      	bne.n	800c030 <_dtoa_r+0x380>
 800c08e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c090:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c094:	2b00      	cmp	r3, #0
 800c096:	f000 8084 	beq.w	800c1a2 <_dtoa_r+0x4f2>
 800c09a:	4b96      	ldr	r3, [pc, #600]	; (800c2f4 <_dtoa_r+0x644>)
 800c09c:	2200      	movs	r2, #0
 800c09e:	4640      	mov	r0, r8
 800c0a0:	4649      	mov	r1, r9
 800c0a2:	f7f4 fd23 	bl	8000aec <__aeabi_dcmplt>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d07b      	beq.n	800c1a2 <_dtoa_r+0x4f2>
 800c0aa:	9b04      	ldr	r3, [sp, #16]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d078      	beq.n	800c1a2 <_dtoa_r+0x4f2>
 800c0b0:	9b01      	ldr	r3, [sp, #4]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	dd39      	ble.n	800c12a <_dtoa_r+0x47a>
 800c0b6:	4b90      	ldr	r3, [pc, #576]	; (800c2f8 <_dtoa_r+0x648>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	4640      	mov	r0, r8
 800c0bc:	4649      	mov	r1, r9
 800c0be:	f7f4 faa3 	bl	8000608 <__aeabi_dmul>
 800c0c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0c6:	9e01      	ldr	r6, [sp, #4]
 800c0c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c0cc:	3501      	adds	r5, #1
 800c0ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f7f4 fa2e 	bl	8000534 <__aeabi_i2d>
 800c0d8:	4642      	mov	r2, r8
 800c0da:	464b      	mov	r3, r9
 800c0dc:	f7f4 fa94 	bl	8000608 <__aeabi_dmul>
 800c0e0:	4b86      	ldr	r3, [pc, #536]	; (800c2fc <_dtoa_r+0x64c>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f7f4 f8da 	bl	800029c <__adddf3>
 800c0e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c0ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0f0:	9303      	str	r3, [sp, #12]
 800c0f2:	2e00      	cmp	r6, #0
 800c0f4:	d158      	bne.n	800c1a8 <_dtoa_r+0x4f8>
 800c0f6:	4b82      	ldr	r3, [pc, #520]	; (800c300 <_dtoa_r+0x650>)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	4640      	mov	r0, r8
 800c0fc:	4649      	mov	r1, r9
 800c0fe:	f7f4 f8cb 	bl	8000298 <__aeabi_dsub>
 800c102:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c106:	4680      	mov	r8, r0
 800c108:	4689      	mov	r9, r1
 800c10a:	f7f4 fd0d 	bl	8000b28 <__aeabi_dcmpgt>
 800c10e:	2800      	cmp	r0, #0
 800c110:	f040 8296 	bne.w	800c640 <_dtoa_r+0x990>
 800c114:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c118:	4640      	mov	r0, r8
 800c11a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c11e:	4649      	mov	r1, r9
 800c120:	f7f4 fce4 	bl	8000aec <__aeabi_dcmplt>
 800c124:	2800      	cmp	r0, #0
 800c126:	f040 8289 	bne.w	800c63c <_dtoa_r+0x98c>
 800c12a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c12e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c130:	2b00      	cmp	r3, #0
 800c132:	f2c0 814e 	blt.w	800c3d2 <_dtoa_r+0x722>
 800c136:	f1bb 0f0e 	cmp.w	fp, #14
 800c13a:	f300 814a 	bgt.w	800c3d2 <_dtoa_r+0x722>
 800c13e:	4b6b      	ldr	r3, [pc, #428]	; (800c2ec <_dtoa_r+0x63c>)
 800c140:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c144:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f280 80dc 	bge.w	800c308 <_dtoa_r+0x658>
 800c150:	9b04      	ldr	r3, [sp, #16]
 800c152:	2b00      	cmp	r3, #0
 800c154:	f300 80d8 	bgt.w	800c308 <_dtoa_r+0x658>
 800c158:	f040 826f 	bne.w	800c63a <_dtoa_r+0x98a>
 800c15c:	4b68      	ldr	r3, [pc, #416]	; (800c300 <_dtoa_r+0x650>)
 800c15e:	2200      	movs	r2, #0
 800c160:	4640      	mov	r0, r8
 800c162:	4649      	mov	r1, r9
 800c164:	f7f4 fa50 	bl	8000608 <__aeabi_dmul>
 800c168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c16c:	f7f4 fcd2 	bl	8000b14 <__aeabi_dcmpge>
 800c170:	9e04      	ldr	r6, [sp, #16]
 800c172:	4637      	mov	r7, r6
 800c174:	2800      	cmp	r0, #0
 800c176:	f040 8245 	bne.w	800c604 <_dtoa_r+0x954>
 800c17a:	9d00      	ldr	r5, [sp, #0]
 800c17c:	2331      	movs	r3, #49	; 0x31
 800c17e:	f805 3b01 	strb.w	r3, [r5], #1
 800c182:	f10b 0b01 	add.w	fp, fp, #1
 800c186:	e241      	b.n	800c60c <_dtoa_r+0x95c>
 800c188:	07f2      	lsls	r2, r6, #31
 800c18a:	d505      	bpl.n	800c198 <_dtoa_r+0x4e8>
 800c18c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c190:	f7f4 fa3a 	bl	8000608 <__aeabi_dmul>
 800c194:	3501      	adds	r5, #1
 800c196:	2301      	movs	r3, #1
 800c198:	1076      	asrs	r6, r6, #1
 800c19a:	3708      	adds	r7, #8
 800c19c:	e773      	b.n	800c086 <_dtoa_r+0x3d6>
 800c19e:	2502      	movs	r5, #2
 800c1a0:	e775      	b.n	800c08e <_dtoa_r+0x3de>
 800c1a2:	9e04      	ldr	r6, [sp, #16]
 800c1a4:	465f      	mov	r7, fp
 800c1a6:	e792      	b.n	800c0ce <_dtoa_r+0x41e>
 800c1a8:	9900      	ldr	r1, [sp, #0]
 800c1aa:	4b50      	ldr	r3, [pc, #320]	; (800c2ec <_dtoa_r+0x63c>)
 800c1ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1b0:	4431      	add	r1, r6
 800c1b2:	9102      	str	r1, [sp, #8]
 800c1b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1b6:	eeb0 9a47 	vmov.f32	s18, s14
 800c1ba:	eef0 9a67 	vmov.f32	s19, s15
 800c1be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c1c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c1c6:	2900      	cmp	r1, #0
 800c1c8:	d044      	beq.n	800c254 <_dtoa_r+0x5a4>
 800c1ca:	494e      	ldr	r1, [pc, #312]	; (800c304 <_dtoa_r+0x654>)
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	f7f4 fb45 	bl	800085c <__aeabi_ddiv>
 800c1d2:	ec53 2b19 	vmov	r2, r3, d9
 800c1d6:	f7f4 f85f 	bl	8000298 <__aeabi_dsub>
 800c1da:	9d00      	ldr	r5, [sp, #0]
 800c1dc:	ec41 0b19 	vmov	d9, r0, r1
 800c1e0:	4649      	mov	r1, r9
 800c1e2:	4640      	mov	r0, r8
 800c1e4:	f7f4 fcc0 	bl	8000b68 <__aeabi_d2iz>
 800c1e8:	4606      	mov	r6, r0
 800c1ea:	f7f4 f9a3 	bl	8000534 <__aeabi_i2d>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	4640      	mov	r0, r8
 800c1f4:	4649      	mov	r1, r9
 800c1f6:	f7f4 f84f 	bl	8000298 <__aeabi_dsub>
 800c1fa:	3630      	adds	r6, #48	; 0x30
 800c1fc:	f805 6b01 	strb.w	r6, [r5], #1
 800c200:	ec53 2b19 	vmov	r2, r3, d9
 800c204:	4680      	mov	r8, r0
 800c206:	4689      	mov	r9, r1
 800c208:	f7f4 fc70 	bl	8000aec <__aeabi_dcmplt>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	d164      	bne.n	800c2da <_dtoa_r+0x62a>
 800c210:	4642      	mov	r2, r8
 800c212:	464b      	mov	r3, r9
 800c214:	4937      	ldr	r1, [pc, #220]	; (800c2f4 <_dtoa_r+0x644>)
 800c216:	2000      	movs	r0, #0
 800c218:	f7f4 f83e 	bl	8000298 <__aeabi_dsub>
 800c21c:	ec53 2b19 	vmov	r2, r3, d9
 800c220:	f7f4 fc64 	bl	8000aec <__aeabi_dcmplt>
 800c224:	2800      	cmp	r0, #0
 800c226:	f040 80b6 	bne.w	800c396 <_dtoa_r+0x6e6>
 800c22a:	9b02      	ldr	r3, [sp, #8]
 800c22c:	429d      	cmp	r5, r3
 800c22e:	f43f af7c 	beq.w	800c12a <_dtoa_r+0x47a>
 800c232:	4b31      	ldr	r3, [pc, #196]	; (800c2f8 <_dtoa_r+0x648>)
 800c234:	ec51 0b19 	vmov	r0, r1, d9
 800c238:	2200      	movs	r2, #0
 800c23a:	f7f4 f9e5 	bl	8000608 <__aeabi_dmul>
 800c23e:	4b2e      	ldr	r3, [pc, #184]	; (800c2f8 <_dtoa_r+0x648>)
 800c240:	ec41 0b19 	vmov	d9, r0, r1
 800c244:	2200      	movs	r2, #0
 800c246:	4640      	mov	r0, r8
 800c248:	4649      	mov	r1, r9
 800c24a:	f7f4 f9dd 	bl	8000608 <__aeabi_dmul>
 800c24e:	4680      	mov	r8, r0
 800c250:	4689      	mov	r9, r1
 800c252:	e7c5      	b.n	800c1e0 <_dtoa_r+0x530>
 800c254:	ec51 0b17 	vmov	r0, r1, d7
 800c258:	f7f4 f9d6 	bl	8000608 <__aeabi_dmul>
 800c25c:	9b02      	ldr	r3, [sp, #8]
 800c25e:	9d00      	ldr	r5, [sp, #0]
 800c260:	930f      	str	r3, [sp, #60]	; 0x3c
 800c262:	ec41 0b19 	vmov	d9, r0, r1
 800c266:	4649      	mov	r1, r9
 800c268:	4640      	mov	r0, r8
 800c26a:	f7f4 fc7d 	bl	8000b68 <__aeabi_d2iz>
 800c26e:	4606      	mov	r6, r0
 800c270:	f7f4 f960 	bl	8000534 <__aeabi_i2d>
 800c274:	3630      	adds	r6, #48	; 0x30
 800c276:	4602      	mov	r2, r0
 800c278:	460b      	mov	r3, r1
 800c27a:	4640      	mov	r0, r8
 800c27c:	4649      	mov	r1, r9
 800c27e:	f7f4 f80b 	bl	8000298 <__aeabi_dsub>
 800c282:	f805 6b01 	strb.w	r6, [r5], #1
 800c286:	9b02      	ldr	r3, [sp, #8]
 800c288:	429d      	cmp	r5, r3
 800c28a:	4680      	mov	r8, r0
 800c28c:	4689      	mov	r9, r1
 800c28e:	f04f 0200 	mov.w	r2, #0
 800c292:	d124      	bne.n	800c2de <_dtoa_r+0x62e>
 800c294:	4b1b      	ldr	r3, [pc, #108]	; (800c304 <_dtoa_r+0x654>)
 800c296:	ec51 0b19 	vmov	r0, r1, d9
 800c29a:	f7f3 ffff 	bl	800029c <__adddf3>
 800c29e:	4602      	mov	r2, r0
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	4640      	mov	r0, r8
 800c2a4:	4649      	mov	r1, r9
 800c2a6:	f7f4 fc3f 	bl	8000b28 <__aeabi_dcmpgt>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d173      	bne.n	800c396 <_dtoa_r+0x6e6>
 800c2ae:	ec53 2b19 	vmov	r2, r3, d9
 800c2b2:	4914      	ldr	r1, [pc, #80]	; (800c304 <_dtoa_r+0x654>)
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	f7f3 ffef 	bl	8000298 <__aeabi_dsub>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	460b      	mov	r3, r1
 800c2be:	4640      	mov	r0, r8
 800c2c0:	4649      	mov	r1, r9
 800c2c2:	f7f4 fc13 	bl	8000aec <__aeabi_dcmplt>
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	f43f af2f 	beq.w	800c12a <_dtoa_r+0x47a>
 800c2cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c2ce:	1e6b      	subs	r3, r5, #1
 800c2d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c2d6:	2b30      	cmp	r3, #48	; 0x30
 800c2d8:	d0f8      	beq.n	800c2cc <_dtoa_r+0x61c>
 800c2da:	46bb      	mov	fp, r7
 800c2dc:	e04a      	b.n	800c374 <_dtoa_r+0x6c4>
 800c2de:	4b06      	ldr	r3, [pc, #24]	; (800c2f8 <_dtoa_r+0x648>)
 800c2e0:	f7f4 f992 	bl	8000608 <__aeabi_dmul>
 800c2e4:	4680      	mov	r8, r0
 800c2e6:	4689      	mov	r9, r1
 800c2e8:	e7bd      	b.n	800c266 <_dtoa_r+0x5b6>
 800c2ea:	bf00      	nop
 800c2ec:	0800db08 	.word	0x0800db08
 800c2f0:	0800dae0 	.word	0x0800dae0
 800c2f4:	3ff00000 	.word	0x3ff00000
 800c2f8:	40240000 	.word	0x40240000
 800c2fc:	401c0000 	.word	0x401c0000
 800c300:	40140000 	.word	0x40140000
 800c304:	3fe00000 	.word	0x3fe00000
 800c308:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c30c:	9d00      	ldr	r5, [sp, #0]
 800c30e:	4642      	mov	r2, r8
 800c310:	464b      	mov	r3, r9
 800c312:	4630      	mov	r0, r6
 800c314:	4639      	mov	r1, r7
 800c316:	f7f4 faa1 	bl	800085c <__aeabi_ddiv>
 800c31a:	f7f4 fc25 	bl	8000b68 <__aeabi_d2iz>
 800c31e:	9001      	str	r0, [sp, #4]
 800c320:	f7f4 f908 	bl	8000534 <__aeabi_i2d>
 800c324:	4642      	mov	r2, r8
 800c326:	464b      	mov	r3, r9
 800c328:	f7f4 f96e 	bl	8000608 <__aeabi_dmul>
 800c32c:	4602      	mov	r2, r0
 800c32e:	460b      	mov	r3, r1
 800c330:	4630      	mov	r0, r6
 800c332:	4639      	mov	r1, r7
 800c334:	f7f3 ffb0 	bl	8000298 <__aeabi_dsub>
 800c338:	9e01      	ldr	r6, [sp, #4]
 800c33a:	9f04      	ldr	r7, [sp, #16]
 800c33c:	3630      	adds	r6, #48	; 0x30
 800c33e:	f805 6b01 	strb.w	r6, [r5], #1
 800c342:	9e00      	ldr	r6, [sp, #0]
 800c344:	1bae      	subs	r6, r5, r6
 800c346:	42b7      	cmp	r7, r6
 800c348:	4602      	mov	r2, r0
 800c34a:	460b      	mov	r3, r1
 800c34c:	d134      	bne.n	800c3b8 <_dtoa_r+0x708>
 800c34e:	f7f3 ffa5 	bl	800029c <__adddf3>
 800c352:	4642      	mov	r2, r8
 800c354:	464b      	mov	r3, r9
 800c356:	4606      	mov	r6, r0
 800c358:	460f      	mov	r7, r1
 800c35a:	f7f4 fbe5 	bl	8000b28 <__aeabi_dcmpgt>
 800c35e:	b9c8      	cbnz	r0, 800c394 <_dtoa_r+0x6e4>
 800c360:	4642      	mov	r2, r8
 800c362:	464b      	mov	r3, r9
 800c364:	4630      	mov	r0, r6
 800c366:	4639      	mov	r1, r7
 800c368:	f7f4 fbb6 	bl	8000ad8 <__aeabi_dcmpeq>
 800c36c:	b110      	cbz	r0, 800c374 <_dtoa_r+0x6c4>
 800c36e:	9b01      	ldr	r3, [sp, #4]
 800c370:	07db      	lsls	r3, r3, #31
 800c372:	d40f      	bmi.n	800c394 <_dtoa_r+0x6e4>
 800c374:	4651      	mov	r1, sl
 800c376:	4620      	mov	r0, r4
 800c378:	f000 fbcc 	bl	800cb14 <_Bfree>
 800c37c:	2300      	movs	r3, #0
 800c37e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c380:	702b      	strb	r3, [r5, #0]
 800c382:	f10b 0301 	add.w	r3, fp, #1
 800c386:	6013      	str	r3, [r2, #0]
 800c388:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	f43f ace2 	beq.w	800bd54 <_dtoa_r+0xa4>
 800c390:	601d      	str	r5, [r3, #0]
 800c392:	e4df      	b.n	800bd54 <_dtoa_r+0xa4>
 800c394:	465f      	mov	r7, fp
 800c396:	462b      	mov	r3, r5
 800c398:	461d      	mov	r5, r3
 800c39a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c39e:	2a39      	cmp	r2, #57	; 0x39
 800c3a0:	d106      	bne.n	800c3b0 <_dtoa_r+0x700>
 800c3a2:	9a00      	ldr	r2, [sp, #0]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d1f7      	bne.n	800c398 <_dtoa_r+0x6e8>
 800c3a8:	9900      	ldr	r1, [sp, #0]
 800c3aa:	2230      	movs	r2, #48	; 0x30
 800c3ac:	3701      	adds	r7, #1
 800c3ae:	700a      	strb	r2, [r1, #0]
 800c3b0:	781a      	ldrb	r2, [r3, #0]
 800c3b2:	3201      	adds	r2, #1
 800c3b4:	701a      	strb	r2, [r3, #0]
 800c3b6:	e790      	b.n	800c2da <_dtoa_r+0x62a>
 800c3b8:	4ba3      	ldr	r3, [pc, #652]	; (800c648 <_dtoa_r+0x998>)
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f7f4 f924 	bl	8000608 <__aeabi_dmul>
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	4606      	mov	r6, r0
 800c3c6:	460f      	mov	r7, r1
 800c3c8:	f7f4 fb86 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d09e      	beq.n	800c30e <_dtoa_r+0x65e>
 800c3d0:	e7d0      	b.n	800c374 <_dtoa_r+0x6c4>
 800c3d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3d4:	2a00      	cmp	r2, #0
 800c3d6:	f000 80ca 	beq.w	800c56e <_dtoa_r+0x8be>
 800c3da:	9a07      	ldr	r2, [sp, #28]
 800c3dc:	2a01      	cmp	r2, #1
 800c3de:	f300 80ad 	bgt.w	800c53c <_dtoa_r+0x88c>
 800c3e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3e4:	2a00      	cmp	r2, #0
 800c3e6:	f000 80a5 	beq.w	800c534 <_dtoa_r+0x884>
 800c3ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3ee:	9e08      	ldr	r6, [sp, #32]
 800c3f0:	9d05      	ldr	r5, [sp, #20]
 800c3f2:	9a05      	ldr	r2, [sp, #20]
 800c3f4:	441a      	add	r2, r3
 800c3f6:	9205      	str	r2, [sp, #20]
 800c3f8:	9a06      	ldr	r2, [sp, #24]
 800c3fa:	2101      	movs	r1, #1
 800c3fc:	441a      	add	r2, r3
 800c3fe:	4620      	mov	r0, r4
 800c400:	9206      	str	r2, [sp, #24]
 800c402:	f000 fc3d 	bl	800cc80 <__i2b>
 800c406:	4607      	mov	r7, r0
 800c408:	b165      	cbz	r5, 800c424 <_dtoa_r+0x774>
 800c40a:	9b06      	ldr	r3, [sp, #24]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	dd09      	ble.n	800c424 <_dtoa_r+0x774>
 800c410:	42ab      	cmp	r3, r5
 800c412:	9a05      	ldr	r2, [sp, #20]
 800c414:	bfa8      	it	ge
 800c416:	462b      	movge	r3, r5
 800c418:	1ad2      	subs	r2, r2, r3
 800c41a:	9205      	str	r2, [sp, #20]
 800c41c:	9a06      	ldr	r2, [sp, #24]
 800c41e:	1aed      	subs	r5, r5, r3
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	9306      	str	r3, [sp, #24]
 800c424:	9b08      	ldr	r3, [sp, #32]
 800c426:	b1f3      	cbz	r3, 800c466 <_dtoa_r+0x7b6>
 800c428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	f000 80a3 	beq.w	800c576 <_dtoa_r+0x8c6>
 800c430:	2e00      	cmp	r6, #0
 800c432:	dd10      	ble.n	800c456 <_dtoa_r+0x7a6>
 800c434:	4639      	mov	r1, r7
 800c436:	4632      	mov	r2, r6
 800c438:	4620      	mov	r0, r4
 800c43a:	f000 fce1 	bl	800ce00 <__pow5mult>
 800c43e:	4652      	mov	r2, sl
 800c440:	4601      	mov	r1, r0
 800c442:	4607      	mov	r7, r0
 800c444:	4620      	mov	r0, r4
 800c446:	f000 fc31 	bl	800ccac <__multiply>
 800c44a:	4651      	mov	r1, sl
 800c44c:	4680      	mov	r8, r0
 800c44e:	4620      	mov	r0, r4
 800c450:	f000 fb60 	bl	800cb14 <_Bfree>
 800c454:	46c2      	mov	sl, r8
 800c456:	9b08      	ldr	r3, [sp, #32]
 800c458:	1b9a      	subs	r2, r3, r6
 800c45a:	d004      	beq.n	800c466 <_dtoa_r+0x7b6>
 800c45c:	4651      	mov	r1, sl
 800c45e:	4620      	mov	r0, r4
 800c460:	f000 fcce 	bl	800ce00 <__pow5mult>
 800c464:	4682      	mov	sl, r0
 800c466:	2101      	movs	r1, #1
 800c468:	4620      	mov	r0, r4
 800c46a:	f000 fc09 	bl	800cc80 <__i2b>
 800c46e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c470:	2b00      	cmp	r3, #0
 800c472:	4606      	mov	r6, r0
 800c474:	f340 8081 	ble.w	800c57a <_dtoa_r+0x8ca>
 800c478:	461a      	mov	r2, r3
 800c47a:	4601      	mov	r1, r0
 800c47c:	4620      	mov	r0, r4
 800c47e:	f000 fcbf 	bl	800ce00 <__pow5mult>
 800c482:	9b07      	ldr	r3, [sp, #28]
 800c484:	2b01      	cmp	r3, #1
 800c486:	4606      	mov	r6, r0
 800c488:	dd7a      	ble.n	800c580 <_dtoa_r+0x8d0>
 800c48a:	f04f 0800 	mov.w	r8, #0
 800c48e:	6933      	ldr	r3, [r6, #16]
 800c490:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c494:	6918      	ldr	r0, [r3, #16]
 800c496:	f000 fba5 	bl	800cbe4 <__hi0bits>
 800c49a:	f1c0 0020 	rsb	r0, r0, #32
 800c49e:	9b06      	ldr	r3, [sp, #24]
 800c4a0:	4418      	add	r0, r3
 800c4a2:	f010 001f 	ands.w	r0, r0, #31
 800c4a6:	f000 8094 	beq.w	800c5d2 <_dtoa_r+0x922>
 800c4aa:	f1c0 0320 	rsb	r3, r0, #32
 800c4ae:	2b04      	cmp	r3, #4
 800c4b0:	f340 8085 	ble.w	800c5be <_dtoa_r+0x90e>
 800c4b4:	9b05      	ldr	r3, [sp, #20]
 800c4b6:	f1c0 001c 	rsb	r0, r0, #28
 800c4ba:	4403      	add	r3, r0
 800c4bc:	9305      	str	r3, [sp, #20]
 800c4be:	9b06      	ldr	r3, [sp, #24]
 800c4c0:	4403      	add	r3, r0
 800c4c2:	4405      	add	r5, r0
 800c4c4:	9306      	str	r3, [sp, #24]
 800c4c6:	9b05      	ldr	r3, [sp, #20]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	dd05      	ble.n	800c4d8 <_dtoa_r+0x828>
 800c4cc:	4651      	mov	r1, sl
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	f000 fcef 	bl	800ceb4 <__lshift>
 800c4d6:	4682      	mov	sl, r0
 800c4d8:	9b06      	ldr	r3, [sp, #24]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	dd05      	ble.n	800c4ea <_dtoa_r+0x83a>
 800c4de:	4631      	mov	r1, r6
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	f000 fce6 	bl	800ceb4 <__lshift>
 800c4e8:	4606      	mov	r6, r0
 800c4ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d072      	beq.n	800c5d6 <_dtoa_r+0x926>
 800c4f0:	4631      	mov	r1, r6
 800c4f2:	4650      	mov	r0, sl
 800c4f4:	f000 fd4a 	bl	800cf8c <__mcmp>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	da6c      	bge.n	800c5d6 <_dtoa_r+0x926>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	4651      	mov	r1, sl
 800c500:	220a      	movs	r2, #10
 800c502:	4620      	mov	r0, r4
 800c504:	f000 fb28 	bl	800cb58 <__multadd>
 800c508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c50a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c50e:	4682      	mov	sl, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	f000 81b0 	beq.w	800c876 <_dtoa_r+0xbc6>
 800c516:	2300      	movs	r3, #0
 800c518:	4639      	mov	r1, r7
 800c51a:	220a      	movs	r2, #10
 800c51c:	4620      	mov	r0, r4
 800c51e:	f000 fb1b 	bl	800cb58 <__multadd>
 800c522:	9b01      	ldr	r3, [sp, #4]
 800c524:	2b00      	cmp	r3, #0
 800c526:	4607      	mov	r7, r0
 800c528:	f300 8096 	bgt.w	800c658 <_dtoa_r+0x9a8>
 800c52c:	9b07      	ldr	r3, [sp, #28]
 800c52e:	2b02      	cmp	r3, #2
 800c530:	dc59      	bgt.n	800c5e6 <_dtoa_r+0x936>
 800c532:	e091      	b.n	800c658 <_dtoa_r+0x9a8>
 800c534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c536:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c53a:	e758      	b.n	800c3ee <_dtoa_r+0x73e>
 800c53c:	9b04      	ldr	r3, [sp, #16]
 800c53e:	1e5e      	subs	r6, r3, #1
 800c540:	9b08      	ldr	r3, [sp, #32]
 800c542:	42b3      	cmp	r3, r6
 800c544:	bfbf      	itttt	lt
 800c546:	9b08      	ldrlt	r3, [sp, #32]
 800c548:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c54a:	9608      	strlt	r6, [sp, #32]
 800c54c:	1af3      	sublt	r3, r6, r3
 800c54e:	bfb4      	ite	lt
 800c550:	18d2      	addlt	r2, r2, r3
 800c552:	1b9e      	subge	r6, r3, r6
 800c554:	9b04      	ldr	r3, [sp, #16]
 800c556:	bfbc      	itt	lt
 800c558:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c55a:	2600      	movlt	r6, #0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	bfb7      	itett	lt
 800c560:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c564:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c568:	1a9d      	sublt	r5, r3, r2
 800c56a:	2300      	movlt	r3, #0
 800c56c:	e741      	b.n	800c3f2 <_dtoa_r+0x742>
 800c56e:	9e08      	ldr	r6, [sp, #32]
 800c570:	9d05      	ldr	r5, [sp, #20]
 800c572:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c574:	e748      	b.n	800c408 <_dtoa_r+0x758>
 800c576:	9a08      	ldr	r2, [sp, #32]
 800c578:	e770      	b.n	800c45c <_dtoa_r+0x7ac>
 800c57a:	9b07      	ldr	r3, [sp, #28]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	dc19      	bgt.n	800c5b4 <_dtoa_r+0x904>
 800c580:	9b02      	ldr	r3, [sp, #8]
 800c582:	b9bb      	cbnz	r3, 800c5b4 <_dtoa_r+0x904>
 800c584:	9b03      	ldr	r3, [sp, #12]
 800c586:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c58a:	b99b      	cbnz	r3, 800c5b4 <_dtoa_r+0x904>
 800c58c:	9b03      	ldr	r3, [sp, #12]
 800c58e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c592:	0d1b      	lsrs	r3, r3, #20
 800c594:	051b      	lsls	r3, r3, #20
 800c596:	b183      	cbz	r3, 800c5ba <_dtoa_r+0x90a>
 800c598:	9b05      	ldr	r3, [sp, #20]
 800c59a:	3301      	adds	r3, #1
 800c59c:	9305      	str	r3, [sp, #20]
 800c59e:	9b06      	ldr	r3, [sp, #24]
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	9306      	str	r3, [sp, #24]
 800c5a4:	f04f 0801 	mov.w	r8, #1
 800c5a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	f47f af6f 	bne.w	800c48e <_dtoa_r+0x7de>
 800c5b0:	2001      	movs	r0, #1
 800c5b2:	e774      	b.n	800c49e <_dtoa_r+0x7ee>
 800c5b4:	f04f 0800 	mov.w	r8, #0
 800c5b8:	e7f6      	b.n	800c5a8 <_dtoa_r+0x8f8>
 800c5ba:	4698      	mov	r8, r3
 800c5bc:	e7f4      	b.n	800c5a8 <_dtoa_r+0x8f8>
 800c5be:	d082      	beq.n	800c4c6 <_dtoa_r+0x816>
 800c5c0:	9a05      	ldr	r2, [sp, #20]
 800c5c2:	331c      	adds	r3, #28
 800c5c4:	441a      	add	r2, r3
 800c5c6:	9205      	str	r2, [sp, #20]
 800c5c8:	9a06      	ldr	r2, [sp, #24]
 800c5ca:	441a      	add	r2, r3
 800c5cc:	441d      	add	r5, r3
 800c5ce:	9206      	str	r2, [sp, #24]
 800c5d0:	e779      	b.n	800c4c6 <_dtoa_r+0x816>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	e7f4      	b.n	800c5c0 <_dtoa_r+0x910>
 800c5d6:	9b04      	ldr	r3, [sp, #16]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	dc37      	bgt.n	800c64c <_dtoa_r+0x99c>
 800c5dc:	9b07      	ldr	r3, [sp, #28]
 800c5de:	2b02      	cmp	r3, #2
 800c5e0:	dd34      	ble.n	800c64c <_dtoa_r+0x99c>
 800c5e2:	9b04      	ldr	r3, [sp, #16]
 800c5e4:	9301      	str	r3, [sp, #4]
 800c5e6:	9b01      	ldr	r3, [sp, #4]
 800c5e8:	b963      	cbnz	r3, 800c604 <_dtoa_r+0x954>
 800c5ea:	4631      	mov	r1, r6
 800c5ec:	2205      	movs	r2, #5
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f000 fab2 	bl	800cb58 <__multadd>
 800c5f4:	4601      	mov	r1, r0
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	4650      	mov	r0, sl
 800c5fa:	f000 fcc7 	bl	800cf8c <__mcmp>
 800c5fe:	2800      	cmp	r0, #0
 800c600:	f73f adbb 	bgt.w	800c17a <_dtoa_r+0x4ca>
 800c604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c606:	9d00      	ldr	r5, [sp, #0]
 800c608:	ea6f 0b03 	mvn.w	fp, r3
 800c60c:	f04f 0800 	mov.w	r8, #0
 800c610:	4631      	mov	r1, r6
 800c612:	4620      	mov	r0, r4
 800c614:	f000 fa7e 	bl	800cb14 <_Bfree>
 800c618:	2f00      	cmp	r7, #0
 800c61a:	f43f aeab 	beq.w	800c374 <_dtoa_r+0x6c4>
 800c61e:	f1b8 0f00 	cmp.w	r8, #0
 800c622:	d005      	beq.n	800c630 <_dtoa_r+0x980>
 800c624:	45b8      	cmp	r8, r7
 800c626:	d003      	beq.n	800c630 <_dtoa_r+0x980>
 800c628:	4641      	mov	r1, r8
 800c62a:	4620      	mov	r0, r4
 800c62c:	f000 fa72 	bl	800cb14 <_Bfree>
 800c630:	4639      	mov	r1, r7
 800c632:	4620      	mov	r0, r4
 800c634:	f000 fa6e 	bl	800cb14 <_Bfree>
 800c638:	e69c      	b.n	800c374 <_dtoa_r+0x6c4>
 800c63a:	2600      	movs	r6, #0
 800c63c:	4637      	mov	r7, r6
 800c63e:	e7e1      	b.n	800c604 <_dtoa_r+0x954>
 800c640:	46bb      	mov	fp, r7
 800c642:	4637      	mov	r7, r6
 800c644:	e599      	b.n	800c17a <_dtoa_r+0x4ca>
 800c646:	bf00      	nop
 800c648:	40240000 	.word	0x40240000
 800c64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f000 80c8 	beq.w	800c7e4 <_dtoa_r+0xb34>
 800c654:	9b04      	ldr	r3, [sp, #16]
 800c656:	9301      	str	r3, [sp, #4]
 800c658:	2d00      	cmp	r5, #0
 800c65a:	dd05      	ble.n	800c668 <_dtoa_r+0x9b8>
 800c65c:	4639      	mov	r1, r7
 800c65e:	462a      	mov	r2, r5
 800c660:	4620      	mov	r0, r4
 800c662:	f000 fc27 	bl	800ceb4 <__lshift>
 800c666:	4607      	mov	r7, r0
 800c668:	f1b8 0f00 	cmp.w	r8, #0
 800c66c:	d05b      	beq.n	800c726 <_dtoa_r+0xa76>
 800c66e:	6879      	ldr	r1, [r7, #4]
 800c670:	4620      	mov	r0, r4
 800c672:	f000 fa0f 	bl	800ca94 <_Balloc>
 800c676:	4605      	mov	r5, r0
 800c678:	b928      	cbnz	r0, 800c686 <_dtoa_r+0x9d6>
 800c67a:	4b83      	ldr	r3, [pc, #524]	; (800c888 <_dtoa_r+0xbd8>)
 800c67c:	4602      	mov	r2, r0
 800c67e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c682:	f7ff bb2e 	b.w	800bce2 <_dtoa_r+0x32>
 800c686:	693a      	ldr	r2, [r7, #16]
 800c688:	3202      	adds	r2, #2
 800c68a:	0092      	lsls	r2, r2, #2
 800c68c:	f107 010c 	add.w	r1, r7, #12
 800c690:	300c      	adds	r0, #12
 800c692:	f7ff fa76 	bl	800bb82 <memcpy>
 800c696:	2201      	movs	r2, #1
 800c698:	4629      	mov	r1, r5
 800c69a:	4620      	mov	r0, r4
 800c69c:	f000 fc0a 	bl	800ceb4 <__lshift>
 800c6a0:	9b00      	ldr	r3, [sp, #0]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	9304      	str	r3, [sp, #16]
 800c6a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	9308      	str	r3, [sp, #32]
 800c6ae:	9b02      	ldr	r3, [sp, #8]
 800c6b0:	f003 0301 	and.w	r3, r3, #1
 800c6b4:	46b8      	mov	r8, r7
 800c6b6:	9306      	str	r3, [sp, #24]
 800c6b8:	4607      	mov	r7, r0
 800c6ba:	9b04      	ldr	r3, [sp, #16]
 800c6bc:	4631      	mov	r1, r6
 800c6be:	3b01      	subs	r3, #1
 800c6c0:	4650      	mov	r0, sl
 800c6c2:	9301      	str	r3, [sp, #4]
 800c6c4:	f7ff fa6b 	bl	800bb9e <quorem>
 800c6c8:	4641      	mov	r1, r8
 800c6ca:	9002      	str	r0, [sp, #8]
 800c6cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c6d0:	4650      	mov	r0, sl
 800c6d2:	f000 fc5b 	bl	800cf8c <__mcmp>
 800c6d6:	463a      	mov	r2, r7
 800c6d8:	9005      	str	r0, [sp, #20]
 800c6da:	4631      	mov	r1, r6
 800c6dc:	4620      	mov	r0, r4
 800c6de:	f000 fc71 	bl	800cfc4 <__mdiff>
 800c6e2:	68c2      	ldr	r2, [r0, #12]
 800c6e4:	4605      	mov	r5, r0
 800c6e6:	bb02      	cbnz	r2, 800c72a <_dtoa_r+0xa7a>
 800c6e8:	4601      	mov	r1, r0
 800c6ea:	4650      	mov	r0, sl
 800c6ec:	f000 fc4e 	bl	800cf8c <__mcmp>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	4629      	mov	r1, r5
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	9209      	str	r2, [sp, #36]	; 0x24
 800c6f8:	f000 fa0c 	bl	800cb14 <_Bfree>
 800c6fc:	9b07      	ldr	r3, [sp, #28]
 800c6fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c700:	9d04      	ldr	r5, [sp, #16]
 800c702:	ea43 0102 	orr.w	r1, r3, r2
 800c706:	9b06      	ldr	r3, [sp, #24]
 800c708:	4319      	orrs	r1, r3
 800c70a:	d110      	bne.n	800c72e <_dtoa_r+0xa7e>
 800c70c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c710:	d029      	beq.n	800c766 <_dtoa_r+0xab6>
 800c712:	9b05      	ldr	r3, [sp, #20]
 800c714:	2b00      	cmp	r3, #0
 800c716:	dd02      	ble.n	800c71e <_dtoa_r+0xa6e>
 800c718:	9b02      	ldr	r3, [sp, #8]
 800c71a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c71e:	9b01      	ldr	r3, [sp, #4]
 800c720:	f883 9000 	strb.w	r9, [r3]
 800c724:	e774      	b.n	800c610 <_dtoa_r+0x960>
 800c726:	4638      	mov	r0, r7
 800c728:	e7ba      	b.n	800c6a0 <_dtoa_r+0x9f0>
 800c72a:	2201      	movs	r2, #1
 800c72c:	e7e1      	b.n	800c6f2 <_dtoa_r+0xa42>
 800c72e:	9b05      	ldr	r3, [sp, #20]
 800c730:	2b00      	cmp	r3, #0
 800c732:	db04      	blt.n	800c73e <_dtoa_r+0xa8e>
 800c734:	9907      	ldr	r1, [sp, #28]
 800c736:	430b      	orrs	r3, r1
 800c738:	9906      	ldr	r1, [sp, #24]
 800c73a:	430b      	orrs	r3, r1
 800c73c:	d120      	bne.n	800c780 <_dtoa_r+0xad0>
 800c73e:	2a00      	cmp	r2, #0
 800c740:	dded      	ble.n	800c71e <_dtoa_r+0xa6e>
 800c742:	4651      	mov	r1, sl
 800c744:	2201      	movs	r2, #1
 800c746:	4620      	mov	r0, r4
 800c748:	f000 fbb4 	bl	800ceb4 <__lshift>
 800c74c:	4631      	mov	r1, r6
 800c74e:	4682      	mov	sl, r0
 800c750:	f000 fc1c 	bl	800cf8c <__mcmp>
 800c754:	2800      	cmp	r0, #0
 800c756:	dc03      	bgt.n	800c760 <_dtoa_r+0xab0>
 800c758:	d1e1      	bne.n	800c71e <_dtoa_r+0xa6e>
 800c75a:	f019 0f01 	tst.w	r9, #1
 800c75e:	d0de      	beq.n	800c71e <_dtoa_r+0xa6e>
 800c760:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c764:	d1d8      	bne.n	800c718 <_dtoa_r+0xa68>
 800c766:	9a01      	ldr	r2, [sp, #4]
 800c768:	2339      	movs	r3, #57	; 0x39
 800c76a:	7013      	strb	r3, [r2, #0]
 800c76c:	462b      	mov	r3, r5
 800c76e:	461d      	mov	r5, r3
 800c770:	3b01      	subs	r3, #1
 800c772:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c776:	2a39      	cmp	r2, #57	; 0x39
 800c778:	d06c      	beq.n	800c854 <_dtoa_r+0xba4>
 800c77a:	3201      	adds	r2, #1
 800c77c:	701a      	strb	r2, [r3, #0]
 800c77e:	e747      	b.n	800c610 <_dtoa_r+0x960>
 800c780:	2a00      	cmp	r2, #0
 800c782:	dd07      	ble.n	800c794 <_dtoa_r+0xae4>
 800c784:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c788:	d0ed      	beq.n	800c766 <_dtoa_r+0xab6>
 800c78a:	9a01      	ldr	r2, [sp, #4]
 800c78c:	f109 0301 	add.w	r3, r9, #1
 800c790:	7013      	strb	r3, [r2, #0]
 800c792:	e73d      	b.n	800c610 <_dtoa_r+0x960>
 800c794:	9b04      	ldr	r3, [sp, #16]
 800c796:	9a08      	ldr	r2, [sp, #32]
 800c798:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d043      	beq.n	800c828 <_dtoa_r+0xb78>
 800c7a0:	4651      	mov	r1, sl
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	220a      	movs	r2, #10
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f000 f9d6 	bl	800cb58 <__multadd>
 800c7ac:	45b8      	cmp	r8, r7
 800c7ae:	4682      	mov	sl, r0
 800c7b0:	f04f 0300 	mov.w	r3, #0
 800c7b4:	f04f 020a 	mov.w	r2, #10
 800c7b8:	4641      	mov	r1, r8
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	d107      	bne.n	800c7ce <_dtoa_r+0xb1e>
 800c7be:	f000 f9cb 	bl	800cb58 <__multadd>
 800c7c2:	4680      	mov	r8, r0
 800c7c4:	4607      	mov	r7, r0
 800c7c6:	9b04      	ldr	r3, [sp, #16]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	9304      	str	r3, [sp, #16]
 800c7cc:	e775      	b.n	800c6ba <_dtoa_r+0xa0a>
 800c7ce:	f000 f9c3 	bl	800cb58 <__multadd>
 800c7d2:	4639      	mov	r1, r7
 800c7d4:	4680      	mov	r8, r0
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	220a      	movs	r2, #10
 800c7da:	4620      	mov	r0, r4
 800c7dc:	f000 f9bc 	bl	800cb58 <__multadd>
 800c7e0:	4607      	mov	r7, r0
 800c7e2:	e7f0      	b.n	800c7c6 <_dtoa_r+0xb16>
 800c7e4:	9b04      	ldr	r3, [sp, #16]
 800c7e6:	9301      	str	r3, [sp, #4]
 800c7e8:	9d00      	ldr	r5, [sp, #0]
 800c7ea:	4631      	mov	r1, r6
 800c7ec:	4650      	mov	r0, sl
 800c7ee:	f7ff f9d6 	bl	800bb9e <quorem>
 800c7f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c7f6:	9b00      	ldr	r3, [sp, #0]
 800c7f8:	f805 9b01 	strb.w	r9, [r5], #1
 800c7fc:	1aea      	subs	r2, r5, r3
 800c7fe:	9b01      	ldr	r3, [sp, #4]
 800c800:	4293      	cmp	r3, r2
 800c802:	dd07      	ble.n	800c814 <_dtoa_r+0xb64>
 800c804:	4651      	mov	r1, sl
 800c806:	2300      	movs	r3, #0
 800c808:	220a      	movs	r2, #10
 800c80a:	4620      	mov	r0, r4
 800c80c:	f000 f9a4 	bl	800cb58 <__multadd>
 800c810:	4682      	mov	sl, r0
 800c812:	e7ea      	b.n	800c7ea <_dtoa_r+0xb3a>
 800c814:	9b01      	ldr	r3, [sp, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	bfc8      	it	gt
 800c81a:	461d      	movgt	r5, r3
 800c81c:	9b00      	ldr	r3, [sp, #0]
 800c81e:	bfd8      	it	le
 800c820:	2501      	movle	r5, #1
 800c822:	441d      	add	r5, r3
 800c824:	f04f 0800 	mov.w	r8, #0
 800c828:	4651      	mov	r1, sl
 800c82a:	2201      	movs	r2, #1
 800c82c:	4620      	mov	r0, r4
 800c82e:	f000 fb41 	bl	800ceb4 <__lshift>
 800c832:	4631      	mov	r1, r6
 800c834:	4682      	mov	sl, r0
 800c836:	f000 fba9 	bl	800cf8c <__mcmp>
 800c83a:	2800      	cmp	r0, #0
 800c83c:	dc96      	bgt.n	800c76c <_dtoa_r+0xabc>
 800c83e:	d102      	bne.n	800c846 <_dtoa_r+0xb96>
 800c840:	f019 0f01 	tst.w	r9, #1
 800c844:	d192      	bne.n	800c76c <_dtoa_r+0xabc>
 800c846:	462b      	mov	r3, r5
 800c848:	461d      	mov	r5, r3
 800c84a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c84e:	2a30      	cmp	r2, #48	; 0x30
 800c850:	d0fa      	beq.n	800c848 <_dtoa_r+0xb98>
 800c852:	e6dd      	b.n	800c610 <_dtoa_r+0x960>
 800c854:	9a00      	ldr	r2, [sp, #0]
 800c856:	429a      	cmp	r2, r3
 800c858:	d189      	bne.n	800c76e <_dtoa_r+0xabe>
 800c85a:	f10b 0b01 	add.w	fp, fp, #1
 800c85e:	2331      	movs	r3, #49	; 0x31
 800c860:	e796      	b.n	800c790 <_dtoa_r+0xae0>
 800c862:	4b0a      	ldr	r3, [pc, #40]	; (800c88c <_dtoa_r+0xbdc>)
 800c864:	f7ff ba99 	b.w	800bd9a <_dtoa_r+0xea>
 800c868:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f47f aa6d 	bne.w	800bd4a <_dtoa_r+0x9a>
 800c870:	4b07      	ldr	r3, [pc, #28]	; (800c890 <_dtoa_r+0xbe0>)
 800c872:	f7ff ba92 	b.w	800bd9a <_dtoa_r+0xea>
 800c876:	9b01      	ldr	r3, [sp, #4]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	dcb5      	bgt.n	800c7e8 <_dtoa_r+0xb38>
 800c87c:	9b07      	ldr	r3, [sp, #28]
 800c87e:	2b02      	cmp	r3, #2
 800c880:	f73f aeb1 	bgt.w	800c5e6 <_dtoa_r+0x936>
 800c884:	e7b0      	b.n	800c7e8 <_dtoa_r+0xb38>
 800c886:	bf00      	nop
 800c888:	0800da70 	.word	0x0800da70
 800c88c:	0800d9d0 	.word	0x0800d9d0
 800c890:	0800d9f4 	.word	0x0800d9f4

0800c894 <_free_r>:
 800c894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c896:	2900      	cmp	r1, #0
 800c898:	d044      	beq.n	800c924 <_free_r+0x90>
 800c89a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c89e:	9001      	str	r0, [sp, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f1a1 0404 	sub.w	r4, r1, #4
 800c8a6:	bfb8      	it	lt
 800c8a8:	18e4      	addlt	r4, r4, r3
 800c8aa:	f000 f8e7 	bl	800ca7c <__malloc_lock>
 800c8ae:	4a1e      	ldr	r2, [pc, #120]	; (800c928 <_free_r+0x94>)
 800c8b0:	9801      	ldr	r0, [sp, #4]
 800c8b2:	6813      	ldr	r3, [r2, #0]
 800c8b4:	b933      	cbnz	r3, 800c8c4 <_free_r+0x30>
 800c8b6:	6063      	str	r3, [r4, #4]
 800c8b8:	6014      	str	r4, [r2, #0]
 800c8ba:	b003      	add	sp, #12
 800c8bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c8c0:	f000 b8e2 	b.w	800ca88 <__malloc_unlock>
 800c8c4:	42a3      	cmp	r3, r4
 800c8c6:	d908      	bls.n	800c8da <_free_r+0x46>
 800c8c8:	6825      	ldr	r5, [r4, #0]
 800c8ca:	1961      	adds	r1, r4, r5
 800c8cc:	428b      	cmp	r3, r1
 800c8ce:	bf01      	itttt	eq
 800c8d0:	6819      	ldreq	r1, [r3, #0]
 800c8d2:	685b      	ldreq	r3, [r3, #4]
 800c8d4:	1949      	addeq	r1, r1, r5
 800c8d6:	6021      	streq	r1, [r4, #0]
 800c8d8:	e7ed      	b.n	800c8b6 <_free_r+0x22>
 800c8da:	461a      	mov	r2, r3
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	b10b      	cbz	r3, 800c8e4 <_free_r+0x50>
 800c8e0:	42a3      	cmp	r3, r4
 800c8e2:	d9fa      	bls.n	800c8da <_free_r+0x46>
 800c8e4:	6811      	ldr	r1, [r2, #0]
 800c8e6:	1855      	adds	r5, r2, r1
 800c8e8:	42a5      	cmp	r5, r4
 800c8ea:	d10b      	bne.n	800c904 <_free_r+0x70>
 800c8ec:	6824      	ldr	r4, [r4, #0]
 800c8ee:	4421      	add	r1, r4
 800c8f0:	1854      	adds	r4, r2, r1
 800c8f2:	42a3      	cmp	r3, r4
 800c8f4:	6011      	str	r1, [r2, #0]
 800c8f6:	d1e0      	bne.n	800c8ba <_free_r+0x26>
 800c8f8:	681c      	ldr	r4, [r3, #0]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	6053      	str	r3, [r2, #4]
 800c8fe:	440c      	add	r4, r1
 800c900:	6014      	str	r4, [r2, #0]
 800c902:	e7da      	b.n	800c8ba <_free_r+0x26>
 800c904:	d902      	bls.n	800c90c <_free_r+0x78>
 800c906:	230c      	movs	r3, #12
 800c908:	6003      	str	r3, [r0, #0]
 800c90a:	e7d6      	b.n	800c8ba <_free_r+0x26>
 800c90c:	6825      	ldr	r5, [r4, #0]
 800c90e:	1961      	adds	r1, r4, r5
 800c910:	428b      	cmp	r3, r1
 800c912:	bf04      	itt	eq
 800c914:	6819      	ldreq	r1, [r3, #0]
 800c916:	685b      	ldreq	r3, [r3, #4]
 800c918:	6063      	str	r3, [r4, #4]
 800c91a:	bf04      	itt	eq
 800c91c:	1949      	addeq	r1, r1, r5
 800c91e:	6021      	streq	r1, [r4, #0]
 800c920:	6054      	str	r4, [r2, #4]
 800c922:	e7ca      	b.n	800c8ba <_free_r+0x26>
 800c924:	b003      	add	sp, #12
 800c926:	bd30      	pop	{r4, r5, pc}
 800c928:	20004c38 	.word	0x20004c38

0800c92c <malloc>:
 800c92c:	4b02      	ldr	r3, [pc, #8]	; (800c938 <malloc+0xc>)
 800c92e:	4601      	mov	r1, r0
 800c930:	6818      	ldr	r0, [r3, #0]
 800c932:	f000 b823 	b.w	800c97c <_malloc_r>
 800c936:	bf00      	nop
 800c938:	20000068 	.word	0x20000068

0800c93c <sbrk_aligned>:
 800c93c:	b570      	push	{r4, r5, r6, lr}
 800c93e:	4e0e      	ldr	r6, [pc, #56]	; (800c978 <sbrk_aligned+0x3c>)
 800c940:	460c      	mov	r4, r1
 800c942:	6831      	ldr	r1, [r6, #0]
 800c944:	4605      	mov	r5, r0
 800c946:	b911      	cbnz	r1, 800c94e <sbrk_aligned+0x12>
 800c948:	f000 fcce 	bl	800d2e8 <_sbrk_r>
 800c94c:	6030      	str	r0, [r6, #0]
 800c94e:	4621      	mov	r1, r4
 800c950:	4628      	mov	r0, r5
 800c952:	f000 fcc9 	bl	800d2e8 <_sbrk_r>
 800c956:	1c43      	adds	r3, r0, #1
 800c958:	d00a      	beq.n	800c970 <sbrk_aligned+0x34>
 800c95a:	1cc4      	adds	r4, r0, #3
 800c95c:	f024 0403 	bic.w	r4, r4, #3
 800c960:	42a0      	cmp	r0, r4
 800c962:	d007      	beq.n	800c974 <sbrk_aligned+0x38>
 800c964:	1a21      	subs	r1, r4, r0
 800c966:	4628      	mov	r0, r5
 800c968:	f000 fcbe 	bl	800d2e8 <_sbrk_r>
 800c96c:	3001      	adds	r0, #1
 800c96e:	d101      	bne.n	800c974 <sbrk_aligned+0x38>
 800c970:	f04f 34ff 	mov.w	r4, #4294967295
 800c974:	4620      	mov	r0, r4
 800c976:	bd70      	pop	{r4, r5, r6, pc}
 800c978:	20004c3c 	.word	0x20004c3c

0800c97c <_malloc_r>:
 800c97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c980:	1ccd      	adds	r5, r1, #3
 800c982:	f025 0503 	bic.w	r5, r5, #3
 800c986:	3508      	adds	r5, #8
 800c988:	2d0c      	cmp	r5, #12
 800c98a:	bf38      	it	cc
 800c98c:	250c      	movcc	r5, #12
 800c98e:	2d00      	cmp	r5, #0
 800c990:	4607      	mov	r7, r0
 800c992:	db01      	blt.n	800c998 <_malloc_r+0x1c>
 800c994:	42a9      	cmp	r1, r5
 800c996:	d905      	bls.n	800c9a4 <_malloc_r+0x28>
 800c998:	230c      	movs	r3, #12
 800c99a:	603b      	str	r3, [r7, #0]
 800c99c:	2600      	movs	r6, #0
 800c99e:	4630      	mov	r0, r6
 800c9a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ca78 <_malloc_r+0xfc>
 800c9a8:	f000 f868 	bl	800ca7c <__malloc_lock>
 800c9ac:	f8d8 3000 	ldr.w	r3, [r8]
 800c9b0:	461c      	mov	r4, r3
 800c9b2:	bb5c      	cbnz	r4, 800ca0c <_malloc_r+0x90>
 800c9b4:	4629      	mov	r1, r5
 800c9b6:	4638      	mov	r0, r7
 800c9b8:	f7ff ffc0 	bl	800c93c <sbrk_aligned>
 800c9bc:	1c43      	adds	r3, r0, #1
 800c9be:	4604      	mov	r4, r0
 800c9c0:	d155      	bne.n	800ca6e <_malloc_r+0xf2>
 800c9c2:	f8d8 4000 	ldr.w	r4, [r8]
 800c9c6:	4626      	mov	r6, r4
 800c9c8:	2e00      	cmp	r6, #0
 800c9ca:	d145      	bne.n	800ca58 <_malloc_r+0xdc>
 800c9cc:	2c00      	cmp	r4, #0
 800c9ce:	d048      	beq.n	800ca62 <_malloc_r+0xe6>
 800c9d0:	6823      	ldr	r3, [r4, #0]
 800c9d2:	4631      	mov	r1, r6
 800c9d4:	4638      	mov	r0, r7
 800c9d6:	eb04 0903 	add.w	r9, r4, r3
 800c9da:	f000 fc85 	bl	800d2e8 <_sbrk_r>
 800c9de:	4581      	cmp	r9, r0
 800c9e0:	d13f      	bne.n	800ca62 <_malloc_r+0xe6>
 800c9e2:	6821      	ldr	r1, [r4, #0]
 800c9e4:	1a6d      	subs	r5, r5, r1
 800c9e6:	4629      	mov	r1, r5
 800c9e8:	4638      	mov	r0, r7
 800c9ea:	f7ff ffa7 	bl	800c93c <sbrk_aligned>
 800c9ee:	3001      	adds	r0, #1
 800c9f0:	d037      	beq.n	800ca62 <_malloc_r+0xe6>
 800c9f2:	6823      	ldr	r3, [r4, #0]
 800c9f4:	442b      	add	r3, r5
 800c9f6:	6023      	str	r3, [r4, #0]
 800c9f8:	f8d8 3000 	ldr.w	r3, [r8]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d038      	beq.n	800ca72 <_malloc_r+0xf6>
 800ca00:	685a      	ldr	r2, [r3, #4]
 800ca02:	42a2      	cmp	r2, r4
 800ca04:	d12b      	bne.n	800ca5e <_malloc_r+0xe2>
 800ca06:	2200      	movs	r2, #0
 800ca08:	605a      	str	r2, [r3, #4]
 800ca0a:	e00f      	b.n	800ca2c <_malloc_r+0xb0>
 800ca0c:	6822      	ldr	r2, [r4, #0]
 800ca0e:	1b52      	subs	r2, r2, r5
 800ca10:	d41f      	bmi.n	800ca52 <_malloc_r+0xd6>
 800ca12:	2a0b      	cmp	r2, #11
 800ca14:	d917      	bls.n	800ca46 <_malloc_r+0xca>
 800ca16:	1961      	adds	r1, r4, r5
 800ca18:	42a3      	cmp	r3, r4
 800ca1a:	6025      	str	r5, [r4, #0]
 800ca1c:	bf18      	it	ne
 800ca1e:	6059      	strne	r1, [r3, #4]
 800ca20:	6863      	ldr	r3, [r4, #4]
 800ca22:	bf08      	it	eq
 800ca24:	f8c8 1000 	streq.w	r1, [r8]
 800ca28:	5162      	str	r2, [r4, r5]
 800ca2a:	604b      	str	r3, [r1, #4]
 800ca2c:	4638      	mov	r0, r7
 800ca2e:	f104 060b 	add.w	r6, r4, #11
 800ca32:	f000 f829 	bl	800ca88 <__malloc_unlock>
 800ca36:	f026 0607 	bic.w	r6, r6, #7
 800ca3a:	1d23      	adds	r3, r4, #4
 800ca3c:	1af2      	subs	r2, r6, r3
 800ca3e:	d0ae      	beq.n	800c99e <_malloc_r+0x22>
 800ca40:	1b9b      	subs	r3, r3, r6
 800ca42:	50a3      	str	r3, [r4, r2]
 800ca44:	e7ab      	b.n	800c99e <_malloc_r+0x22>
 800ca46:	42a3      	cmp	r3, r4
 800ca48:	6862      	ldr	r2, [r4, #4]
 800ca4a:	d1dd      	bne.n	800ca08 <_malloc_r+0x8c>
 800ca4c:	f8c8 2000 	str.w	r2, [r8]
 800ca50:	e7ec      	b.n	800ca2c <_malloc_r+0xb0>
 800ca52:	4623      	mov	r3, r4
 800ca54:	6864      	ldr	r4, [r4, #4]
 800ca56:	e7ac      	b.n	800c9b2 <_malloc_r+0x36>
 800ca58:	4634      	mov	r4, r6
 800ca5a:	6876      	ldr	r6, [r6, #4]
 800ca5c:	e7b4      	b.n	800c9c8 <_malloc_r+0x4c>
 800ca5e:	4613      	mov	r3, r2
 800ca60:	e7cc      	b.n	800c9fc <_malloc_r+0x80>
 800ca62:	230c      	movs	r3, #12
 800ca64:	603b      	str	r3, [r7, #0]
 800ca66:	4638      	mov	r0, r7
 800ca68:	f000 f80e 	bl	800ca88 <__malloc_unlock>
 800ca6c:	e797      	b.n	800c99e <_malloc_r+0x22>
 800ca6e:	6025      	str	r5, [r4, #0]
 800ca70:	e7dc      	b.n	800ca2c <_malloc_r+0xb0>
 800ca72:	605b      	str	r3, [r3, #4]
 800ca74:	deff      	udf	#255	; 0xff
 800ca76:	bf00      	nop
 800ca78:	20004c38 	.word	0x20004c38

0800ca7c <__malloc_lock>:
 800ca7c:	4801      	ldr	r0, [pc, #4]	; (800ca84 <__malloc_lock+0x8>)
 800ca7e:	f7ff b87e 	b.w	800bb7e <__retarget_lock_acquire_recursive>
 800ca82:	bf00      	nop
 800ca84:	20004c34 	.word	0x20004c34

0800ca88 <__malloc_unlock>:
 800ca88:	4801      	ldr	r0, [pc, #4]	; (800ca90 <__malloc_unlock+0x8>)
 800ca8a:	f7ff b879 	b.w	800bb80 <__retarget_lock_release_recursive>
 800ca8e:	bf00      	nop
 800ca90:	20004c34 	.word	0x20004c34

0800ca94 <_Balloc>:
 800ca94:	b570      	push	{r4, r5, r6, lr}
 800ca96:	69c6      	ldr	r6, [r0, #28]
 800ca98:	4604      	mov	r4, r0
 800ca9a:	460d      	mov	r5, r1
 800ca9c:	b976      	cbnz	r6, 800cabc <_Balloc+0x28>
 800ca9e:	2010      	movs	r0, #16
 800caa0:	f7ff ff44 	bl	800c92c <malloc>
 800caa4:	4602      	mov	r2, r0
 800caa6:	61e0      	str	r0, [r4, #28]
 800caa8:	b920      	cbnz	r0, 800cab4 <_Balloc+0x20>
 800caaa:	4b18      	ldr	r3, [pc, #96]	; (800cb0c <_Balloc+0x78>)
 800caac:	4818      	ldr	r0, [pc, #96]	; (800cb10 <_Balloc+0x7c>)
 800caae:	216b      	movs	r1, #107	; 0x6b
 800cab0:	f000 fc2a 	bl	800d308 <__assert_func>
 800cab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cab8:	6006      	str	r6, [r0, #0]
 800caba:	60c6      	str	r6, [r0, #12]
 800cabc:	69e6      	ldr	r6, [r4, #28]
 800cabe:	68f3      	ldr	r3, [r6, #12]
 800cac0:	b183      	cbz	r3, 800cae4 <_Balloc+0x50>
 800cac2:	69e3      	ldr	r3, [r4, #28]
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800caca:	b9b8      	cbnz	r0, 800cafc <_Balloc+0x68>
 800cacc:	2101      	movs	r1, #1
 800cace:	fa01 f605 	lsl.w	r6, r1, r5
 800cad2:	1d72      	adds	r2, r6, #5
 800cad4:	0092      	lsls	r2, r2, #2
 800cad6:	4620      	mov	r0, r4
 800cad8:	f000 fc34 	bl	800d344 <_calloc_r>
 800cadc:	b160      	cbz	r0, 800caf8 <_Balloc+0x64>
 800cade:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cae2:	e00e      	b.n	800cb02 <_Balloc+0x6e>
 800cae4:	2221      	movs	r2, #33	; 0x21
 800cae6:	2104      	movs	r1, #4
 800cae8:	4620      	mov	r0, r4
 800caea:	f000 fc2b 	bl	800d344 <_calloc_r>
 800caee:	69e3      	ldr	r3, [r4, #28]
 800caf0:	60f0      	str	r0, [r6, #12]
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1e4      	bne.n	800cac2 <_Balloc+0x2e>
 800caf8:	2000      	movs	r0, #0
 800cafa:	bd70      	pop	{r4, r5, r6, pc}
 800cafc:	6802      	ldr	r2, [r0, #0]
 800cafe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb02:	2300      	movs	r3, #0
 800cb04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb08:	e7f7      	b.n	800cafa <_Balloc+0x66>
 800cb0a:	bf00      	nop
 800cb0c:	0800da01 	.word	0x0800da01
 800cb10:	0800da81 	.word	0x0800da81

0800cb14 <_Bfree>:
 800cb14:	b570      	push	{r4, r5, r6, lr}
 800cb16:	69c6      	ldr	r6, [r0, #28]
 800cb18:	4605      	mov	r5, r0
 800cb1a:	460c      	mov	r4, r1
 800cb1c:	b976      	cbnz	r6, 800cb3c <_Bfree+0x28>
 800cb1e:	2010      	movs	r0, #16
 800cb20:	f7ff ff04 	bl	800c92c <malloc>
 800cb24:	4602      	mov	r2, r0
 800cb26:	61e8      	str	r0, [r5, #28]
 800cb28:	b920      	cbnz	r0, 800cb34 <_Bfree+0x20>
 800cb2a:	4b09      	ldr	r3, [pc, #36]	; (800cb50 <_Bfree+0x3c>)
 800cb2c:	4809      	ldr	r0, [pc, #36]	; (800cb54 <_Bfree+0x40>)
 800cb2e:	218f      	movs	r1, #143	; 0x8f
 800cb30:	f000 fbea 	bl	800d308 <__assert_func>
 800cb34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb38:	6006      	str	r6, [r0, #0]
 800cb3a:	60c6      	str	r6, [r0, #12]
 800cb3c:	b13c      	cbz	r4, 800cb4e <_Bfree+0x3a>
 800cb3e:	69eb      	ldr	r3, [r5, #28]
 800cb40:	6862      	ldr	r2, [r4, #4]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb48:	6021      	str	r1, [r4, #0]
 800cb4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb4e:	bd70      	pop	{r4, r5, r6, pc}
 800cb50:	0800da01 	.word	0x0800da01
 800cb54:	0800da81 	.word	0x0800da81

0800cb58 <__multadd>:
 800cb58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb5c:	690d      	ldr	r5, [r1, #16]
 800cb5e:	4607      	mov	r7, r0
 800cb60:	460c      	mov	r4, r1
 800cb62:	461e      	mov	r6, r3
 800cb64:	f101 0c14 	add.w	ip, r1, #20
 800cb68:	2000      	movs	r0, #0
 800cb6a:	f8dc 3000 	ldr.w	r3, [ip]
 800cb6e:	b299      	uxth	r1, r3
 800cb70:	fb02 6101 	mla	r1, r2, r1, r6
 800cb74:	0c1e      	lsrs	r6, r3, #16
 800cb76:	0c0b      	lsrs	r3, r1, #16
 800cb78:	fb02 3306 	mla	r3, r2, r6, r3
 800cb7c:	b289      	uxth	r1, r1
 800cb7e:	3001      	adds	r0, #1
 800cb80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb84:	4285      	cmp	r5, r0
 800cb86:	f84c 1b04 	str.w	r1, [ip], #4
 800cb8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb8e:	dcec      	bgt.n	800cb6a <__multadd+0x12>
 800cb90:	b30e      	cbz	r6, 800cbd6 <__multadd+0x7e>
 800cb92:	68a3      	ldr	r3, [r4, #8]
 800cb94:	42ab      	cmp	r3, r5
 800cb96:	dc19      	bgt.n	800cbcc <__multadd+0x74>
 800cb98:	6861      	ldr	r1, [r4, #4]
 800cb9a:	4638      	mov	r0, r7
 800cb9c:	3101      	adds	r1, #1
 800cb9e:	f7ff ff79 	bl	800ca94 <_Balloc>
 800cba2:	4680      	mov	r8, r0
 800cba4:	b928      	cbnz	r0, 800cbb2 <__multadd+0x5a>
 800cba6:	4602      	mov	r2, r0
 800cba8:	4b0c      	ldr	r3, [pc, #48]	; (800cbdc <__multadd+0x84>)
 800cbaa:	480d      	ldr	r0, [pc, #52]	; (800cbe0 <__multadd+0x88>)
 800cbac:	21ba      	movs	r1, #186	; 0xba
 800cbae:	f000 fbab 	bl	800d308 <__assert_func>
 800cbb2:	6922      	ldr	r2, [r4, #16]
 800cbb4:	3202      	adds	r2, #2
 800cbb6:	f104 010c 	add.w	r1, r4, #12
 800cbba:	0092      	lsls	r2, r2, #2
 800cbbc:	300c      	adds	r0, #12
 800cbbe:	f7fe ffe0 	bl	800bb82 <memcpy>
 800cbc2:	4621      	mov	r1, r4
 800cbc4:	4638      	mov	r0, r7
 800cbc6:	f7ff ffa5 	bl	800cb14 <_Bfree>
 800cbca:	4644      	mov	r4, r8
 800cbcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cbd0:	3501      	adds	r5, #1
 800cbd2:	615e      	str	r6, [r3, #20]
 800cbd4:	6125      	str	r5, [r4, #16]
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbdc:	0800da70 	.word	0x0800da70
 800cbe0:	0800da81 	.word	0x0800da81

0800cbe4 <__hi0bits>:
 800cbe4:	0c03      	lsrs	r3, r0, #16
 800cbe6:	041b      	lsls	r3, r3, #16
 800cbe8:	b9d3      	cbnz	r3, 800cc20 <__hi0bits+0x3c>
 800cbea:	0400      	lsls	r0, r0, #16
 800cbec:	2310      	movs	r3, #16
 800cbee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cbf2:	bf04      	itt	eq
 800cbf4:	0200      	lsleq	r0, r0, #8
 800cbf6:	3308      	addeq	r3, #8
 800cbf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cbfc:	bf04      	itt	eq
 800cbfe:	0100      	lsleq	r0, r0, #4
 800cc00:	3304      	addeq	r3, #4
 800cc02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cc06:	bf04      	itt	eq
 800cc08:	0080      	lsleq	r0, r0, #2
 800cc0a:	3302      	addeq	r3, #2
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	db05      	blt.n	800cc1c <__hi0bits+0x38>
 800cc10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cc14:	f103 0301 	add.w	r3, r3, #1
 800cc18:	bf08      	it	eq
 800cc1a:	2320      	moveq	r3, #32
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	4770      	bx	lr
 800cc20:	2300      	movs	r3, #0
 800cc22:	e7e4      	b.n	800cbee <__hi0bits+0xa>

0800cc24 <__lo0bits>:
 800cc24:	6803      	ldr	r3, [r0, #0]
 800cc26:	f013 0207 	ands.w	r2, r3, #7
 800cc2a:	d00c      	beq.n	800cc46 <__lo0bits+0x22>
 800cc2c:	07d9      	lsls	r1, r3, #31
 800cc2e:	d422      	bmi.n	800cc76 <__lo0bits+0x52>
 800cc30:	079a      	lsls	r2, r3, #30
 800cc32:	bf49      	itett	mi
 800cc34:	085b      	lsrmi	r3, r3, #1
 800cc36:	089b      	lsrpl	r3, r3, #2
 800cc38:	6003      	strmi	r3, [r0, #0]
 800cc3a:	2201      	movmi	r2, #1
 800cc3c:	bf5c      	itt	pl
 800cc3e:	6003      	strpl	r3, [r0, #0]
 800cc40:	2202      	movpl	r2, #2
 800cc42:	4610      	mov	r0, r2
 800cc44:	4770      	bx	lr
 800cc46:	b299      	uxth	r1, r3
 800cc48:	b909      	cbnz	r1, 800cc4e <__lo0bits+0x2a>
 800cc4a:	0c1b      	lsrs	r3, r3, #16
 800cc4c:	2210      	movs	r2, #16
 800cc4e:	b2d9      	uxtb	r1, r3
 800cc50:	b909      	cbnz	r1, 800cc56 <__lo0bits+0x32>
 800cc52:	3208      	adds	r2, #8
 800cc54:	0a1b      	lsrs	r3, r3, #8
 800cc56:	0719      	lsls	r1, r3, #28
 800cc58:	bf04      	itt	eq
 800cc5a:	091b      	lsreq	r3, r3, #4
 800cc5c:	3204      	addeq	r2, #4
 800cc5e:	0799      	lsls	r1, r3, #30
 800cc60:	bf04      	itt	eq
 800cc62:	089b      	lsreq	r3, r3, #2
 800cc64:	3202      	addeq	r2, #2
 800cc66:	07d9      	lsls	r1, r3, #31
 800cc68:	d403      	bmi.n	800cc72 <__lo0bits+0x4e>
 800cc6a:	085b      	lsrs	r3, r3, #1
 800cc6c:	f102 0201 	add.w	r2, r2, #1
 800cc70:	d003      	beq.n	800cc7a <__lo0bits+0x56>
 800cc72:	6003      	str	r3, [r0, #0]
 800cc74:	e7e5      	b.n	800cc42 <__lo0bits+0x1e>
 800cc76:	2200      	movs	r2, #0
 800cc78:	e7e3      	b.n	800cc42 <__lo0bits+0x1e>
 800cc7a:	2220      	movs	r2, #32
 800cc7c:	e7e1      	b.n	800cc42 <__lo0bits+0x1e>
	...

0800cc80 <__i2b>:
 800cc80:	b510      	push	{r4, lr}
 800cc82:	460c      	mov	r4, r1
 800cc84:	2101      	movs	r1, #1
 800cc86:	f7ff ff05 	bl	800ca94 <_Balloc>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	b928      	cbnz	r0, 800cc9a <__i2b+0x1a>
 800cc8e:	4b05      	ldr	r3, [pc, #20]	; (800cca4 <__i2b+0x24>)
 800cc90:	4805      	ldr	r0, [pc, #20]	; (800cca8 <__i2b+0x28>)
 800cc92:	f240 1145 	movw	r1, #325	; 0x145
 800cc96:	f000 fb37 	bl	800d308 <__assert_func>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	6144      	str	r4, [r0, #20]
 800cc9e:	6103      	str	r3, [r0, #16]
 800cca0:	bd10      	pop	{r4, pc}
 800cca2:	bf00      	nop
 800cca4:	0800da70 	.word	0x0800da70
 800cca8:	0800da81 	.word	0x0800da81

0800ccac <__multiply>:
 800ccac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb0:	4691      	mov	r9, r2
 800ccb2:	690a      	ldr	r2, [r1, #16]
 800ccb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	bfb8      	it	lt
 800ccbc:	460b      	movlt	r3, r1
 800ccbe:	460c      	mov	r4, r1
 800ccc0:	bfbc      	itt	lt
 800ccc2:	464c      	movlt	r4, r9
 800ccc4:	4699      	movlt	r9, r3
 800ccc6:	6927      	ldr	r7, [r4, #16]
 800ccc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cccc:	68a3      	ldr	r3, [r4, #8]
 800ccce:	6861      	ldr	r1, [r4, #4]
 800ccd0:	eb07 060a 	add.w	r6, r7, sl
 800ccd4:	42b3      	cmp	r3, r6
 800ccd6:	b085      	sub	sp, #20
 800ccd8:	bfb8      	it	lt
 800ccda:	3101      	addlt	r1, #1
 800ccdc:	f7ff feda 	bl	800ca94 <_Balloc>
 800cce0:	b930      	cbnz	r0, 800ccf0 <__multiply+0x44>
 800cce2:	4602      	mov	r2, r0
 800cce4:	4b44      	ldr	r3, [pc, #272]	; (800cdf8 <__multiply+0x14c>)
 800cce6:	4845      	ldr	r0, [pc, #276]	; (800cdfc <__multiply+0x150>)
 800cce8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ccec:	f000 fb0c 	bl	800d308 <__assert_func>
 800ccf0:	f100 0514 	add.w	r5, r0, #20
 800ccf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ccf8:	462b      	mov	r3, r5
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	4543      	cmp	r3, r8
 800ccfe:	d321      	bcc.n	800cd44 <__multiply+0x98>
 800cd00:	f104 0314 	add.w	r3, r4, #20
 800cd04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cd08:	f109 0314 	add.w	r3, r9, #20
 800cd0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cd10:	9202      	str	r2, [sp, #8]
 800cd12:	1b3a      	subs	r2, r7, r4
 800cd14:	3a15      	subs	r2, #21
 800cd16:	f022 0203 	bic.w	r2, r2, #3
 800cd1a:	3204      	adds	r2, #4
 800cd1c:	f104 0115 	add.w	r1, r4, #21
 800cd20:	428f      	cmp	r7, r1
 800cd22:	bf38      	it	cc
 800cd24:	2204      	movcc	r2, #4
 800cd26:	9201      	str	r2, [sp, #4]
 800cd28:	9a02      	ldr	r2, [sp, #8]
 800cd2a:	9303      	str	r3, [sp, #12]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d80c      	bhi.n	800cd4a <__multiply+0x9e>
 800cd30:	2e00      	cmp	r6, #0
 800cd32:	dd03      	ble.n	800cd3c <__multiply+0x90>
 800cd34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d05b      	beq.n	800cdf4 <__multiply+0x148>
 800cd3c:	6106      	str	r6, [r0, #16]
 800cd3e:	b005      	add	sp, #20
 800cd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd44:	f843 2b04 	str.w	r2, [r3], #4
 800cd48:	e7d8      	b.n	800ccfc <__multiply+0x50>
 800cd4a:	f8b3 a000 	ldrh.w	sl, [r3]
 800cd4e:	f1ba 0f00 	cmp.w	sl, #0
 800cd52:	d024      	beq.n	800cd9e <__multiply+0xf2>
 800cd54:	f104 0e14 	add.w	lr, r4, #20
 800cd58:	46a9      	mov	r9, r5
 800cd5a:	f04f 0c00 	mov.w	ip, #0
 800cd5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cd62:	f8d9 1000 	ldr.w	r1, [r9]
 800cd66:	fa1f fb82 	uxth.w	fp, r2
 800cd6a:	b289      	uxth	r1, r1
 800cd6c:	fb0a 110b 	mla	r1, sl, fp, r1
 800cd70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cd74:	f8d9 2000 	ldr.w	r2, [r9]
 800cd78:	4461      	add	r1, ip
 800cd7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cd7e:	fb0a c20b 	mla	r2, sl, fp, ip
 800cd82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cd86:	b289      	uxth	r1, r1
 800cd88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cd8c:	4577      	cmp	r7, lr
 800cd8e:	f849 1b04 	str.w	r1, [r9], #4
 800cd92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cd96:	d8e2      	bhi.n	800cd5e <__multiply+0xb2>
 800cd98:	9a01      	ldr	r2, [sp, #4]
 800cd9a:	f845 c002 	str.w	ip, [r5, r2]
 800cd9e:	9a03      	ldr	r2, [sp, #12]
 800cda0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cda4:	3304      	adds	r3, #4
 800cda6:	f1b9 0f00 	cmp.w	r9, #0
 800cdaa:	d021      	beq.n	800cdf0 <__multiply+0x144>
 800cdac:	6829      	ldr	r1, [r5, #0]
 800cdae:	f104 0c14 	add.w	ip, r4, #20
 800cdb2:	46ae      	mov	lr, r5
 800cdb4:	f04f 0a00 	mov.w	sl, #0
 800cdb8:	f8bc b000 	ldrh.w	fp, [ip]
 800cdbc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cdc0:	fb09 220b 	mla	r2, r9, fp, r2
 800cdc4:	4452      	add	r2, sl
 800cdc6:	b289      	uxth	r1, r1
 800cdc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cdcc:	f84e 1b04 	str.w	r1, [lr], #4
 800cdd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cdd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cdd8:	f8be 1000 	ldrh.w	r1, [lr]
 800cddc:	fb09 110a 	mla	r1, r9, sl, r1
 800cde0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cde4:	4567      	cmp	r7, ip
 800cde6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cdea:	d8e5      	bhi.n	800cdb8 <__multiply+0x10c>
 800cdec:	9a01      	ldr	r2, [sp, #4]
 800cdee:	50a9      	str	r1, [r5, r2]
 800cdf0:	3504      	adds	r5, #4
 800cdf2:	e799      	b.n	800cd28 <__multiply+0x7c>
 800cdf4:	3e01      	subs	r6, #1
 800cdf6:	e79b      	b.n	800cd30 <__multiply+0x84>
 800cdf8:	0800da70 	.word	0x0800da70
 800cdfc:	0800da81 	.word	0x0800da81

0800ce00 <__pow5mult>:
 800ce00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce04:	4615      	mov	r5, r2
 800ce06:	f012 0203 	ands.w	r2, r2, #3
 800ce0a:	4606      	mov	r6, r0
 800ce0c:	460f      	mov	r7, r1
 800ce0e:	d007      	beq.n	800ce20 <__pow5mult+0x20>
 800ce10:	4c25      	ldr	r4, [pc, #148]	; (800cea8 <__pow5mult+0xa8>)
 800ce12:	3a01      	subs	r2, #1
 800ce14:	2300      	movs	r3, #0
 800ce16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce1a:	f7ff fe9d 	bl	800cb58 <__multadd>
 800ce1e:	4607      	mov	r7, r0
 800ce20:	10ad      	asrs	r5, r5, #2
 800ce22:	d03d      	beq.n	800cea0 <__pow5mult+0xa0>
 800ce24:	69f4      	ldr	r4, [r6, #28]
 800ce26:	b97c      	cbnz	r4, 800ce48 <__pow5mult+0x48>
 800ce28:	2010      	movs	r0, #16
 800ce2a:	f7ff fd7f 	bl	800c92c <malloc>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	61f0      	str	r0, [r6, #28]
 800ce32:	b928      	cbnz	r0, 800ce40 <__pow5mult+0x40>
 800ce34:	4b1d      	ldr	r3, [pc, #116]	; (800ceac <__pow5mult+0xac>)
 800ce36:	481e      	ldr	r0, [pc, #120]	; (800ceb0 <__pow5mult+0xb0>)
 800ce38:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ce3c:	f000 fa64 	bl	800d308 <__assert_func>
 800ce40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce44:	6004      	str	r4, [r0, #0]
 800ce46:	60c4      	str	r4, [r0, #12]
 800ce48:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ce4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce50:	b94c      	cbnz	r4, 800ce66 <__pow5mult+0x66>
 800ce52:	f240 2171 	movw	r1, #625	; 0x271
 800ce56:	4630      	mov	r0, r6
 800ce58:	f7ff ff12 	bl	800cc80 <__i2b>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce62:	4604      	mov	r4, r0
 800ce64:	6003      	str	r3, [r0, #0]
 800ce66:	f04f 0900 	mov.w	r9, #0
 800ce6a:	07eb      	lsls	r3, r5, #31
 800ce6c:	d50a      	bpl.n	800ce84 <__pow5mult+0x84>
 800ce6e:	4639      	mov	r1, r7
 800ce70:	4622      	mov	r2, r4
 800ce72:	4630      	mov	r0, r6
 800ce74:	f7ff ff1a 	bl	800ccac <__multiply>
 800ce78:	4639      	mov	r1, r7
 800ce7a:	4680      	mov	r8, r0
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	f7ff fe49 	bl	800cb14 <_Bfree>
 800ce82:	4647      	mov	r7, r8
 800ce84:	106d      	asrs	r5, r5, #1
 800ce86:	d00b      	beq.n	800cea0 <__pow5mult+0xa0>
 800ce88:	6820      	ldr	r0, [r4, #0]
 800ce8a:	b938      	cbnz	r0, 800ce9c <__pow5mult+0x9c>
 800ce8c:	4622      	mov	r2, r4
 800ce8e:	4621      	mov	r1, r4
 800ce90:	4630      	mov	r0, r6
 800ce92:	f7ff ff0b 	bl	800ccac <__multiply>
 800ce96:	6020      	str	r0, [r4, #0]
 800ce98:	f8c0 9000 	str.w	r9, [r0]
 800ce9c:	4604      	mov	r4, r0
 800ce9e:	e7e4      	b.n	800ce6a <__pow5mult+0x6a>
 800cea0:	4638      	mov	r0, r7
 800cea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cea6:	bf00      	nop
 800cea8:	0800dbd0 	.word	0x0800dbd0
 800ceac:	0800da01 	.word	0x0800da01
 800ceb0:	0800da81 	.word	0x0800da81

0800ceb4 <__lshift>:
 800ceb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceb8:	460c      	mov	r4, r1
 800ceba:	6849      	ldr	r1, [r1, #4]
 800cebc:	6923      	ldr	r3, [r4, #16]
 800cebe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cec2:	68a3      	ldr	r3, [r4, #8]
 800cec4:	4607      	mov	r7, r0
 800cec6:	4691      	mov	r9, r2
 800cec8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cecc:	f108 0601 	add.w	r6, r8, #1
 800ced0:	42b3      	cmp	r3, r6
 800ced2:	db0b      	blt.n	800ceec <__lshift+0x38>
 800ced4:	4638      	mov	r0, r7
 800ced6:	f7ff fddd 	bl	800ca94 <_Balloc>
 800ceda:	4605      	mov	r5, r0
 800cedc:	b948      	cbnz	r0, 800cef2 <__lshift+0x3e>
 800cede:	4602      	mov	r2, r0
 800cee0:	4b28      	ldr	r3, [pc, #160]	; (800cf84 <__lshift+0xd0>)
 800cee2:	4829      	ldr	r0, [pc, #164]	; (800cf88 <__lshift+0xd4>)
 800cee4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cee8:	f000 fa0e 	bl	800d308 <__assert_func>
 800ceec:	3101      	adds	r1, #1
 800ceee:	005b      	lsls	r3, r3, #1
 800cef0:	e7ee      	b.n	800ced0 <__lshift+0x1c>
 800cef2:	2300      	movs	r3, #0
 800cef4:	f100 0114 	add.w	r1, r0, #20
 800cef8:	f100 0210 	add.w	r2, r0, #16
 800cefc:	4618      	mov	r0, r3
 800cefe:	4553      	cmp	r3, sl
 800cf00:	db33      	blt.n	800cf6a <__lshift+0xb6>
 800cf02:	6920      	ldr	r0, [r4, #16]
 800cf04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf08:	f104 0314 	add.w	r3, r4, #20
 800cf0c:	f019 091f 	ands.w	r9, r9, #31
 800cf10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf18:	d02b      	beq.n	800cf72 <__lshift+0xbe>
 800cf1a:	f1c9 0e20 	rsb	lr, r9, #32
 800cf1e:	468a      	mov	sl, r1
 800cf20:	2200      	movs	r2, #0
 800cf22:	6818      	ldr	r0, [r3, #0]
 800cf24:	fa00 f009 	lsl.w	r0, r0, r9
 800cf28:	4310      	orrs	r0, r2
 800cf2a:	f84a 0b04 	str.w	r0, [sl], #4
 800cf2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf32:	459c      	cmp	ip, r3
 800cf34:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf38:	d8f3      	bhi.n	800cf22 <__lshift+0x6e>
 800cf3a:	ebac 0304 	sub.w	r3, ip, r4
 800cf3e:	3b15      	subs	r3, #21
 800cf40:	f023 0303 	bic.w	r3, r3, #3
 800cf44:	3304      	adds	r3, #4
 800cf46:	f104 0015 	add.w	r0, r4, #21
 800cf4a:	4584      	cmp	ip, r0
 800cf4c:	bf38      	it	cc
 800cf4e:	2304      	movcc	r3, #4
 800cf50:	50ca      	str	r2, [r1, r3]
 800cf52:	b10a      	cbz	r2, 800cf58 <__lshift+0xa4>
 800cf54:	f108 0602 	add.w	r6, r8, #2
 800cf58:	3e01      	subs	r6, #1
 800cf5a:	4638      	mov	r0, r7
 800cf5c:	612e      	str	r6, [r5, #16]
 800cf5e:	4621      	mov	r1, r4
 800cf60:	f7ff fdd8 	bl	800cb14 <_Bfree>
 800cf64:	4628      	mov	r0, r5
 800cf66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf6e:	3301      	adds	r3, #1
 800cf70:	e7c5      	b.n	800cefe <__lshift+0x4a>
 800cf72:	3904      	subs	r1, #4
 800cf74:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf78:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf7c:	459c      	cmp	ip, r3
 800cf7e:	d8f9      	bhi.n	800cf74 <__lshift+0xc0>
 800cf80:	e7ea      	b.n	800cf58 <__lshift+0xa4>
 800cf82:	bf00      	nop
 800cf84:	0800da70 	.word	0x0800da70
 800cf88:	0800da81 	.word	0x0800da81

0800cf8c <__mcmp>:
 800cf8c:	b530      	push	{r4, r5, lr}
 800cf8e:	6902      	ldr	r2, [r0, #16]
 800cf90:	690c      	ldr	r4, [r1, #16]
 800cf92:	1b12      	subs	r2, r2, r4
 800cf94:	d10e      	bne.n	800cfb4 <__mcmp+0x28>
 800cf96:	f100 0314 	add.w	r3, r0, #20
 800cf9a:	3114      	adds	r1, #20
 800cf9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cfa0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cfa4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cfa8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cfac:	42a5      	cmp	r5, r4
 800cfae:	d003      	beq.n	800cfb8 <__mcmp+0x2c>
 800cfb0:	d305      	bcc.n	800cfbe <__mcmp+0x32>
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	4610      	mov	r0, r2
 800cfb6:	bd30      	pop	{r4, r5, pc}
 800cfb8:	4283      	cmp	r3, r0
 800cfba:	d3f3      	bcc.n	800cfa4 <__mcmp+0x18>
 800cfbc:	e7fa      	b.n	800cfb4 <__mcmp+0x28>
 800cfbe:	f04f 32ff 	mov.w	r2, #4294967295
 800cfc2:	e7f7      	b.n	800cfb4 <__mcmp+0x28>

0800cfc4 <__mdiff>:
 800cfc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc8:	460c      	mov	r4, r1
 800cfca:	4606      	mov	r6, r0
 800cfcc:	4611      	mov	r1, r2
 800cfce:	4620      	mov	r0, r4
 800cfd0:	4690      	mov	r8, r2
 800cfd2:	f7ff ffdb 	bl	800cf8c <__mcmp>
 800cfd6:	1e05      	subs	r5, r0, #0
 800cfd8:	d110      	bne.n	800cffc <__mdiff+0x38>
 800cfda:	4629      	mov	r1, r5
 800cfdc:	4630      	mov	r0, r6
 800cfde:	f7ff fd59 	bl	800ca94 <_Balloc>
 800cfe2:	b930      	cbnz	r0, 800cff2 <__mdiff+0x2e>
 800cfe4:	4b3a      	ldr	r3, [pc, #232]	; (800d0d0 <__mdiff+0x10c>)
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	f240 2137 	movw	r1, #567	; 0x237
 800cfec:	4839      	ldr	r0, [pc, #228]	; (800d0d4 <__mdiff+0x110>)
 800cfee:	f000 f98b 	bl	800d308 <__assert_func>
 800cff2:	2301      	movs	r3, #1
 800cff4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cff8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cffc:	bfa4      	itt	ge
 800cffe:	4643      	movge	r3, r8
 800d000:	46a0      	movge	r8, r4
 800d002:	4630      	mov	r0, r6
 800d004:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d008:	bfa6      	itte	ge
 800d00a:	461c      	movge	r4, r3
 800d00c:	2500      	movge	r5, #0
 800d00e:	2501      	movlt	r5, #1
 800d010:	f7ff fd40 	bl	800ca94 <_Balloc>
 800d014:	b920      	cbnz	r0, 800d020 <__mdiff+0x5c>
 800d016:	4b2e      	ldr	r3, [pc, #184]	; (800d0d0 <__mdiff+0x10c>)
 800d018:	4602      	mov	r2, r0
 800d01a:	f240 2145 	movw	r1, #581	; 0x245
 800d01e:	e7e5      	b.n	800cfec <__mdiff+0x28>
 800d020:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d024:	6926      	ldr	r6, [r4, #16]
 800d026:	60c5      	str	r5, [r0, #12]
 800d028:	f104 0914 	add.w	r9, r4, #20
 800d02c:	f108 0514 	add.w	r5, r8, #20
 800d030:	f100 0e14 	add.w	lr, r0, #20
 800d034:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d038:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d03c:	f108 0210 	add.w	r2, r8, #16
 800d040:	46f2      	mov	sl, lr
 800d042:	2100      	movs	r1, #0
 800d044:	f859 3b04 	ldr.w	r3, [r9], #4
 800d048:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d04c:	fa11 f88b 	uxtah	r8, r1, fp
 800d050:	b299      	uxth	r1, r3
 800d052:	0c1b      	lsrs	r3, r3, #16
 800d054:	eba8 0801 	sub.w	r8, r8, r1
 800d058:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d05c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d060:	fa1f f888 	uxth.w	r8, r8
 800d064:	1419      	asrs	r1, r3, #16
 800d066:	454e      	cmp	r6, r9
 800d068:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d06c:	f84a 3b04 	str.w	r3, [sl], #4
 800d070:	d8e8      	bhi.n	800d044 <__mdiff+0x80>
 800d072:	1b33      	subs	r3, r6, r4
 800d074:	3b15      	subs	r3, #21
 800d076:	f023 0303 	bic.w	r3, r3, #3
 800d07a:	3304      	adds	r3, #4
 800d07c:	3415      	adds	r4, #21
 800d07e:	42a6      	cmp	r6, r4
 800d080:	bf38      	it	cc
 800d082:	2304      	movcc	r3, #4
 800d084:	441d      	add	r5, r3
 800d086:	4473      	add	r3, lr
 800d088:	469e      	mov	lr, r3
 800d08a:	462e      	mov	r6, r5
 800d08c:	4566      	cmp	r6, ip
 800d08e:	d30e      	bcc.n	800d0ae <__mdiff+0xea>
 800d090:	f10c 0203 	add.w	r2, ip, #3
 800d094:	1b52      	subs	r2, r2, r5
 800d096:	f022 0203 	bic.w	r2, r2, #3
 800d09a:	3d03      	subs	r5, #3
 800d09c:	45ac      	cmp	ip, r5
 800d09e:	bf38      	it	cc
 800d0a0:	2200      	movcc	r2, #0
 800d0a2:	4413      	add	r3, r2
 800d0a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d0a8:	b17a      	cbz	r2, 800d0ca <__mdiff+0x106>
 800d0aa:	6107      	str	r7, [r0, #16]
 800d0ac:	e7a4      	b.n	800cff8 <__mdiff+0x34>
 800d0ae:	f856 8b04 	ldr.w	r8, [r6], #4
 800d0b2:	fa11 f288 	uxtah	r2, r1, r8
 800d0b6:	1414      	asrs	r4, r2, #16
 800d0b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d0bc:	b292      	uxth	r2, r2
 800d0be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d0c2:	f84e 2b04 	str.w	r2, [lr], #4
 800d0c6:	1421      	asrs	r1, r4, #16
 800d0c8:	e7e0      	b.n	800d08c <__mdiff+0xc8>
 800d0ca:	3f01      	subs	r7, #1
 800d0cc:	e7ea      	b.n	800d0a4 <__mdiff+0xe0>
 800d0ce:	bf00      	nop
 800d0d0:	0800da70 	.word	0x0800da70
 800d0d4:	0800da81 	.word	0x0800da81

0800d0d8 <__d2b>:
 800d0d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0dc:	460f      	mov	r7, r1
 800d0de:	2101      	movs	r1, #1
 800d0e0:	ec59 8b10 	vmov	r8, r9, d0
 800d0e4:	4616      	mov	r6, r2
 800d0e6:	f7ff fcd5 	bl	800ca94 <_Balloc>
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	b930      	cbnz	r0, 800d0fc <__d2b+0x24>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	4b24      	ldr	r3, [pc, #144]	; (800d184 <__d2b+0xac>)
 800d0f2:	4825      	ldr	r0, [pc, #148]	; (800d188 <__d2b+0xb0>)
 800d0f4:	f240 310f 	movw	r1, #783	; 0x30f
 800d0f8:	f000 f906 	bl	800d308 <__assert_func>
 800d0fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d100:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d104:	bb2d      	cbnz	r5, 800d152 <__d2b+0x7a>
 800d106:	9301      	str	r3, [sp, #4]
 800d108:	f1b8 0300 	subs.w	r3, r8, #0
 800d10c:	d026      	beq.n	800d15c <__d2b+0x84>
 800d10e:	4668      	mov	r0, sp
 800d110:	9300      	str	r3, [sp, #0]
 800d112:	f7ff fd87 	bl	800cc24 <__lo0bits>
 800d116:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d11a:	b1e8      	cbz	r0, 800d158 <__d2b+0x80>
 800d11c:	f1c0 0320 	rsb	r3, r0, #32
 800d120:	fa02 f303 	lsl.w	r3, r2, r3
 800d124:	430b      	orrs	r3, r1
 800d126:	40c2      	lsrs	r2, r0
 800d128:	6163      	str	r3, [r4, #20]
 800d12a:	9201      	str	r2, [sp, #4]
 800d12c:	9b01      	ldr	r3, [sp, #4]
 800d12e:	61a3      	str	r3, [r4, #24]
 800d130:	2b00      	cmp	r3, #0
 800d132:	bf14      	ite	ne
 800d134:	2202      	movne	r2, #2
 800d136:	2201      	moveq	r2, #1
 800d138:	6122      	str	r2, [r4, #16]
 800d13a:	b1bd      	cbz	r5, 800d16c <__d2b+0x94>
 800d13c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d140:	4405      	add	r5, r0
 800d142:	603d      	str	r5, [r7, #0]
 800d144:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d148:	6030      	str	r0, [r6, #0]
 800d14a:	4620      	mov	r0, r4
 800d14c:	b003      	add	sp, #12
 800d14e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d156:	e7d6      	b.n	800d106 <__d2b+0x2e>
 800d158:	6161      	str	r1, [r4, #20]
 800d15a:	e7e7      	b.n	800d12c <__d2b+0x54>
 800d15c:	a801      	add	r0, sp, #4
 800d15e:	f7ff fd61 	bl	800cc24 <__lo0bits>
 800d162:	9b01      	ldr	r3, [sp, #4]
 800d164:	6163      	str	r3, [r4, #20]
 800d166:	3020      	adds	r0, #32
 800d168:	2201      	movs	r2, #1
 800d16a:	e7e5      	b.n	800d138 <__d2b+0x60>
 800d16c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d170:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d174:	6038      	str	r0, [r7, #0]
 800d176:	6918      	ldr	r0, [r3, #16]
 800d178:	f7ff fd34 	bl	800cbe4 <__hi0bits>
 800d17c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d180:	e7e2      	b.n	800d148 <__d2b+0x70>
 800d182:	bf00      	nop
 800d184:	0800da70 	.word	0x0800da70
 800d188:	0800da81 	.word	0x0800da81

0800d18c <__sflush_r>:
 800d18c:	898a      	ldrh	r2, [r1, #12]
 800d18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d192:	4605      	mov	r5, r0
 800d194:	0710      	lsls	r0, r2, #28
 800d196:	460c      	mov	r4, r1
 800d198:	d458      	bmi.n	800d24c <__sflush_r+0xc0>
 800d19a:	684b      	ldr	r3, [r1, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	dc05      	bgt.n	800d1ac <__sflush_r+0x20>
 800d1a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	dc02      	bgt.n	800d1ac <__sflush_r+0x20>
 800d1a6:	2000      	movs	r0, #0
 800d1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1ae:	2e00      	cmp	r6, #0
 800d1b0:	d0f9      	beq.n	800d1a6 <__sflush_r+0x1a>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d1b8:	682f      	ldr	r7, [r5, #0]
 800d1ba:	6a21      	ldr	r1, [r4, #32]
 800d1bc:	602b      	str	r3, [r5, #0]
 800d1be:	d032      	beq.n	800d226 <__sflush_r+0x9a>
 800d1c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d1c2:	89a3      	ldrh	r3, [r4, #12]
 800d1c4:	075a      	lsls	r2, r3, #29
 800d1c6:	d505      	bpl.n	800d1d4 <__sflush_r+0x48>
 800d1c8:	6863      	ldr	r3, [r4, #4]
 800d1ca:	1ac0      	subs	r0, r0, r3
 800d1cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1ce:	b10b      	cbz	r3, 800d1d4 <__sflush_r+0x48>
 800d1d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1d2:	1ac0      	subs	r0, r0, r3
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1da:	6a21      	ldr	r1, [r4, #32]
 800d1dc:	4628      	mov	r0, r5
 800d1de:	47b0      	blx	r6
 800d1e0:	1c43      	adds	r3, r0, #1
 800d1e2:	89a3      	ldrh	r3, [r4, #12]
 800d1e4:	d106      	bne.n	800d1f4 <__sflush_r+0x68>
 800d1e6:	6829      	ldr	r1, [r5, #0]
 800d1e8:	291d      	cmp	r1, #29
 800d1ea:	d82b      	bhi.n	800d244 <__sflush_r+0xb8>
 800d1ec:	4a29      	ldr	r2, [pc, #164]	; (800d294 <__sflush_r+0x108>)
 800d1ee:	410a      	asrs	r2, r1
 800d1f0:	07d6      	lsls	r6, r2, #31
 800d1f2:	d427      	bmi.n	800d244 <__sflush_r+0xb8>
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	6062      	str	r2, [r4, #4]
 800d1f8:	04d9      	lsls	r1, r3, #19
 800d1fa:	6922      	ldr	r2, [r4, #16]
 800d1fc:	6022      	str	r2, [r4, #0]
 800d1fe:	d504      	bpl.n	800d20a <__sflush_r+0x7e>
 800d200:	1c42      	adds	r2, r0, #1
 800d202:	d101      	bne.n	800d208 <__sflush_r+0x7c>
 800d204:	682b      	ldr	r3, [r5, #0]
 800d206:	b903      	cbnz	r3, 800d20a <__sflush_r+0x7e>
 800d208:	6560      	str	r0, [r4, #84]	; 0x54
 800d20a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d20c:	602f      	str	r7, [r5, #0]
 800d20e:	2900      	cmp	r1, #0
 800d210:	d0c9      	beq.n	800d1a6 <__sflush_r+0x1a>
 800d212:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d216:	4299      	cmp	r1, r3
 800d218:	d002      	beq.n	800d220 <__sflush_r+0x94>
 800d21a:	4628      	mov	r0, r5
 800d21c:	f7ff fb3a 	bl	800c894 <_free_r>
 800d220:	2000      	movs	r0, #0
 800d222:	6360      	str	r0, [r4, #52]	; 0x34
 800d224:	e7c0      	b.n	800d1a8 <__sflush_r+0x1c>
 800d226:	2301      	movs	r3, #1
 800d228:	4628      	mov	r0, r5
 800d22a:	47b0      	blx	r6
 800d22c:	1c41      	adds	r1, r0, #1
 800d22e:	d1c8      	bne.n	800d1c2 <__sflush_r+0x36>
 800d230:	682b      	ldr	r3, [r5, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d0c5      	beq.n	800d1c2 <__sflush_r+0x36>
 800d236:	2b1d      	cmp	r3, #29
 800d238:	d001      	beq.n	800d23e <__sflush_r+0xb2>
 800d23a:	2b16      	cmp	r3, #22
 800d23c:	d101      	bne.n	800d242 <__sflush_r+0xb6>
 800d23e:	602f      	str	r7, [r5, #0]
 800d240:	e7b1      	b.n	800d1a6 <__sflush_r+0x1a>
 800d242:	89a3      	ldrh	r3, [r4, #12]
 800d244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d248:	81a3      	strh	r3, [r4, #12]
 800d24a:	e7ad      	b.n	800d1a8 <__sflush_r+0x1c>
 800d24c:	690f      	ldr	r7, [r1, #16]
 800d24e:	2f00      	cmp	r7, #0
 800d250:	d0a9      	beq.n	800d1a6 <__sflush_r+0x1a>
 800d252:	0793      	lsls	r3, r2, #30
 800d254:	680e      	ldr	r6, [r1, #0]
 800d256:	bf08      	it	eq
 800d258:	694b      	ldreq	r3, [r1, #20]
 800d25a:	600f      	str	r7, [r1, #0]
 800d25c:	bf18      	it	ne
 800d25e:	2300      	movne	r3, #0
 800d260:	eba6 0807 	sub.w	r8, r6, r7
 800d264:	608b      	str	r3, [r1, #8]
 800d266:	f1b8 0f00 	cmp.w	r8, #0
 800d26a:	dd9c      	ble.n	800d1a6 <__sflush_r+0x1a>
 800d26c:	6a21      	ldr	r1, [r4, #32]
 800d26e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d270:	4643      	mov	r3, r8
 800d272:	463a      	mov	r2, r7
 800d274:	4628      	mov	r0, r5
 800d276:	47b0      	blx	r6
 800d278:	2800      	cmp	r0, #0
 800d27a:	dc06      	bgt.n	800d28a <__sflush_r+0xfe>
 800d27c:	89a3      	ldrh	r3, [r4, #12]
 800d27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d282:	81a3      	strh	r3, [r4, #12]
 800d284:	f04f 30ff 	mov.w	r0, #4294967295
 800d288:	e78e      	b.n	800d1a8 <__sflush_r+0x1c>
 800d28a:	4407      	add	r7, r0
 800d28c:	eba8 0800 	sub.w	r8, r8, r0
 800d290:	e7e9      	b.n	800d266 <__sflush_r+0xda>
 800d292:	bf00      	nop
 800d294:	dfbffffe 	.word	0xdfbffffe

0800d298 <_fflush_r>:
 800d298:	b538      	push	{r3, r4, r5, lr}
 800d29a:	690b      	ldr	r3, [r1, #16]
 800d29c:	4605      	mov	r5, r0
 800d29e:	460c      	mov	r4, r1
 800d2a0:	b913      	cbnz	r3, 800d2a8 <_fflush_r+0x10>
 800d2a2:	2500      	movs	r5, #0
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	b118      	cbz	r0, 800d2b2 <_fflush_r+0x1a>
 800d2aa:	6a03      	ldr	r3, [r0, #32]
 800d2ac:	b90b      	cbnz	r3, 800d2b2 <_fflush_r+0x1a>
 800d2ae:	f7fe fb6f 	bl	800b990 <__sinit>
 800d2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d0f3      	beq.n	800d2a2 <_fflush_r+0xa>
 800d2ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d2bc:	07d0      	lsls	r0, r2, #31
 800d2be:	d404      	bmi.n	800d2ca <_fflush_r+0x32>
 800d2c0:	0599      	lsls	r1, r3, #22
 800d2c2:	d402      	bmi.n	800d2ca <_fflush_r+0x32>
 800d2c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2c6:	f7fe fc5a 	bl	800bb7e <__retarget_lock_acquire_recursive>
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	4621      	mov	r1, r4
 800d2ce:	f7ff ff5d 	bl	800d18c <__sflush_r>
 800d2d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2d4:	07da      	lsls	r2, r3, #31
 800d2d6:	4605      	mov	r5, r0
 800d2d8:	d4e4      	bmi.n	800d2a4 <_fflush_r+0xc>
 800d2da:	89a3      	ldrh	r3, [r4, #12]
 800d2dc:	059b      	lsls	r3, r3, #22
 800d2de:	d4e1      	bmi.n	800d2a4 <_fflush_r+0xc>
 800d2e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2e2:	f7fe fc4d 	bl	800bb80 <__retarget_lock_release_recursive>
 800d2e6:	e7dd      	b.n	800d2a4 <_fflush_r+0xc>

0800d2e8 <_sbrk_r>:
 800d2e8:	b538      	push	{r3, r4, r5, lr}
 800d2ea:	4d06      	ldr	r5, [pc, #24]	; (800d304 <_sbrk_r+0x1c>)
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	4608      	mov	r0, r1
 800d2f2:	602b      	str	r3, [r5, #0]
 800d2f4:	f7f5 f81c 	bl	8002330 <_sbrk>
 800d2f8:	1c43      	adds	r3, r0, #1
 800d2fa:	d102      	bne.n	800d302 <_sbrk_r+0x1a>
 800d2fc:	682b      	ldr	r3, [r5, #0]
 800d2fe:	b103      	cbz	r3, 800d302 <_sbrk_r+0x1a>
 800d300:	6023      	str	r3, [r4, #0]
 800d302:	bd38      	pop	{r3, r4, r5, pc}
 800d304:	20004c30 	.word	0x20004c30

0800d308 <__assert_func>:
 800d308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d30a:	4614      	mov	r4, r2
 800d30c:	461a      	mov	r2, r3
 800d30e:	4b09      	ldr	r3, [pc, #36]	; (800d334 <__assert_func+0x2c>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4605      	mov	r5, r0
 800d314:	68d8      	ldr	r0, [r3, #12]
 800d316:	b14c      	cbz	r4, 800d32c <__assert_func+0x24>
 800d318:	4b07      	ldr	r3, [pc, #28]	; (800d338 <__assert_func+0x30>)
 800d31a:	9100      	str	r1, [sp, #0]
 800d31c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d320:	4906      	ldr	r1, [pc, #24]	; (800d33c <__assert_func+0x34>)
 800d322:	462b      	mov	r3, r5
 800d324:	f000 f844 	bl	800d3b0 <fiprintf>
 800d328:	f000 f854 	bl	800d3d4 <abort>
 800d32c:	4b04      	ldr	r3, [pc, #16]	; (800d340 <__assert_func+0x38>)
 800d32e:	461c      	mov	r4, r3
 800d330:	e7f3      	b.n	800d31a <__assert_func+0x12>
 800d332:	bf00      	nop
 800d334:	20000068 	.word	0x20000068
 800d338:	0800dbe6 	.word	0x0800dbe6
 800d33c:	0800dbf3 	.word	0x0800dbf3
 800d340:	0800dc21 	.word	0x0800dc21

0800d344 <_calloc_r>:
 800d344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d346:	fba1 2402 	umull	r2, r4, r1, r2
 800d34a:	b94c      	cbnz	r4, 800d360 <_calloc_r+0x1c>
 800d34c:	4611      	mov	r1, r2
 800d34e:	9201      	str	r2, [sp, #4]
 800d350:	f7ff fb14 	bl	800c97c <_malloc_r>
 800d354:	9a01      	ldr	r2, [sp, #4]
 800d356:	4605      	mov	r5, r0
 800d358:	b930      	cbnz	r0, 800d368 <_calloc_r+0x24>
 800d35a:	4628      	mov	r0, r5
 800d35c:	b003      	add	sp, #12
 800d35e:	bd30      	pop	{r4, r5, pc}
 800d360:	220c      	movs	r2, #12
 800d362:	6002      	str	r2, [r0, #0]
 800d364:	2500      	movs	r5, #0
 800d366:	e7f8      	b.n	800d35a <_calloc_r+0x16>
 800d368:	4621      	mov	r1, r4
 800d36a:	f7fe fb8a 	bl	800ba82 <memset>
 800d36e:	e7f4      	b.n	800d35a <_calloc_r+0x16>

0800d370 <__ascii_mbtowc>:
 800d370:	b082      	sub	sp, #8
 800d372:	b901      	cbnz	r1, 800d376 <__ascii_mbtowc+0x6>
 800d374:	a901      	add	r1, sp, #4
 800d376:	b142      	cbz	r2, 800d38a <__ascii_mbtowc+0x1a>
 800d378:	b14b      	cbz	r3, 800d38e <__ascii_mbtowc+0x1e>
 800d37a:	7813      	ldrb	r3, [r2, #0]
 800d37c:	600b      	str	r3, [r1, #0]
 800d37e:	7812      	ldrb	r2, [r2, #0]
 800d380:	1e10      	subs	r0, r2, #0
 800d382:	bf18      	it	ne
 800d384:	2001      	movne	r0, #1
 800d386:	b002      	add	sp, #8
 800d388:	4770      	bx	lr
 800d38a:	4610      	mov	r0, r2
 800d38c:	e7fb      	b.n	800d386 <__ascii_mbtowc+0x16>
 800d38e:	f06f 0001 	mvn.w	r0, #1
 800d392:	e7f8      	b.n	800d386 <__ascii_mbtowc+0x16>

0800d394 <__ascii_wctomb>:
 800d394:	b149      	cbz	r1, 800d3aa <__ascii_wctomb+0x16>
 800d396:	2aff      	cmp	r2, #255	; 0xff
 800d398:	bf85      	ittet	hi
 800d39a:	238a      	movhi	r3, #138	; 0x8a
 800d39c:	6003      	strhi	r3, [r0, #0]
 800d39e:	700a      	strbls	r2, [r1, #0]
 800d3a0:	f04f 30ff 	movhi.w	r0, #4294967295
 800d3a4:	bf98      	it	ls
 800d3a6:	2001      	movls	r0, #1
 800d3a8:	4770      	bx	lr
 800d3aa:	4608      	mov	r0, r1
 800d3ac:	4770      	bx	lr
	...

0800d3b0 <fiprintf>:
 800d3b0:	b40e      	push	{r1, r2, r3}
 800d3b2:	b503      	push	{r0, r1, lr}
 800d3b4:	4601      	mov	r1, r0
 800d3b6:	ab03      	add	r3, sp, #12
 800d3b8:	4805      	ldr	r0, [pc, #20]	; (800d3d0 <fiprintf+0x20>)
 800d3ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3be:	6800      	ldr	r0, [r0, #0]
 800d3c0:	9301      	str	r3, [sp, #4]
 800d3c2:	f000 f837 	bl	800d434 <_vfiprintf_r>
 800d3c6:	b002      	add	sp, #8
 800d3c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3cc:	b003      	add	sp, #12
 800d3ce:	4770      	bx	lr
 800d3d0:	20000068 	.word	0x20000068

0800d3d4 <abort>:
 800d3d4:	b508      	push	{r3, lr}
 800d3d6:	2006      	movs	r0, #6
 800d3d8:	f000 fa04 	bl	800d7e4 <raise>
 800d3dc:	2001      	movs	r0, #1
 800d3de:	f7f4 ff2f 	bl	8002240 <_exit>

0800d3e2 <__sfputc_r>:
 800d3e2:	6893      	ldr	r3, [r2, #8]
 800d3e4:	3b01      	subs	r3, #1
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	b410      	push	{r4}
 800d3ea:	6093      	str	r3, [r2, #8]
 800d3ec:	da08      	bge.n	800d400 <__sfputc_r+0x1e>
 800d3ee:	6994      	ldr	r4, [r2, #24]
 800d3f0:	42a3      	cmp	r3, r4
 800d3f2:	db01      	blt.n	800d3f8 <__sfputc_r+0x16>
 800d3f4:	290a      	cmp	r1, #10
 800d3f6:	d103      	bne.n	800d400 <__sfputc_r+0x1e>
 800d3f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3fc:	f000 b934 	b.w	800d668 <__swbuf_r>
 800d400:	6813      	ldr	r3, [r2, #0]
 800d402:	1c58      	adds	r0, r3, #1
 800d404:	6010      	str	r0, [r2, #0]
 800d406:	7019      	strb	r1, [r3, #0]
 800d408:	4608      	mov	r0, r1
 800d40a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d40e:	4770      	bx	lr

0800d410 <__sfputs_r>:
 800d410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d412:	4606      	mov	r6, r0
 800d414:	460f      	mov	r7, r1
 800d416:	4614      	mov	r4, r2
 800d418:	18d5      	adds	r5, r2, r3
 800d41a:	42ac      	cmp	r4, r5
 800d41c:	d101      	bne.n	800d422 <__sfputs_r+0x12>
 800d41e:	2000      	movs	r0, #0
 800d420:	e007      	b.n	800d432 <__sfputs_r+0x22>
 800d422:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d426:	463a      	mov	r2, r7
 800d428:	4630      	mov	r0, r6
 800d42a:	f7ff ffda 	bl	800d3e2 <__sfputc_r>
 800d42e:	1c43      	adds	r3, r0, #1
 800d430:	d1f3      	bne.n	800d41a <__sfputs_r+0xa>
 800d432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d434 <_vfiprintf_r>:
 800d434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d438:	460d      	mov	r5, r1
 800d43a:	b09d      	sub	sp, #116	; 0x74
 800d43c:	4614      	mov	r4, r2
 800d43e:	4698      	mov	r8, r3
 800d440:	4606      	mov	r6, r0
 800d442:	b118      	cbz	r0, 800d44c <_vfiprintf_r+0x18>
 800d444:	6a03      	ldr	r3, [r0, #32]
 800d446:	b90b      	cbnz	r3, 800d44c <_vfiprintf_r+0x18>
 800d448:	f7fe faa2 	bl	800b990 <__sinit>
 800d44c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d44e:	07d9      	lsls	r1, r3, #31
 800d450:	d405      	bmi.n	800d45e <_vfiprintf_r+0x2a>
 800d452:	89ab      	ldrh	r3, [r5, #12]
 800d454:	059a      	lsls	r2, r3, #22
 800d456:	d402      	bmi.n	800d45e <_vfiprintf_r+0x2a>
 800d458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d45a:	f7fe fb90 	bl	800bb7e <__retarget_lock_acquire_recursive>
 800d45e:	89ab      	ldrh	r3, [r5, #12]
 800d460:	071b      	lsls	r3, r3, #28
 800d462:	d501      	bpl.n	800d468 <_vfiprintf_r+0x34>
 800d464:	692b      	ldr	r3, [r5, #16]
 800d466:	b99b      	cbnz	r3, 800d490 <_vfiprintf_r+0x5c>
 800d468:	4629      	mov	r1, r5
 800d46a:	4630      	mov	r0, r6
 800d46c:	f000 f93a 	bl	800d6e4 <__swsetup_r>
 800d470:	b170      	cbz	r0, 800d490 <_vfiprintf_r+0x5c>
 800d472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d474:	07dc      	lsls	r4, r3, #31
 800d476:	d504      	bpl.n	800d482 <_vfiprintf_r+0x4e>
 800d478:	f04f 30ff 	mov.w	r0, #4294967295
 800d47c:	b01d      	add	sp, #116	; 0x74
 800d47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d482:	89ab      	ldrh	r3, [r5, #12]
 800d484:	0598      	lsls	r0, r3, #22
 800d486:	d4f7      	bmi.n	800d478 <_vfiprintf_r+0x44>
 800d488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d48a:	f7fe fb79 	bl	800bb80 <__retarget_lock_release_recursive>
 800d48e:	e7f3      	b.n	800d478 <_vfiprintf_r+0x44>
 800d490:	2300      	movs	r3, #0
 800d492:	9309      	str	r3, [sp, #36]	; 0x24
 800d494:	2320      	movs	r3, #32
 800d496:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d49a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d49e:	2330      	movs	r3, #48	; 0x30
 800d4a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d654 <_vfiprintf_r+0x220>
 800d4a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4a8:	f04f 0901 	mov.w	r9, #1
 800d4ac:	4623      	mov	r3, r4
 800d4ae:	469a      	mov	sl, r3
 800d4b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4b4:	b10a      	cbz	r2, 800d4ba <_vfiprintf_r+0x86>
 800d4b6:	2a25      	cmp	r2, #37	; 0x25
 800d4b8:	d1f9      	bne.n	800d4ae <_vfiprintf_r+0x7a>
 800d4ba:	ebba 0b04 	subs.w	fp, sl, r4
 800d4be:	d00b      	beq.n	800d4d8 <_vfiprintf_r+0xa4>
 800d4c0:	465b      	mov	r3, fp
 800d4c2:	4622      	mov	r2, r4
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	4630      	mov	r0, r6
 800d4c8:	f7ff ffa2 	bl	800d410 <__sfputs_r>
 800d4cc:	3001      	adds	r0, #1
 800d4ce:	f000 80a9 	beq.w	800d624 <_vfiprintf_r+0x1f0>
 800d4d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4d4:	445a      	add	r2, fp
 800d4d6:	9209      	str	r2, [sp, #36]	; 0x24
 800d4d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	f000 80a1 	beq.w	800d624 <_vfiprintf_r+0x1f0>
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4ec:	f10a 0a01 	add.w	sl, sl, #1
 800d4f0:	9304      	str	r3, [sp, #16]
 800d4f2:	9307      	str	r3, [sp, #28]
 800d4f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4f8:	931a      	str	r3, [sp, #104]	; 0x68
 800d4fa:	4654      	mov	r4, sl
 800d4fc:	2205      	movs	r2, #5
 800d4fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d502:	4854      	ldr	r0, [pc, #336]	; (800d654 <_vfiprintf_r+0x220>)
 800d504:	f7f2 fe6c 	bl	80001e0 <memchr>
 800d508:	9a04      	ldr	r2, [sp, #16]
 800d50a:	b9d8      	cbnz	r0, 800d544 <_vfiprintf_r+0x110>
 800d50c:	06d1      	lsls	r1, r2, #27
 800d50e:	bf44      	itt	mi
 800d510:	2320      	movmi	r3, #32
 800d512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d516:	0713      	lsls	r3, r2, #28
 800d518:	bf44      	itt	mi
 800d51a:	232b      	movmi	r3, #43	; 0x2b
 800d51c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d520:	f89a 3000 	ldrb.w	r3, [sl]
 800d524:	2b2a      	cmp	r3, #42	; 0x2a
 800d526:	d015      	beq.n	800d554 <_vfiprintf_r+0x120>
 800d528:	9a07      	ldr	r2, [sp, #28]
 800d52a:	4654      	mov	r4, sl
 800d52c:	2000      	movs	r0, #0
 800d52e:	f04f 0c0a 	mov.w	ip, #10
 800d532:	4621      	mov	r1, r4
 800d534:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d538:	3b30      	subs	r3, #48	; 0x30
 800d53a:	2b09      	cmp	r3, #9
 800d53c:	d94d      	bls.n	800d5da <_vfiprintf_r+0x1a6>
 800d53e:	b1b0      	cbz	r0, 800d56e <_vfiprintf_r+0x13a>
 800d540:	9207      	str	r2, [sp, #28]
 800d542:	e014      	b.n	800d56e <_vfiprintf_r+0x13a>
 800d544:	eba0 0308 	sub.w	r3, r0, r8
 800d548:	fa09 f303 	lsl.w	r3, r9, r3
 800d54c:	4313      	orrs	r3, r2
 800d54e:	9304      	str	r3, [sp, #16]
 800d550:	46a2      	mov	sl, r4
 800d552:	e7d2      	b.n	800d4fa <_vfiprintf_r+0xc6>
 800d554:	9b03      	ldr	r3, [sp, #12]
 800d556:	1d19      	adds	r1, r3, #4
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	9103      	str	r1, [sp, #12]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	bfbb      	ittet	lt
 800d560:	425b      	neglt	r3, r3
 800d562:	f042 0202 	orrlt.w	r2, r2, #2
 800d566:	9307      	strge	r3, [sp, #28]
 800d568:	9307      	strlt	r3, [sp, #28]
 800d56a:	bfb8      	it	lt
 800d56c:	9204      	strlt	r2, [sp, #16]
 800d56e:	7823      	ldrb	r3, [r4, #0]
 800d570:	2b2e      	cmp	r3, #46	; 0x2e
 800d572:	d10c      	bne.n	800d58e <_vfiprintf_r+0x15a>
 800d574:	7863      	ldrb	r3, [r4, #1]
 800d576:	2b2a      	cmp	r3, #42	; 0x2a
 800d578:	d134      	bne.n	800d5e4 <_vfiprintf_r+0x1b0>
 800d57a:	9b03      	ldr	r3, [sp, #12]
 800d57c:	1d1a      	adds	r2, r3, #4
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	9203      	str	r2, [sp, #12]
 800d582:	2b00      	cmp	r3, #0
 800d584:	bfb8      	it	lt
 800d586:	f04f 33ff 	movlt.w	r3, #4294967295
 800d58a:	3402      	adds	r4, #2
 800d58c:	9305      	str	r3, [sp, #20]
 800d58e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d664 <_vfiprintf_r+0x230>
 800d592:	7821      	ldrb	r1, [r4, #0]
 800d594:	2203      	movs	r2, #3
 800d596:	4650      	mov	r0, sl
 800d598:	f7f2 fe22 	bl	80001e0 <memchr>
 800d59c:	b138      	cbz	r0, 800d5ae <_vfiprintf_r+0x17a>
 800d59e:	9b04      	ldr	r3, [sp, #16]
 800d5a0:	eba0 000a 	sub.w	r0, r0, sl
 800d5a4:	2240      	movs	r2, #64	; 0x40
 800d5a6:	4082      	lsls	r2, r0
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	3401      	adds	r4, #1
 800d5ac:	9304      	str	r3, [sp, #16]
 800d5ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5b2:	4829      	ldr	r0, [pc, #164]	; (800d658 <_vfiprintf_r+0x224>)
 800d5b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5b8:	2206      	movs	r2, #6
 800d5ba:	f7f2 fe11 	bl	80001e0 <memchr>
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	d03f      	beq.n	800d642 <_vfiprintf_r+0x20e>
 800d5c2:	4b26      	ldr	r3, [pc, #152]	; (800d65c <_vfiprintf_r+0x228>)
 800d5c4:	bb1b      	cbnz	r3, 800d60e <_vfiprintf_r+0x1da>
 800d5c6:	9b03      	ldr	r3, [sp, #12]
 800d5c8:	3307      	adds	r3, #7
 800d5ca:	f023 0307 	bic.w	r3, r3, #7
 800d5ce:	3308      	adds	r3, #8
 800d5d0:	9303      	str	r3, [sp, #12]
 800d5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5d4:	443b      	add	r3, r7
 800d5d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d5d8:	e768      	b.n	800d4ac <_vfiprintf_r+0x78>
 800d5da:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5de:	460c      	mov	r4, r1
 800d5e0:	2001      	movs	r0, #1
 800d5e2:	e7a6      	b.n	800d532 <_vfiprintf_r+0xfe>
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	3401      	adds	r4, #1
 800d5e8:	9305      	str	r3, [sp, #20]
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	f04f 0c0a 	mov.w	ip, #10
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5f6:	3a30      	subs	r2, #48	; 0x30
 800d5f8:	2a09      	cmp	r2, #9
 800d5fa:	d903      	bls.n	800d604 <_vfiprintf_r+0x1d0>
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d0c6      	beq.n	800d58e <_vfiprintf_r+0x15a>
 800d600:	9105      	str	r1, [sp, #20]
 800d602:	e7c4      	b.n	800d58e <_vfiprintf_r+0x15a>
 800d604:	fb0c 2101 	mla	r1, ip, r1, r2
 800d608:	4604      	mov	r4, r0
 800d60a:	2301      	movs	r3, #1
 800d60c:	e7f0      	b.n	800d5f0 <_vfiprintf_r+0x1bc>
 800d60e:	ab03      	add	r3, sp, #12
 800d610:	9300      	str	r3, [sp, #0]
 800d612:	462a      	mov	r2, r5
 800d614:	4b12      	ldr	r3, [pc, #72]	; (800d660 <_vfiprintf_r+0x22c>)
 800d616:	a904      	add	r1, sp, #16
 800d618:	4630      	mov	r0, r6
 800d61a:	f7fd fd67 	bl	800b0ec <_printf_float>
 800d61e:	4607      	mov	r7, r0
 800d620:	1c78      	adds	r0, r7, #1
 800d622:	d1d6      	bne.n	800d5d2 <_vfiprintf_r+0x19e>
 800d624:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d626:	07d9      	lsls	r1, r3, #31
 800d628:	d405      	bmi.n	800d636 <_vfiprintf_r+0x202>
 800d62a:	89ab      	ldrh	r3, [r5, #12]
 800d62c:	059a      	lsls	r2, r3, #22
 800d62e:	d402      	bmi.n	800d636 <_vfiprintf_r+0x202>
 800d630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d632:	f7fe faa5 	bl	800bb80 <__retarget_lock_release_recursive>
 800d636:	89ab      	ldrh	r3, [r5, #12]
 800d638:	065b      	lsls	r3, r3, #25
 800d63a:	f53f af1d 	bmi.w	800d478 <_vfiprintf_r+0x44>
 800d63e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d640:	e71c      	b.n	800d47c <_vfiprintf_r+0x48>
 800d642:	ab03      	add	r3, sp, #12
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	462a      	mov	r2, r5
 800d648:	4b05      	ldr	r3, [pc, #20]	; (800d660 <_vfiprintf_r+0x22c>)
 800d64a:	a904      	add	r1, sp, #16
 800d64c:	4630      	mov	r0, r6
 800d64e:	f7fd fff1 	bl	800b634 <_printf_i>
 800d652:	e7e4      	b.n	800d61e <_vfiprintf_r+0x1ea>
 800d654:	0800dd23 	.word	0x0800dd23
 800d658:	0800dd2d 	.word	0x0800dd2d
 800d65c:	0800b0ed 	.word	0x0800b0ed
 800d660:	0800d411 	.word	0x0800d411
 800d664:	0800dd29 	.word	0x0800dd29

0800d668 <__swbuf_r>:
 800d668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66a:	460e      	mov	r6, r1
 800d66c:	4614      	mov	r4, r2
 800d66e:	4605      	mov	r5, r0
 800d670:	b118      	cbz	r0, 800d67a <__swbuf_r+0x12>
 800d672:	6a03      	ldr	r3, [r0, #32]
 800d674:	b90b      	cbnz	r3, 800d67a <__swbuf_r+0x12>
 800d676:	f7fe f98b 	bl	800b990 <__sinit>
 800d67a:	69a3      	ldr	r3, [r4, #24]
 800d67c:	60a3      	str	r3, [r4, #8]
 800d67e:	89a3      	ldrh	r3, [r4, #12]
 800d680:	071a      	lsls	r2, r3, #28
 800d682:	d525      	bpl.n	800d6d0 <__swbuf_r+0x68>
 800d684:	6923      	ldr	r3, [r4, #16]
 800d686:	b31b      	cbz	r3, 800d6d0 <__swbuf_r+0x68>
 800d688:	6823      	ldr	r3, [r4, #0]
 800d68a:	6922      	ldr	r2, [r4, #16]
 800d68c:	1a98      	subs	r0, r3, r2
 800d68e:	6963      	ldr	r3, [r4, #20]
 800d690:	b2f6      	uxtb	r6, r6
 800d692:	4283      	cmp	r3, r0
 800d694:	4637      	mov	r7, r6
 800d696:	dc04      	bgt.n	800d6a2 <__swbuf_r+0x3a>
 800d698:	4621      	mov	r1, r4
 800d69a:	4628      	mov	r0, r5
 800d69c:	f7ff fdfc 	bl	800d298 <_fflush_r>
 800d6a0:	b9e0      	cbnz	r0, 800d6dc <__swbuf_r+0x74>
 800d6a2:	68a3      	ldr	r3, [r4, #8]
 800d6a4:	3b01      	subs	r3, #1
 800d6a6:	60a3      	str	r3, [r4, #8]
 800d6a8:	6823      	ldr	r3, [r4, #0]
 800d6aa:	1c5a      	adds	r2, r3, #1
 800d6ac:	6022      	str	r2, [r4, #0]
 800d6ae:	701e      	strb	r6, [r3, #0]
 800d6b0:	6962      	ldr	r2, [r4, #20]
 800d6b2:	1c43      	adds	r3, r0, #1
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d004      	beq.n	800d6c2 <__swbuf_r+0x5a>
 800d6b8:	89a3      	ldrh	r3, [r4, #12]
 800d6ba:	07db      	lsls	r3, r3, #31
 800d6bc:	d506      	bpl.n	800d6cc <__swbuf_r+0x64>
 800d6be:	2e0a      	cmp	r6, #10
 800d6c0:	d104      	bne.n	800d6cc <__swbuf_r+0x64>
 800d6c2:	4621      	mov	r1, r4
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	f7ff fde7 	bl	800d298 <_fflush_r>
 800d6ca:	b938      	cbnz	r0, 800d6dc <__swbuf_r+0x74>
 800d6cc:	4638      	mov	r0, r7
 800d6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6d0:	4621      	mov	r1, r4
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	f000 f806 	bl	800d6e4 <__swsetup_r>
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	d0d5      	beq.n	800d688 <__swbuf_r+0x20>
 800d6dc:	f04f 37ff 	mov.w	r7, #4294967295
 800d6e0:	e7f4      	b.n	800d6cc <__swbuf_r+0x64>
	...

0800d6e4 <__swsetup_r>:
 800d6e4:	b538      	push	{r3, r4, r5, lr}
 800d6e6:	4b2a      	ldr	r3, [pc, #168]	; (800d790 <__swsetup_r+0xac>)
 800d6e8:	4605      	mov	r5, r0
 800d6ea:	6818      	ldr	r0, [r3, #0]
 800d6ec:	460c      	mov	r4, r1
 800d6ee:	b118      	cbz	r0, 800d6f8 <__swsetup_r+0x14>
 800d6f0:	6a03      	ldr	r3, [r0, #32]
 800d6f2:	b90b      	cbnz	r3, 800d6f8 <__swsetup_r+0x14>
 800d6f4:	f7fe f94c 	bl	800b990 <__sinit>
 800d6f8:	89a3      	ldrh	r3, [r4, #12]
 800d6fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6fe:	0718      	lsls	r0, r3, #28
 800d700:	d422      	bmi.n	800d748 <__swsetup_r+0x64>
 800d702:	06d9      	lsls	r1, r3, #27
 800d704:	d407      	bmi.n	800d716 <__swsetup_r+0x32>
 800d706:	2309      	movs	r3, #9
 800d708:	602b      	str	r3, [r5, #0]
 800d70a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d70e:	81a3      	strh	r3, [r4, #12]
 800d710:	f04f 30ff 	mov.w	r0, #4294967295
 800d714:	e034      	b.n	800d780 <__swsetup_r+0x9c>
 800d716:	0758      	lsls	r0, r3, #29
 800d718:	d512      	bpl.n	800d740 <__swsetup_r+0x5c>
 800d71a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d71c:	b141      	cbz	r1, 800d730 <__swsetup_r+0x4c>
 800d71e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d722:	4299      	cmp	r1, r3
 800d724:	d002      	beq.n	800d72c <__swsetup_r+0x48>
 800d726:	4628      	mov	r0, r5
 800d728:	f7ff f8b4 	bl	800c894 <_free_r>
 800d72c:	2300      	movs	r3, #0
 800d72e:	6363      	str	r3, [r4, #52]	; 0x34
 800d730:	89a3      	ldrh	r3, [r4, #12]
 800d732:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d736:	81a3      	strh	r3, [r4, #12]
 800d738:	2300      	movs	r3, #0
 800d73a:	6063      	str	r3, [r4, #4]
 800d73c:	6923      	ldr	r3, [r4, #16]
 800d73e:	6023      	str	r3, [r4, #0]
 800d740:	89a3      	ldrh	r3, [r4, #12]
 800d742:	f043 0308 	orr.w	r3, r3, #8
 800d746:	81a3      	strh	r3, [r4, #12]
 800d748:	6923      	ldr	r3, [r4, #16]
 800d74a:	b94b      	cbnz	r3, 800d760 <__swsetup_r+0x7c>
 800d74c:	89a3      	ldrh	r3, [r4, #12]
 800d74e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d756:	d003      	beq.n	800d760 <__swsetup_r+0x7c>
 800d758:	4621      	mov	r1, r4
 800d75a:	4628      	mov	r0, r5
 800d75c:	f000 f884 	bl	800d868 <__smakebuf_r>
 800d760:	89a0      	ldrh	r0, [r4, #12]
 800d762:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d766:	f010 0301 	ands.w	r3, r0, #1
 800d76a:	d00a      	beq.n	800d782 <__swsetup_r+0x9e>
 800d76c:	2300      	movs	r3, #0
 800d76e:	60a3      	str	r3, [r4, #8]
 800d770:	6963      	ldr	r3, [r4, #20]
 800d772:	425b      	negs	r3, r3
 800d774:	61a3      	str	r3, [r4, #24]
 800d776:	6923      	ldr	r3, [r4, #16]
 800d778:	b943      	cbnz	r3, 800d78c <__swsetup_r+0xa8>
 800d77a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d77e:	d1c4      	bne.n	800d70a <__swsetup_r+0x26>
 800d780:	bd38      	pop	{r3, r4, r5, pc}
 800d782:	0781      	lsls	r1, r0, #30
 800d784:	bf58      	it	pl
 800d786:	6963      	ldrpl	r3, [r4, #20]
 800d788:	60a3      	str	r3, [r4, #8]
 800d78a:	e7f4      	b.n	800d776 <__swsetup_r+0x92>
 800d78c:	2000      	movs	r0, #0
 800d78e:	e7f7      	b.n	800d780 <__swsetup_r+0x9c>
 800d790:	20000068 	.word	0x20000068

0800d794 <_raise_r>:
 800d794:	291f      	cmp	r1, #31
 800d796:	b538      	push	{r3, r4, r5, lr}
 800d798:	4604      	mov	r4, r0
 800d79a:	460d      	mov	r5, r1
 800d79c:	d904      	bls.n	800d7a8 <_raise_r+0x14>
 800d79e:	2316      	movs	r3, #22
 800d7a0:	6003      	str	r3, [r0, #0]
 800d7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7a6:	bd38      	pop	{r3, r4, r5, pc}
 800d7a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d7aa:	b112      	cbz	r2, 800d7b2 <_raise_r+0x1e>
 800d7ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7b0:	b94b      	cbnz	r3, 800d7c6 <_raise_r+0x32>
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	f000 f830 	bl	800d818 <_getpid_r>
 800d7b8:	462a      	mov	r2, r5
 800d7ba:	4601      	mov	r1, r0
 800d7bc:	4620      	mov	r0, r4
 800d7be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7c2:	f000 b817 	b.w	800d7f4 <_kill_r>
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d00a      	beq.n	800d7e0 <_raise_r+0x4c>
 800d7ca:	1c59      	adds	r1, r3, #1
 800d7cc:	d103      	bne.n	800d7d6 <_raise_r+0x42>
 800d7ce:	2316      	movs	r3, #22
 800d7d0:	6003      	str	r3, [r0, #0]
 800d7d2:	2001      	movs	r0, #1
 800d7d4:	e7e7      	b.n	800d7a6 <_raise_r+0x12>
 800d7d6:	2400      	movs	r4, #0
 800d7d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d7dc:	4628      	mov	r0, r5
 800d7de:	4798      	blx	r3
 800d7e0:	2000      	movs	r0, #0
 800d7e2:	e7e0      	b.n	800d7a6 <_raise_r+0x12>

0800d7e4 <raise>:
 800d7e4:	4b02      	ldr	r3, [pc, #8]	; (800d7f0 <raise+0xc>)
 800d7e6:	4601      	mov	r1, r0
 800d7e8:	6818      	ldr	r0, [r3, #0]
 800d7ea:	f7ff bfd3 	b.w	800d794 <_raise_r>
 800d7ee:	bf00      	nop
 800d7f0:	20000068 	.word	0x20000068

0800d7f4 <_kill_r>:
 800d7f4:	b538      	push	{r3, r4, r5, lr}
 800d7f6:	4d07      	ldr	r5, [pc, #28]	; (800d814 <_kill_r+0x20>)
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	4608      	mov	r0, r1
 800d7fe:	4611      	mov	r1, r2
 800d800:	602b      	str	r3, [r5, #0]
 800d802:	f7f4 fd0d 	bl	8002220 <_kill>
 800d806:	1c43      	adds	r3, r0, #1
 800d808:	d102      	bne.n	800d810 <_kill_r+0x1c>
 800d80a:	682b      	ldr	r3, [r5, #0]
 800d80c:	b103      	cbz	r3, 800d810 <_kill_r+0x1c>
 800d80e:	6023      	str	r3, [r4, #0]
 800d810:	bd38      	pop	{r3, r4, r5, pc}
 800d812:	bf00      	nop
 800d814:	20004c30 	.word	0x20004c30

0800d818 <_getpid_r>:
 800d818:	f7f4 bcfa 	b.w	8002210 <_getpid>

0800d81c <__swhatbuf_r>:
 800d81c:	b570      	push	{r4, r5, r6, lr}
 800d81e:	460c      	mov	r4, r1
 800d820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d824:	2900      	cmp	r1, #0
 800d826:	b096      	sub	sp, #88	; 0x58
 800d828:	4615      	mov	r5, r2
 800d82a:	461e      	mov	r6, r3
 800d82c:	da0d      	bge.n	800d84a <__swhatbuf_r+0x2e>
 800d82e:	89a3      	ldrh	r3, [r4, #12]
 800d830:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d834:	f04f 0100 	mov.w	r1, #0
 800d838:	bf0c      	ite	eq
 800d83a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d83e:	2340      	movne	r3, #64	; 0x40
 800d840:	2000      	movs	r0, #0
 800d842:	6031      	str	r1, [r6, #0]
 800d844:	602b      	str	r3, [r5, #0]
 800d846:	b016      	add	sp, #88	; 0x58
 800d848:	bd70      	pop	{r4, r5, r6, pc}
 800d84a:	466a      	mov	r2, sp
 800d84c:	f000 f848 	bl	800d8e0 <_fstat_r>
 800d850:	2800      	cmp	r0, #0
 800d852:	dbec      	blt.n	800d82e <__swhatbuf_r+0x12>
 800d854:	9901      	ldr	r1, [sp, #4]
 800d856:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d85a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d85e:	4259      	negs	r1, r3
 800d860:	4159      	adcs	r1, r3
 800d862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d866:	e7eb      	b.n	800d840 <__swhatbuf_r+0x24>

0800d868 <__smakebuf_r>:
 800d868:	898b      	ldrh	r3, [r1, #12]
 800d86a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d86c:	079d      	lsls	r5, r3, #30
 800d86e:	4606      	mov	r6, r0
 800d870:	460c      	mov	r4, r1
 800d872:	d507      	bpl.n	800d884 <__smakebuf_r+0x1c>
 800d874:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d878:	6023      	str	r3, [r4, #0]
 800d87a:	6123      	str	r3, [r4, #16]
 800d87c:	2301      	movs	r3, #1
 800d87e:	6163      	str	r3, [r4, #20]
 800d880:	b002      	add	sp, #8
 800d882:	bd70      	pop	{r4, r5, r6, pc}
 800d884:	ab01      	add	r3, sp, #4
 800d886:	466a      	mov	r2, sp
 800d888:	f7ff ffc8 	bl	800d81c <__swhatbuf_r>
 800d88c:	9900      	ldr	r1, [sp, #0]
 800d88e:	4605      	mov	r5, r0
 800d890:	4630      	mov	r0, r6
 800d892:	f7ff f873 	bl	800c97c <_malloc_r>
 800d896:	b948      	cbnz	r0, 800d8ac <__smakebuf_r+0x44>
 800d898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d89c:	059a      	lsls	r2, r3, #22
 800d89e:	d4ef      	bmi.n	800d880 <__smakebuf_r+0x18>
 800d8a0:	f023 0303 	bic.w	r3, r3, #3
 800d8a4:	f043 0302 	orr.w	r3, r3, #2
 800d8a8:	81a3      	strh	r3, [r4, #12]
 800d8aa:	e7e3      	b.n	800d874 <__smakebuf_r+0xc>
 800d8ac:	89a3      	ldrh	r3, [r4, #12]
 800d8ae:	6020      	str	r0, [r4, #0]
 800d8b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8b4:	81a3      	strh	r3, [r4, #12]
 800d8b6:	9b00      	ldr	r3, [sp, #0]
 800d8b8:	6163      	str	r3, [r4, #20]
 800d8ba:	9b01      	ldr	r3, [sp, #4]
 800d8bc:	6120      	str	r0, [r4, #16]
 800d8be:	b15b      	cbz	r3, 800d8d8 <__smakebuf_r+0x70>
 800d8c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8c4:	4630      	mov	r0, r6
 800d8c6:	f000 f81d 	bl	800d904 <_isatty_r>
 800d8ca:	b128      	cbz	r0, 800d8d8 <__smakebuf_r+0x70>
 800d8cc:	89a3      	ldrh	r3, [r4, #12]
 800d8ce:	f023 0303 	bic.w	r3, r3, #3
 800d8d2:	f043 0301 	orr.w	r3, r3, #1
 800d8d6:	81a3      	strh	r3, [r4, #12]
 800d8d8:	89a3      	ldrh	r3, [r4, #12]
 800d8da:	431d      	orrs	r5, r3
 800d8dc:	81a5      	strh	r5, [r4, #12]
 800d8de:	e7cf      	b.n	800d880 <__smakebuf_r+0x18>

0800d8e0 <_fstat_r>:
 800d8e0:	b538      	push	{r3, r4, r5, lr}
 800d8e2:	4d07      	ldr	r5, [pc, #28]	; (800d900 <_fstat_r+0x20>)
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	4604      	mov	r4, r0
 800d8e8:	4608      	mov	r0, r1
 800d8ea:	4611      	mov	r1, r2
 800d8ec:	602b      	str	r3, [r5, #0]
 800d8ee:	f7f4 fcf6 	bl	80022de <_fstat>
 800d8f2:	1c43      	adds	r3, r0, #1
 800d8f4:	d102      	bne.n	800d8fc <_fstat_r+0x1c>
 800d8f6:	682b      	ldr	r3, [r5, #0]
 800d8f8:	b103      	cbz	r3, 800d8fc <_fstat_r+0x1c>
 800d8fa:	6023      	str	r3, [r4, #0]
 800d8fc:	bd38      	pop	{r3, r4, r5, pc}
 800d8fe:	bf00      	nop
 800d900:	20004c30 	.word	0x20004c30

0800d904 <_isatty_r>:
 800d904:	b538      	push	{r3, r4, r5, lr}
 800d906:	4d06      	ldr	r5, [pc, #24]	; (800d920 <_isatty_r+0x1c>)
 800d908:	2300      	movs	r3, #0
 800d90a:	4604      	mov	r4, r0
 800d90c:	4608      	mov	r0, r1
 800d90e:	602b      	str	r3, [r5, #0]
 800d910:	f7f4 fcf5 	bl	80022fe <_isatty>
 800d914:	1c43      	adds	r3, r0, #1
 800d916:	d102      	bne.n	800d91e <_isatty_r+0x1a>
 800d918:	682b      	ldr	r3, [r5, #0]
 800d91a:	b103      	cbz	r3, 800d91e <_isatty_r+0x1a>
 800d91c:	6023      	str	r3, [r4, #0]
 800d91e:	bd38      	pop	{r3, r4, r5, pc}
 800d920:	20004c30 	.word	0x20004c30

0800d924 <_init>:
 800d924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d926:	bf00      	nop
 800d928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d92a:	bc08      	pop	{r3}
 800d92c:	469e      	mov	lr, r3
 800d92e:	4770      	bx	lr

0800d930 <_fini>:
 800d930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d932:	bf00      	nop
 800d934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d936:	bc08      	pop	{r3}
 800d938:	469e      	mov	lr, r3
 800d93a:	4770      	bx	lr
