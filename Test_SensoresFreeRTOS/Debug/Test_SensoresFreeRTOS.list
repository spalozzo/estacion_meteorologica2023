
Test_SensoresFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c79c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800c940  0800c940  0001c940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cebc  0800cebc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cebc  0800cebc  0001cebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cec4  0800cec4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cec4  0800cec4  0001cec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cec8  0800cec8  0001cec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004824  200001e0  0800d0ac  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a04  0800d0ac  00024a04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c86d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004209  00000000  00000000  0003ca7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  00040c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001798  00000000  00000000  000425c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd65  00000000  00000000  00043d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e519  00000000  00000000  0005fabd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7683  00000000  00000000  0007dfd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00125659  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bb4  00000000  00000000  001256ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c924 	.word	0x0800c924

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800c924 	.word	0x0800c924

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9bf 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b974 	b.w	8000ff8 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468e      	mov	lr, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14d      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4694      	mov	ip, r2
 8000d3a:	d969      	bls.n	8000e10 <__udivmoddi4+0xe8>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b152      	cbz	r2, 8000d58 <__udivmoddi4+0x30>
 8000d42:	fa01 f302 	lsl.w	r3, r1, r2
 8000d46:	f1c2 0120 	rsb	r1, r2, #32
 8000d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d52:	ea41 0e03 	orr.w	lr, r1, r3
 8000d56:	4094      	lsls	r4, r2
 8000d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d5c:	0c21      	lsrs	r1, r4, #16
 8000d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d62:	fa1f f78c 	uxth.w	r7, ip
 8000d66:	fb08 e316 	mls	r3, r8, r6, lr
 8000d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6e:	fb06 f107 	mul.w	r1, r6, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7e:	f080 811f 	bcs.w	8000fc0 <__udivmoddi4+0x298>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 811c 	bls.w	8000fc0 <__udivmoddi4+0x298>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x92>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dac:	f080 810a 	bcs.w	8000fc4 <__udivmoddi4+0x29c>
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	f240 8107 	bls.w	8000fc4 <__udivmoddi4+0x29c>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbe:	1be4      	subs	r4, r4, r7
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa4>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xc2>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	f000 80ef 	beq.w	8000fba <__udivmoddi4+0x292>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	e9c5 0100 	strd	r0, r1, [r5]
 8000de2:	4630      	mov	r0, r6
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f683 	clz	r6, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d14a      	bne.n	8000e88 <__udivmoddi4+0x160>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd4>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80f9 	bhi.w	8000fee <__udivmoddi4+0x2c6>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa4>
 8000e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xec>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 8092 	bne.w	8000f42 <__udivmoddi4+0x21a>
 8000e1e:	eba1 010c 	sub.w	r1, r1, ip
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	2601      	movs	r6, #1
 8000e2c:	0c20      	lsrs	r0, r4, #16
 8000e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e32:	fb07 1113 	mls	r1, r7, r3, r1
 8000e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3a:	fb0e f003 	mul.w	r0, lr, r3
 8000e3e:	4288      	cmp	r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x12c>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x12a>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f200 80cb 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e52:	4643      	mov	r3, r8
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e64:	fb0e fe00 	mul.w	lr, lr, r0
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x156>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x154>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2ca>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	eba4 040e 	sub.w	r4, r4, lr
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	e79c      	b.n	8000dc2 <__udivmoddi4+0x9a>
 8000e88:	f1c6 0720 	rsb	r7, r6, #32
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e96:	fa20 f407 	lsr.w	r4, r0, r7
 8000e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eae:	0c20      	lsrs	r0, r4, #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec6:	d90b      	bls.n	8000ee0 <__udivmoddi4+0x1b8>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed0:	f080 8088 	bcs.w	8000fe4 <__udivmoddi4+0x2bc>
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	f240 8085 	bls.w	8000fe4 <__udivmoddi4+0x2bc>
 8000eda:	f1a8 0802 	sub.w	r8, r8, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x1e2>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f00:	d26c      	bcs.n	8000fdc <__udivmoddi4+0x2b4>
 8000f02:	458e      	cmp	lr, r1
 8000f04:	d96a      	bls.n	8000fdc <__udivmoddi4+0x2b4>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f12:	eba1 010e 	sub.w	r1, r1, lr
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	46c8      	mov	r8, r9
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	d356      	bcc.n	8000fcc <__udivmoddi4+0x2a4>
 8000f1e:	d053      	beq.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f20:	b15d      	cbz	r5, 8000f3a <__udivmoddi4+0x212>
 8000f22:	ebb3 0208 	subs.w	r2, r3, r8
 8000f26:	eb61 010e 	sbc.w	r1, r1, lr
 8000f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f32:	40f1      	lsrs	r1, r6
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	f1c2 0320 	rsb	r3, r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4091      	lsls	r1, r2
 8000f52:	4301      	orrs	r1, r0
 8000f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f58:	fa1f fe8c 	uxth.w	lr, ip
 8000f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f60:	fb07 3610 	mls	r6, r7, r0, r3
 8000f64:	0c0b      	lsrs	r3, r1, #16
 8000f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	fa04 f402 	lsl.w	r4, r4, r2
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x260>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7e:	d22f      	bcs.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d92d      	bls.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1b9b      	subs	r3, r3, r6
 8000f8a:	b289      	uxth	r1, r1
 8000f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f90:	fb07 3316 	mls	r3, r7, r6, r3
 8000f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f98:	fb06 f30e 	mul.w	r3, r6, lr
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x28a>
 8000fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa8:	d216      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d914      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb8:	e738      	b.n	8000e2c <__udivmoddi4+0x104>
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e705      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e3      	b.n	8000d8c <__udivmoddi4+0x64>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6f8      	b.n	8000dba <__udivmoddi4+0x92>
 8000fc8:	454b      	cmp	r3, r9
 8000fca:	d2a9      	bcs.n	8000f20 <__udivmoddi4+0x1f8>
 8000fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7a3      	b.n	8000f20 <__udivmoddi4+0x1f8>
 8000fd8:	4646      	mov	r6, r8
 8000fda:	e7ea      	b.n	8000fb2 <__udivmoddi4+0x28a>
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e794      	b.n	8000f0a <__udivmoddi4+0x1e2>
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	e7d1      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fe4:	46d0      	mov	r8, sl
 8000fe6:	e77b      	b.n	8000ee0 <__udivmoddi4+0x1b8>
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e732      	b.n	8000e54 <__udivmoddi4+0x12c>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e709      	b.n	8000e06 <__udivmoddi4+0xde>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x156>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <ESP_Init>:
	for (int i=0; i<len; i++) buf[i] = '\0';
}


void ESP_Init (char *SSID, char *PASSWD)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b096      	sub	sp, #88	; 0x58
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 8001006:	f000 f855 	bl	80010b4 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 800100a:	4823      	ldr	r0, [pc, #140]	; (8001098 <ESP_Init+0x9c>)
 800100c:	f000 f91e 	bl	800124c <Uart_sendstring>
	HAL_Delay(1000);
 8001010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001014:	f001 fe1e 	bl	8002c54 <HAL_Delay>

	Uart_flush();
 8001018:	f000 f894 	bl	8001144 <Uart_flush>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 800101c:	481f      	ldr	r0, [pc, #124]	; (800109c <ESP_Init+0xa0>)
 800101e:	f000 f915 	bl	800124c <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 8001022:	bf00      	nop
 8001024:	481e      	ldr	r0, [pc, #120]	; (80010a0 <ESP_Init+0xa4>)
 8001026:	f000 f941 	bl	80012ac <Wait_for>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f9      	beq.n	8001024 <ESP_Init+0x28>

	Uart_flush();
 8001030:	f000 f888 	bl	8001144 <Uart_flush>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 8001034:	481b      	ldr	r0, [pc, #108]	; (80010a4 <ESP_Init+0xa8>)
 8001036:	f000 f909 	bl	800124c <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 800103a:	bf00      	nop
 800103c:	4818      	ldr	r0, [pc, #96]	; (80010a0 <ESP_Init+0xa4>)
 800103e:	f000 f935 	bl	80012ac <Wait_for>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f9      	beq.n	800103c <ESP_Init+0x40>

	Uart_flush();
 8001048:	f000 f87c 	bl	8001144 <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800104c:	f107 0008 	add.w	r0, r7, #8
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4914      	ldr	r1, [pc, #80]	; (80010a8 <ESP_Init+0xac>)
 8001056:	f009 f9fb 	bl	800a450 <siprintf>
	Uart_sendstring(data);
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f8f4 	bl	800124c <Uart_sendstring>
	while (!(Wait_for("GOT IP\r\n")));
 8001064:	bf00      	nop
 8001066:	4811      	ldr	r0, [pc, #68]	; (80010ac <ESP_Init+0xb0>)
 8001068:	f000 f920 	bl	80012ac <Wait_for>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f9      	beq.n	8001066 <ESP_Init+0x6a>

	Uart_flush();
 8001072:	f000 f867 	bl	8001144 <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 8001076:	480e      	ldr	r0, [pc, #56]	; (80010b0 <ESP_Init+0xb4>)
 8001078:	f000 f8e8 	bl	800124c <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 800107c:	bf00      	nop
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <ESP_Init+0xa4>)
 8001080:	f000 f914 	bl	80012ac <Wait_for>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f9      	beq.n	800107e <ESP_Init+0x82>

	Uart_flush();
 800108a:	f000 f85b 	bl	8001144 <Uart_flush>

}
 800108e:	bf00      	nop
 8001090:	3758      	adds	r7, #88	; 0x58
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	0800c940 	.word	0x0800c940
 800109c:	0800c94c 	.word	0x0800c94c
 80010a0:	0800c954 	.word	0x0800c954
 80010a4:	0800c95c 	.word	0x0800c95c
 80010a8:	0800c96c 	.word	0x0800c96c
 80010ac:	0800c984 	.word	0x0800c984
 80010b0:	0800c990 	.word	0x0800c990

080010b4 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <Ringbuf_init+0x3c>)
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <Ringbuf_init+0x40>)
 80010bc:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <Ringbuf_init+0x44>)
 80010c0:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <Ringbuf_init+0x48>)
 80010c2:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <Ringbuf_init+0x4c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <Ringbuf_init+0x4c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0201 	orr.w	r2, r2, #1
 80010d2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <Ringbuf_init+0x4c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <Ringbuf_init+0x4c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f042 0220 	orr.w	r2, r2, #32
 80010e2:	60da      	str	r2, [r3, #12]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	2000028c 	.word	0x2000028c
 80010f4:	200001fc 	.word	0x200001fc
 80010f8:	20000290 	.word	0x20000290
 80010fc:	20000244 	.word	0x20000244
 8001100:	20000a68 	.word	0x20000a68

08001104 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	3301      	adds	r3, #1
 8001116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800111a:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	429a      	cmp	r2, r3
 8001124:	d007      	beq.n	8001136 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	79f9      	ldrb	r1, [r7, #7]
 800112e:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <Uart_flush>:

void Uart_flush (void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <Uart_flush+0x1c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <Uart_flush+0x1c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001152:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	2000028c 	.word	0x2000028c

08001164 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <Uart_read+0x4c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <Uart_read+0x4c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	429a      	cmp	r2, r3
 8001178:	d102      	bne.n	8001180 <Uart_read+0x1c>
  {
    return -1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	e010      	b.n	80011a2 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <Uart_read+0x4c>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <Uart_read+0x4c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	5cd3      	ldrb	r3, [r2, r3]
 800118c:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <Uart_read+0x4c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <Uart_read+0x4c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800119e:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	2000028c 	.word	0x2000028c

080011b4 <Uart_write>:

void Uart_write(int c)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	if (c>=0)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db21      	blt.n	8001206 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <Uart_write+0x60>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	3301      	adds	r3, #1
 80011ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011ce:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 80011d0:	bf00      	nop
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <Uart_write+0x60>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d0f9      	beq.n	80011d2 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <Uart_write+0x60>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <Uart_write+0x60>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	b2c9      	uxtb	r1, r1
 80011ec:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <Uart_write+0x60>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <Uart_write+0x64>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <Uart_write+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001204:	60da      	str	r2, [r3, #12]
	}
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000290 	.word	0x20000290
 8001218:	20000a68 	.word	0x20000a68

0800121c <IsDataAvailable>:

int IsDataAvailable(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <IsDataAvailable+0x2c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <IsDataAvailable+0x2c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	b29b      	uxth	r3, r3
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	b29b      	uxth	r3, r3
 8001234:	3340      	adds	r3, #64	; 0x40
 8001236:	b29b      	uxth	r3, r3
 8001238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	2000028c 	.word	0x2000028c

0800124c <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8001254:	e006      	b.n	8001264 <Uart_sendstring+0x18>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ffa8 	bl	80011b4 <Uart_write>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f4      	bne.n	8001256 <Uart_sendstring+0xa>
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <Uart_peek+0x30>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <Uart_peek+0x30>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001288:	429a      	cmp	r2, r3
 800128a:	d102      	bne.n	8001292 <Uart_peek+0x1a>
  {
    return -1;
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	e005      	b.n	800129e <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <Uart_peek+0x30>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <Uart_peek+0x30>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	2000028c 	.word	0x2000028c

080012ac <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7fe ff91 	bl	80001e0 <strlen>
 80012be:	4603      	mov	r3, r0
 80012c0:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 80012c2:	bf00      	nop
 80012c4:	f7ff ffaa 	bl	800121c <IsDataAvailable>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0fa      	beq.n	80012c4 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 80012ce:	f7ff ffd3 	bl	8001278 <Uart_peek>
 80012d2:	4601      	mov	r1, r0
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4299      	cmp	r1, r3
 80012de:	d01a      	beq.n	8001316 <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <Wait_for+0xa4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <Wait_for+0xa4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80012f0:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 80012f2:	e7e6      	b.n	80012c2 <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3301      	adds	r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
		Uart_read();
 80012fa:	f7ff ff33 	bl	8001164 <Uart_read>
		if (so_far == len) return 1;
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	429a      	cmp	r2, r3
 8001304:	d101      	bne.n	800130a <Wait_for+0x5e>
 8001306:	2301      	movs	r3, #1
 8001308:	e01d      	b.n	8001346 <Wait_for+0x9a>
		while (!IsDataAvailable());
 800130a:	bf00      	nop
 800130c:	f7ff ff86 	bl	800121c <IsDataAvailable>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0fa      	beq.n	800130c <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 8001316:	f7ff ffaf 	bl	8001278 <Uart_peek>
 800131a:	4601      	mov	r1, r0
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4299      	cmp	r1, r3
 8001326:	d0e5      	beq.n	80012f4 <Wait_for+0x48>
	}

	if (so_far != len)
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	429a      	cmp	r2, r3
 800132e:	d002      	beq.n	8001336 <Wait_for+0x8a>
	{
		so_far = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
		goto again;
 8001334:	e7c5      	b.n	80012c2 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	429a      	cmp	r2, r3
 800133c:	d101      	bne.n	8001342 <Wait_for+0x96>
 800133e:	2301      	movs	r3, #1
 8001340:	e001      	b.n	8001346 <Wait_for+0x9a>
	else return -1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2000028c 	.word	0x2000028c

08001354 <Uart_isr>:


void Uart_isr (UART_HandleTypeDef *huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f003 0320 	and.w	r3, r3, #32
 8001372:	2b00      	cmp	r3, #0
 8001374:	d013      	beq.n	800139e <Uart_isr+0x4a>
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	f003 0320 	and.w	r3, r3, #32
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00e      	beq.n	800139e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <Uart_isr+0xac>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff feb4 	bl	8001104 <store_char>
        return;
 800139c:	e02c      	b.n	80013f8 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d027      	beq.n	80013f8 <Uart_isr+0xa4>
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d022      	beq.n	80013f8 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <Uart_isr+0xb0>)
 80013b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <Uart_isr+0xb0>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d108      	bne.n	80013d0 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013cc:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80013ce:	e012      	b.n	80013f6 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <Uart_isr+0xb0>)
 80013d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <Uart_isr+0xb0>)
 80013d6:	5cd3      	ldrb	r3, [r2, r3]
 80013d8:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <Uart_isr+0xb0>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	3301      	adds	r3, #1
 80013e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <Uart_isr+0xb0>)
 80013e6:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	7bba      	ldrb	r2, [r7, #14]
 80013f4:	605a      	str	r2, [r3, #4]
    	return;
 80013f6:	bf00      	nop
    }
}
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000028c 	.word	0x2000028c
 8001404:	20000244 	.word	0x20000244

08001408 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8001410:	4a0a      	ldr	r2, [pc, #40]	; (800143c <BH1750_Init+0x34>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8001416:	f000 f813 	bl	8001440 <BH1750_Reset>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d107      	bne.n	8001430 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8001420:	2045      	movs	r0, #69	; 0x45
 8001422:	f000 f859 	bl	80014d8 <BH1750_SetMtreg>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <BH1750_Init+0x28>
			return BH1750_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	e000      	b.n	8001432 <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8001430:	2301      	movs	r3, #1
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000294 	.word	0x20000294

08001440 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8001446:	2307      	movs	r3, #7
 8001448:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <BH1750_Reset+0x30>)
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	1dfa      	adds	r2, r7, #7
 8001450:	230a      	movs	r3, #10
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2301      	movs	r3, #1
 8001456:	2146      	movs	r1, #70	; 0x46
 8001458:	f002 ff46 	bl	80042e8 <HAL_I2C_Master_Transmit>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <BH1750_Reset+0x26>
	//if(HAL_OK == HAL_I2C_Master_Transmit_DMA(bh1750_i2c, BH1750_ADDRESS, &tmp, 1))
		return BH1750_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e000      	b.n	8001468 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000294 	.word	0x20000294

08001474 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(BH1750_MODE Mode)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af02      	add	r7, sp, #8
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d106      	bne.n	8001496 <BH1750_SetMode+0x22>
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <BH1750_SetMode+0x22>
 8001492:	2301      	movs	r3, #1
 8001494:	e018      	b.n	80014c8 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <BH1750_SetMode+0x30>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e011      	b.n	80014c8 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 80014a4:	79fa      	ldrb	r2, [r7, #7]
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <BH1750_SetMode+0x5c>)
 80014a8:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <BH1750_SetMode+0x60>)
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	1dfa      	adds	r2, r7, #7
 80014b0:	230a      	movs	r3, #10
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2301      	movs	r3, #1
 80014b6:	2146      	movs	r1, #70	; 0x46
 80014b8:	f002 ff16 	bl	80042e8 <HAL_I2C_Master_Transmit>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <BH1750_SetMode+0x52>
		return BH1750_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e000      	b.n	80014c8 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000298 	.word	0x20000298
 80014d4:	20000294 	.word	0x20000294

080014d8 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af02      	add	r7, sp, #8
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b1e      	cmp	r3, #30
 80014e6:	d902      	bls.n	80014ee <BH1750_SetMtreg+0x16>
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	2bff      	cmp	r3, #255	; 0xff
 80014ec:	d101      	bne.n	80014f2 <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e037      	b.n	8001562 <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 80014f2:	4a1e      	ldr	r2, [pc, #120]	; (800156c <BH1750_SetMtreg+0x94>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001502:	b2db      	uxtb	r3, r3
 8001504:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	f003 031f 	and.w	r3, r3, #31
 800150e:	b25b      	sxtb	r3, r3
 8001510:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001514:	b25b      	sxtb	r3, r3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <BH1750_SetMtreg+0x98>)
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	f107 020c 	add.w	r2, r7, #12
 8001522:	230a      	movs	r3, #10
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2301      	movs	r3, #1
 8001528:	2146      	movs	r1, #70	; 0x46
 800152a:	f002 fedd 	bl	80042e8 <HAL_I2C_Master_Transmit>
 800152e:	4603      	mov	r3, r0
 8001530:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e012      	b.n	8001562 <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <BH1750_SetMtreg+0x98>)
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	230a      	movs	r3, #10
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	2301      	movs	r3, #1
 800154c:	2146      	movs	r1, #70	; 0x46
 800154e:	f002 fecb 	bl	80042e8 <HAL_I2C_Master_Transmit>
 8001552:	4603      	mov	r3, r0
 8001554:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	e000      	b.n	8001562 <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8001560:	2301      	movs	r3, #1
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000299 	.word	0x20000299
 8001570:	20000294 	.word	0x20000294

08001574 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af02      	add	r7, sp, #8
 800157a:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <BH1750_ReadLight+0xa0>)
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	f107 0208 	add.w	r2, r7, #8
 8001584:	230a      	movs	r3, #10
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2302      	movs	r3, #2
 800158a:	2146      	movs	r1, #70	; 0x46
 800158c:	f002 ffaa 	bl	80044e4 <HAL_I2C_Master_Receive>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d138      	bne.n	8001608 <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 8001596:	7a3b      	ldrb	r3, [r7, #8]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	7a7a      	ldrb	r2, [r7, #9]
 800159c:	4313      	orrs	r3, r2
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a6:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <BH1750_ReadLight+0xa4>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b45      	cmp	r3, #69	; 0x45
 80015b0:	d00f      	beq.n	80015d2 <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <BH1750_ReadLight+0xa4>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015be:	eddf 6a17 	vldr	s13, [pc, #92]	; 800161c <BH1750_ReadLight+0xa8>
 80015c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80015ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ce:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <BH1750_ReadLight+0xac>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b21      	cmp	r3, #33	; 0x21
 80015d8:	d003      	beq.n	80015e2 <BH1750_ReadLight+0x6e>
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <BH1750_ReadLight+0xac>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b11      	cmp	r3, #17
 80015e0:	d107      	bne.n	80015f2 <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 80015e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80015e6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ee:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 80015f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80015f6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001624 <BH1750_ReadLight+0xb0>
 80015fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	e000      	b.n	800160a <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8001608:	2301      	movs	r3, #1
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000294 	.word	0x20000294
 8001618:	20000299 	.word	0x20000299
 800161c:	428a0000 	.word	0x428a0000
 8001620:	20000298 	.word	0x20000298
 8001624:	3f99999a 	.word	0x3f99999a

08001628 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08c      	sub	sp, #48	; 0x30
 800162c:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	2319      	movs	r3, #25
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	463b      	mov	r3, r7
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	2288      	movs	r2, #136	; 0x88
 8001640:	21ec      	movs	r1, #236	; 0xec
 8001642:	483a      	ldr	r0, [pc, #232]	; (800172c <TrimRead+0x104>)
 8001644:	f003 fa6e 	bl	8004b24 <HAL_I2C_Mem_Read>

	//	// Read NVM from 0xE1 to 0xE7
	//	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001648:	787b      	ldrb	r3, [r7, #1]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	b21a      	sxth	r2, r3
 800164e:	783b      	ldrb	r3, [r7, #0]
 8001650:	b21b      	sxth	r3, r3
 8001652:	4313      	orrs	r3, r2
 8001654:	b21b      	sxth	r3, r3
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b35      	ldr	r3, [pc, #212]	; (8001730 <TrimRead+0x108>)
 800165a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b21a      	sxth	r2, r3
 8001662:	78bb      	ldrb	r3, [r7, #2]
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b21a      	sxth	r2, r3
 800166a:	4b32      	ldr	r3, [pc, #200]	; (8001734 <TrimRead+0x10c>)
 800166c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800166e:	797b      	ldrb	r3, [r7, #5]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	b21a      	sxth	r2, r3
 8001674:	793b      	ldrb	r3, [r7, #4]
 8001676:	b21b      	sxth	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b21a      	sxth	r2, r3
 800167c:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <TrimRead+0x110>)
 800167e:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	b21a      	sxth	r2, r3
 8001686:	797b      	ldrb	r3, [r7, #5]
 8001688:	b21b      	sxth	r3, r3
 800168a:	4313      	orrs	r3, r2
 800168c:	b21b      	sxth	r3, r3
 800168e:	b29a      	uxth	r2, r3
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <TrimRead+0x114>)
 8001692:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001694:	7a7b      	ldrb	r3, [r7, #9]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b21a      	sxth	r2, r3
 800169a:	79bb      	ldrb	r3, [r7, #6]
 800169c:	b21b      	sxth	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <TrimRead+0x118>)
 80016a4:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 80016a6:	7afb      	ldrb	r3, [r7, #11]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	7abb      	ldrb	r3, [r7, #10]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	4b23      	ldr	r3, [pc, #140]	; (8001744 <TrimRead+0x11c>)
 80016b6:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 80016b8:	7b7b      	ldrb	r3, [r7, #13]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	b21a      	sxth	r2, r3
 80016be:	7b3b      	ldrb	r3, [r7, #12]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <TrimRead+0x120>)
 80016c8:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	7bbb      	ldrb	r3, [r7, #14]
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	4313      	orrs	r3, r2
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	4b1c      	ldr	r3, [pc, #112]	; (800174c <TrimRead+0x124>)
 80016da:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80016dc:	7c7b      	ldrb	r3, [r7, #17]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	7c3b      	ldrb	r3, [r7, #16]
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	4313      	orrs	r3, r2
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <TrimRead+0x128>)
 80016ec:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80016ee:	7cfb      	ldrb	r3, [r7, #19]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	b21a      	sxth	r2, r3
 80016f4:	7cbb      	ldrb	r3, [r7, #18]
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <TrimRead+0x12c>)
 80016fe:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8001700:	7d7b      	ldrb	r3, [r7, #21]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	b21a      	sxth	r2, r3
 8001706:	7d3b      	ldrb	r3, [r7, #20]
 8001708:	b21b      	sxth	r3, r3
 800170a:	4313      	orrs	r3, r2
 800170c:	b21a      	sxth	r2, r3
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <TrimRead+0x130>)
 8001710:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8001712:	7dfb      	ldrb	r3, [r7, #23]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	b21a      	sxth	r2, r3
 8001718:	7dbb      	ldrb	r3, [r7, #22]
 800171a:	b21b      	sxth	r3, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	b21a      	sxth	r2, r3
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <TrimRead+0x134>)
 8001722:	801a      	strh	r2, [r3, #0]
	//	dig_H2 = (trimdata[26]<<8) | trimdata[25];
	//	dig_H3 = (trimdata[27]);
	//	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
	//	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
	//	dig_H6 = (trimdata[31]);
}
 8001724:	bf00      	nop
 8001726:	3720      	adds	r7, #32
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000a14 	.word	0x20000a14
 8001730:	200002a8 	.word	0x200002a8
 8001734:	200002ac 	.word	0x200002ac
 8001738:	200002ae 	.word	0x200002ae
 800173c:	200002aa 	.word	0x200002aa
 8001740:	200002b0 	.word	0x200002b0
 8001744:	200002b2 	.word	0x200002b2
 8001748:	200002b4 	.word	0x200002b4
 800174c:	200002b6 	.word	0x200002b6
 8001750:	200002b8 	.word	0x200002b8
 8001754:	200002ba 	.word	0x200002ba
 8001758:	200002bc 	.word	0x200002bc
 800175c:	200002be 	.word	0x200002be

08001760 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af04      	add	r7, sp, #16
 8001766:	4604      	mov	r4, r0
 8001768:	4608      	mov	r0, r1
 800176a:	4611      	mov	r1, r2
 800176c:	461a      	mov	r2, r3
 800176e:	4623      	mov	r3, r4
 8001770:	71fb      	strb	r3, [r7, #7]
 8001772:	4603      	mov	r3, r0
 8001774:	71bb      	strb	r3, [r7, #6]
 8001776:	460b      	mov	r3, r1
 8001778:	717b      	strb	r3, [r7, #5]
 800177a:	4613      	mov	r3, r2
 800177c:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 800177e:	f7ff ff53 	bl	8001628 <TrimRead>


	uint8_t datatowrite = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 800178a:	23b6      	movs	r3, #182	; 0xb6
 800178c:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001792:	9302      	str	r3, [sp, #8]
 8001794:	2301      	movs	r3, #1
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	f107 030f 	add.w	r3, r7, #15
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2301      	movs	r3, #1
 80017a0:	22e0      	movs	r2, #224	; 0xe0
 80017a2:	21ec      	movs	r1, #236	; 0xec
 80017a4:	4841      	ldr	r0, [pc, #260]	; (80018ac <BME280_Config+0x14c>)
 80017a6:	f003 f8c3 	bl	8004930 <HAL_I2C_Mem_Write>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <BME280_Config+0x56>
	{
		return -1;
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
 80017b4:	e075      	b.n	80018a2 <BME280_Config+0x142>
	}

	HAL_Delay (100);
 80017b6:	2064      	movs	r0, #100	; 0x64
 80017b8:	f001 fa4c 	bl	8002c54 <HAL_Delay>
		return -1;
	}
	*/ //BMP280 no sensa humedad

	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80017bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017c0:	015b      	lsls	r3, r3, #5
 80017c2:	b25a      	sxtb	r2, r3
 80017c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80017d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d8:	9302      	str	r3, [sp, #8]
 80017da:	2301      	movs	r3, #1
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	f107 030f 	add.w	r3, r7, #15
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2301      	movs	r3, #1
 80017e6:	22f5      	movs	r2, #245	; 0xf5
 80017e8:	21ec      	movs	r1, #236	; 0xec
 80017ea:	4830      	ldr	r0, [pc, #192]	; (80018ac <BME280_Config+0x14c>)
 80017ec:	f003 f8a0 	bl	8004930 <HAL_I2C_Mem_Write>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <BME280_Config+0x9c>
	{
		return -1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
 80017fa:	e052      	b.n	80018a2 <BME280_Config+0x142>
	}
	HAL_Delay (100);
 80017fc:	2064      	movs	r0, #100	; 0x64
 80017fe:	f001 fa29 	bl	8002c54 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001806:	9302      	str	r3, [sp, #8]
 8001808:	2301      	movs	r3, #1
 800180a:	9301      	str	r3, [sp, #4]
 800180c:	f107 030e 	add.w	r3, r7, #14
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2301      	movs	r3, #1
 8001814:	22f5      	movs	r2, #245	; 0xf5
 8001816:	21ec      	movs	r1, #236	; 0xec
 8001818:	4824      	ldr	r0, [pc, #144]	; (80018ac <BME280_Config+0x14c>)
 800181a:	f003 f983 	bl	8004b24 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800181e:	7bba      	ldrb	r2, [r7, #14]
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	429a      	cmp	r2, r3
 8001824:	d002      	beq.n	800182c <BME280_Config+0xcc>
	{
		return -1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	e03a      	b.n	80018a2 <BME280_Config+0x142>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	015b      	lsls	r3, r3, #5
 8001830:	b25a      	sxtb	r2, r3
 8001832:	79bb      	ldrb	r3, [r7, #6]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	b25b      	sxtb	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b25a      	sxtb	r2, r3
 800183c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001840:	4313      	orrs	r3, r2
 8001842:	b25b      	sxtb	r3, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001848:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184c:	9302      	str	r3, [sp, #8]
 800184e:	2301      	movs	r3, #1
 8001850:	9301      	str	r3, [sp, #4]
 8001852:	f107 030f 	add.w	r3, r7, #15
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2301      	movs	r3, #1
 800185a:	22f4      	movs	r2, #244	; 0xf4
 800185c:	21ec      	movs	r1, #236	; 0xec
 800185e:	4813      	ldr	r0, [pc, #76]	; (80018ac <BME280_Config+0x14c>)
 8001860:	f003 f866 	bl	8004930 <HAL_I2C_Mem_Write>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <BME280_Config+0x110>
	{
		return -1;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	e018      	b.n	80018a2 <BME280_Config+0x142>
	}
	HAL_Delay (100);
 8001870:	2064      	movs	r0, #100	; 0x64
 8001872:	f001 f9ef 	bl	8002c54 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187a:	9302      	str	r3, [sp, #8]
 800187c:	2301      	movs	r3, #1
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	f107 030e 	add.w	r3, r7, #14
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2301      	movs	r3, #1
 8001888:	22f4      	movs	r2, #244	; 0xf4
 800188a:	21ec      	movs	r1, #236	; 0xec
 800188c:	4807      	ldr	r0, [pc, #28]	; (80018ac <BME280_Config+0x14c>)
 800188e:	f003 f949 	bl	8004b24 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001892:	7bba      	ldrb	r2, [r7, #14]
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	429a      	cmp	r2, r3
 8001898:	d002      	beq.n	80018a0 <BME280_Config+0x140>
	{
		return -1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	e000      	b.n	80018a2 <BME280_Config+0x142>
	}

	return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000a14 	.word	0x20000a14

080018b0 <BMEReadRaw>:


int BMEReadRaw(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	9302      	str	r3, [sp, #8]
 80018bc:	2301      	movs	r3, #1
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <BMEReadRaw+0x8c>)
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2301      	movs	r3, #1
 80018c6:	22d0      	movs	r2, #208	; 0xd0
 80018c8:	21ec      	movs	r1, #236	; 0xec
 80018ca:	481d      	ldr	r0, [pc, #116]	; (8001940 <BMEReadRaw+0x90>)
 80018cc:	f003 f92a 	bl	8004b24 <HAL_I2C_Mem_Read>

	if (chipID == 0x58) // original es 0x60
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <BMEReadRaw+0x8c>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b58      	cmp	r3, #88	; 0x58
 80018d6:	d12a      	bne.n	800192e <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	9302      	str	r3, [sp, #8]
 80018de:	2308      	movs	r3, #8
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	463b      	mov	r3, r7
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2301      	movs	r3, #1
 80018e8:	22f7      	movs	r2, #247	; 0xf7
 80018ea:	21ec      	movs	r1, #236	; 0xec
 80018ec:	4814      	ldr	r0, [pc, #80]	; (8001940 <BMEReadRaw+0x90>)
 80018ee:	f003 f919 	bl	8004b24 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80018f2:	783b      	ldrb	r3, [r7, #0]
 80018f4:	031a      	lsls	r2, r3, #12
 80018f6:	787b      	ldrb	r3, [r7, #1]
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	4313      	orrs	r3, r2
 80018fc:	78ba      	ldrb	r2, [r7, #2]
 80018fe:	0912      	lsrs	r2, r2, #4
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	4313      	orrs	r3, r2
 8001904:	4a0f      	ldr	r2, [pc, #60]	; (8001944 <BMEReadRaw+0x94>)
 8001906:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	031a      	lsls	r2, r3, #12
 800190c:	793b      	ldrb	r3, [r7, #4]
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	4313      	orrs	r3, r2
 8001912:	797a      	ldrb	r2, [r7, #5]
 8001914:	0912      	lsrs	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	4313      	orrs	r3, r2
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <BMEReadRaw+0x98>)
 800191c:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 800191e:	79bb      	ldrb	r3, [r7, #6]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	79fa      	ldrb	r2, [r7, #7]
 8001924:	4313      	orrs	r3, r2
 8001926:	4a09      	ldr	r2, [pc, #36]	; (800194c <BMEReadRaw+0x9c>)
 8001928:	6013      	str	r3, [r2, #0]

		return 0;
 800192a:	2300      	movs	r3, #0
 800192c:	e001      	b.n	8001932 <BMEReadRaw+0x82>
	}

	else return -1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000029a 	.word	0x2000029a
 8001940:	20000a14 	.word	0x20000a14
 8001944:	200002a0 	.word	0x200002a0
 8001948:	2000029c 	.word	0x2000029c
 800194c:	200002a4 	.word	0x200002a4

08001950 <BMP280_compensate_T_int32>:

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value
//BMP280_S32_t t_fine;
BMP280_S32_t BMP280_compensate_T_int32(BMP280_S32_t adc_T)
{
 8001950:	b480      	push	{r7}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	10da      	asrs	r2, r3, #3
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <BMP280_compensate_T_int32+0x74>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	4a18      	ldr	r2, [pc, #96]	; (80019c8 <BMP280_compensate_T_int32+0x78>)
 8001966:	f9b2 2000 	ldrsh.w	r2, [r2]
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	12db      	asrs	r3, r3, #11
 8001970:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) * ((BMP280_S32_t)dig_T3)) >> 14;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	111b      	asrs	r3, r3, #4
 8001976:	4a13      	ldr	r2, [pc, #76]	; (80019c4 <BMP280_compensate_T_int32+0x74>)
 8001978:	8812      	ldrh	r2, [r2, #0]
 800197a:	1a9b      	subs	r3, r3, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	1112      	asrs	r2, r2, #4
 8001980:	4910      	ldr	r1, [pc, #64]	; (80019c4 <BMP280_compensate_T_int32+0x74>)
 8001982:	8809      	ldrh	r1, [r1, #0]
 8001984:	1a52      	subs	r2, r2, r1
 8001986:	fb02 f303 	mul.w	r3, r2, r3
 800198a:	131b      	asrs	r3, r3, #12
 800198c:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <BMP280_compensate_T_int32+0x7c>)
 800198e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	139b      	asrs	r3, r3, #14
 8001998:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4413      	add	r3, r2
 80019a0:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <BMP280_compensate_T_int32+0x80>)
 80019a2:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <BMP280_compensate_T_int32+0x80>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	3380      	adds	r3, #128	; 0x80
 80019b0:	121b      	asrs	r3, r3, #8
 80019b2:	60fb      	str	r3, [r7, #12]
	return T;
 80019b4:	68fb      	ldr	r3, [r7, #12]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	371c      	adds	r7, #28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200002a8 	.word	0x200002a8
 80019c8:	200002ac 	.word	0x200002ac
 80019cc:	200002ae 	.word	0x200002ae
 80019d0:	200002c0 	.word	0x200002c0

080019d4 <BMP280_compensate_P_int64>:
}

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
BMP280_U32_t BMP280_compensate_P_int64(BMP280_S32_t adc_P)
{
 80019d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d8:	b0ca      	sub	sp, #296	; 0x128
 80019da:	af00      	add	r7, sp, #0
 80019dc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	BMP280_S64_t var1, var2, p;
	var1 = ((BMP280_S64_t)t_fine) - 128000;
 80019e0:	4baf      	ldr	r3, [pc, #700]	; (8001ca0 <BMP280_compensate_P_int64+0x2cc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	17da      	asrs	r2, r3, #31
 80019e6:	461c      	mov	r4, r3
 80019e8:	4615      	mov	r5, r2
 80019ea:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80019ee:	f145 3bff 	adc.w	fp, r5, #4294967295
 80019f2:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
 80019f6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80019fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019fe:	fb03 f102 	mul.w	r1, r3, r2
 8001a02:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001a06:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	18ca      	adds	r2, r1, r3
 8001a10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a14:	fba3 8903 	umull	r8, r9, r3, r3
 8001a18:	eb02 0309 	add.w	r3, r2, r9
 8001a1c:	4699      	mov	r9, r3
 8001a1e:	4ba1      	ldr	r3, [pc, #644]	; (8001ca4 <BMP280_compensate_P_int64+0x2d0>)
 8001a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	17da      	asrs	r2, r3, #31
 8001a28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001a2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001a30:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001a34:	4603      	mov	r3, r0
 8001a36:	fb03 f209 	mul.w	r2, r3, r9
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	fb08 f303 	mul.w	r3, r8, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	4602      	mov	r2, r0
 8001a44:	fba8 1202 	umull	r1, r2, r8, r2
 8001a48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001a52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001a56:	4413      	add	r3, r2
 8001a58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001a5c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001a60:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001a64:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(BMP280_S64_t)dig_P5)<<17);
 8001a68:	4b8f      	ldr	r3, [pc, #572]	; (8001ca8 <BMP280_compensate_P_int64+0x2d4>)
 8001a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	17da      	asrs	r2, r3, #31
 8001a72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001a76:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001a7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a7e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001a82:	462a      	mov	r2, r5
 8001a84:	fb02 f203 	mul.w	r2, r2, r3
 8001a88:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	fb01 f303 	mul.w	r3, r1, r3
 8001a92:	441a      	add	r2, r3
 8001a94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a98:	4621      	mov	r1, r4
 8001a9a:	fba3 1301 	umull	r1, r3, r3, r1
 8001a9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001aac:	18d3      	adds	r3, r2, r3
 8001aae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ab2:	f04f 0000 	mov.w	r0, #0
 8001ab6:	f04f 0100 	mov.w	r1, #0
 8001aba:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001abe:	462b      	mov	r3, r5
 8001ac0:	0459      	lsls	r1, r3, #17
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001ac8:	4623      	mov	r3, r4
 8001aca:	0458      	lsls	r0, r3, #17
 8001acc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001ad0:	1814      	adds	r4, r2, r0
 8001ad2:	643c      	str	r4, [r7, #64]	; 0x40
 8001ad4:	414b      	adcs	r3, r1
 8001ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ad8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001adc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((BMP280_S64_t)dig_P4)<<35);
 8001ae0:	4b72      	ldr	r3, [pc, #456]	; (8001cac <BMP280_compensate_P_int64+0x2d8>)
 8001ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	17da      	asrs	r2, r3, #31
 8001aea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001aee:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001af2:	f04f 0000 	mov.w	r0, #0
 8001af6:	f04f 0100 	mov.w	r1, #0
 8001afa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001afe:	00d9      	lsls	r1, r3, #3
 8001b00:	2000      	movs	r0, #0
 8001b02:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001b06:	1814      	adds	r4, r2, r0
 8001b08:	63bc      	str	r4, [r7, #56]	; 0x38
 8001b0a:	414b      	adcs	r3, r1
 8001b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b0e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001b12:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3)>>8) + ((var1 * (BMP280_S64_t)dig_P2)<<12);
 8001b16:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001b1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b1e:	fb03 f102 	mul.w	r1, r3, r2
 8001b22:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001b26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b2a:	fb02 f303 	mul.w	r3, r2, r3
 8001b2e:	18ca      	adds	r2, r1, r3
 8001b30:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b34:	fba3 1303 	umull	r1, r3, r3, r3
 8001b38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b46:	18d3      	adds	r3, r2, r3
 8001b48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001b4c:	4b58      	ldr	r3, [pc, #352]	; (8001cb0 <BMP280_compensate_P_int64+0x2dc>)
 8001b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	17da      	asrs	r2, r3, #31
 8001b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001b5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001b5e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001b62:	462b      	mov	r3, r5
 8001b64:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001b68:	4642      	mov	r2, r8
 8001b6a:	fb02 f203 	mul.w	r2, r2, r3
 8001b6e:	464b      	mov	r3, r9
 8001b70:	4621      	mov	r1, r4
 8001b72:	fb01 f303 	mul.w	r3, r1, r3
 8001b76:	4413      	add	r3, r2
 8001b78:	4622      	mov	r2, r4
 8001b7a:	4641      	mov	r1, r8
 8001b7c:	fba2 1201 	umull	r1, r2, r2, r1
 8001b80:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001b84:	460a      	mov	r2, r1
 8001b86:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001b8a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001b8e:	4413      	add	r3, r2
 8001b90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001b94:	f04f 0000 	mov.w	r0, #0
 8001b98:	f04f 0100 	mov.w	r1, #0
 8001b9c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001ba0:	4623      	mov	r3, r4
 8001ba2:	0a18      	lsrs	r0, r3, #8
 8001ba4:	462b      	mov	r3, r5
 8001ba6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001baa:	462b      	mov	r3, r5
 8001bac:	1219      	asrs	r1, r3, #8
 8001bae:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <BMP280_compensate_P_int64+0x2e0>)
 8001bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	17da      	asrs	r2, r3, #31
 8001bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001bbc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001bc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001bc4:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001bc8:	464a      	mov	r2, r9
 8001bca:	fb02 f203 	mul.w	r2, r2, r3
 8001bce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001bd2:	4644      	mov	r4, r8
 8001bd4:	fb04 f303 	mul.w	r3, r4, r3
 8001bd8:	441a      	add	r2, r3
 8001bda:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001bde:	4644      	mov	r4, r8
 8001be0:	fba3 4304 	umull	r4, r3, r3, r4
 8001be4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001be8:	4623      	mov	r3, r4
 8001bea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001bee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001bf2:	18d3      	adds	r3, r2, r3
 8001bf4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001c04:	464c      	mov	r4, r9
 8001c06:	0323      	lsls	r3, r4, #12
 8001c08:	4644      	mov	r4, r8
 8001c0a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001c0e:	4644      	mov	r4, r8
 8001c10:	0322      	lsls	r2, r4, #12
 8001c12:	1884      	adds	r4, r0, r2
 8001c14:	633c      	str	r4, [r7, #48]	; 0x30
 8001c16:	eb41 0303 	adc.w	r3, r1, r3
 8001c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c1c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001c20:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((BMP280_S64_t)1)<<47)+var1))*((BMP280_S64_t)dig_P1)>>33;
 8001c24:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001c28:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001c2c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001c30:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001c34:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <BMP280_compensate_P_int64+0x2e4>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c44:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001c48:	462b      	mov	r3, r5
 8001c4a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001c4e:	4642      	mov	r2, r8
 8001c50:	fb02 f203 	mul.w	r2, r2, r3
 8001c54:	464b      	mov	r3, r9
 8001c56:	4621      	mov	r1, r4
 8001c58:	fb01 f303 	mul.w	r3, r1, r3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4622      	mov	r2, r4
 8001c60:	4641      	mov	r1, r8
 8001c62:	fba2 1201 	umull	r1, r2, r2, r1
 8001c66:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001c6a:	460a      	mov	r2, r1
 8001c6c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001c70:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001c74:	4413      	add	r3, r2
 8001c76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001c86:	4629      	mov	r1, r5
 8001c88:	104a      	asrs	r2, r1, #1
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	17cb      	asrs	r3, r1, #31
 8001c8e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0)
 8001c92:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001c96:	4313      	orrs	r3, r2
 8001c98:	d110      	bne.n	8001cbc <BMP280_compensate_P_int64+0x2e8>
		return 0; // avoid exception caused by division by zero
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e154      	b.n	8001f48 <BMP280_compensate_P_int64+0x574>
 8001c9e:	bf00      	nop
 8001ca0:	200002c0 	.word	0x200002c0
 8001ca4:	200002b8 	.word	0x200002b8
 8001ca8:	200002b6 	.word	0x200002b6
 8001cac:	200002b4 	.word	0x200002b4
 8001cb0:	200002b2 	.word	0x200002b2
 8001cb4:	200002b0 	.word	0x200002b0
 8001cb8:	200002aa 	.word	0x200002aa

	p = 1048576-adc_P;
 8001cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001cc0:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001cc4:	17da      	asrs	r2, r3, #31
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cca:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001cce:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001cd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001cd6:	105b      	asrs	r3, r3, #1
 8001cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001cdc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ce0:	07db      	lsls	r3, r3, #31
 8001ce2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ce6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001cea:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001cee:	4621      	mov	r1, r4
 8001cf0:	1a89      	subs	r1, r1, r2
 8001cf2:	67b9      	str	r1, [r7, #120]	; 0x78
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	eb61 0303 	sbc.w	r3, r1, r3
 8001cfa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cfc:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001d00:	4622      	mov	r2, r4
 8001d02:	462b      	mov	r3, r5
 8001d04:	1891      	adds	r1, r2, r2
 8001d06:	6239      	str	r1, [r7, #32]
 8001d08:	415b      	adcs	r3, r3
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d10:	4621      	mov	r1, r4
 8001d12:	1851      	adds	r1, r2, r1
 8001d14:	61b9      	str	r1, [r7, #24]
 8001d16:	4629      	mov	r1, r5
 8001d18:	414b      	adcs	r3, r1
 8001d1a:	61fb      	str	r3, [r7, #28]
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001d28:	4649      	mov	r1, r9
 8001d2a:	018b      	lsls	r3, r1, #6
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d32:	4641      	mov	r1, r8
 8001d34:	018a      	lsls	r2, r1, #6
 8001d36:	4641      	mov	r1, r8
 8001d38:	1889      	adds	r1, r1, r2
 8001d3a:	6139      	str	r1, [r7, #16]
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	eb43 0101 	adc.w	r1, r3, r1
 8001d42:	6179      	str	r1, [r7, #20]
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001d50:	4649      	mov	r1, r9
 8001d52:	008b      	lsls	r3, r1, #2
 8001d54:	4641      	mov	r1, r8
 8001d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d5a:	4641      	mov	r1, r8
 8001d5c:	008a      	lsls	r2, r1, #2
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	4603      	mov	r3, r0
 8001d64:	4622      	mov	r2, r4
 8001d66:	189b      	adds	r3, r3, r2
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	462a      	mov	r2, r5
 8001d6e:	eb42 0303 	adc.w	r3, r2, r3
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001d80:	4649      	mov	r1, r9
 8001d82:	008b      	lsls	r3, r1, #2
 8001d84:	4641      	mov	r1, r8
 8001d86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d8a:	4641      	mov	r1, r8
 8001d8c:	008a      	lsls	r2, r1, #2
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	4603      	mov	r3, r0
 8001d94:	4622      	mov	r2, r4
 8001d96:	189b      	adds	r3, r3, r2
 8001d98:	673b      	str	r3, [r7, #112]	; 0x70
 8001d9a:	462b      	mov	r3, r5
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	eb42 0303 	adc.w	r3, r2, r3
 8001da2:	677b      	str	r3, [r7, #116]	; 0x74
 8001da4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001da8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001dac:	f7fe ff54 	bl	8000c58 <__aeabi_ldivmod>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((BMP280_S64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001db8:	4b66      	ldr	r3, [pc, #408]	; (8001f54 <BMP280_compensate_P_int64+0x580>)
 8001dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dbe:	b21b      	sxth	r3, r3
 8001dc0:	17da      	asrs	r2, r3, #31
 8001dc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8001dc4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001dc6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001dca:	f04f 0000 	mov.w	r0, #0
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	0b50      	lsrs	r0, r2, #13
 8001dd4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dd8:	1359      	asrs	r1, r3, #13
 8001dda:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001dde:	462b      	mov	r3, r5
 8001de0:	fb00 f203 	mul.w	r2, r0, r3
 8001de4:	4623      	mov	r3, r4
 8001de6:	fb03 f301 	mul.w	r3, r3, r1
 8001dea:	4413      	add	r3, r2
 8001dec:	4622      	mov	r2, r4
 8001dee:	fba2 1200 	umull	r1, r2, r2, r0
 8001df2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001df6:	460a      	mov	r2, r1
 8001df8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001dfc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001e00:	4413      	add	r3, r2
 8001e02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001e06:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001e0a:	f04f 0000 	mov.w	r0, #0
 8001e0e:	f04f 0100 	mov.w	r1, #0
 8001e12:	0b50      	lsrs	r0, r2, #13
 8001e14:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e18:	1359      	asrs	r1, r3, #13
 8001e1a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001e1e:	462b      	mov	r3, r5
 8001e20:	fb00 f203 	mul.w	r2, r0, r3
 8001e24:	4623      	mov	r3, r4
 8001e26:	fb03 f301 	mul.w	r3, r3, r1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4622      	mov	r2, r4
 8001e2e:	fba2 1200 	umull	r1, r2, r2, r0
 8001e32:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001e36:	460a      	mov	r2, r1
 8001e38:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001e3c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001e40:	4413      	add	r3, r2
 8001e42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001e52:	4621      	mov	r1, r4
 8001e54:	0e4a      	lsrs	r2, r1, #25
 8001e56:	4629      	mov	r1, r5
 8001e58:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	164b      	asrs	r3, r1, #25
 8001e60:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((BMP280_S64_t)dig_P8) * p) >> 19;
 8001e64:	4b3c      	ldr	r3, [pc, #240]	; (8001f58 <BMP280_compensate_P_int64+0x584>)
 8001e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	17da      	asrs	r2, r3, #31
 8001e6e:	663b      	str	r3, [r7, #96]	; 0x60
 8001e70:	667a      	str	r2, [r7, #100]	; 0x64
 8001e72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e76:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001e7a:	462a      	mov	r2, r5
 8001e7c:	fb02 f203 	mul.w	r2, r2, r3
 8001e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e84:	4621      	mov	r1, r4
 8001e86:	fb01 f303 	mul.w	r3, r1, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001e90:	4621      	mov	r1, r4
 8001e92:	fba2 1201 	umull	r1, r2, r2, r1
 8001e96:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001e9a:	460a      	mov	r2, r1
 8001e9c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001ea0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	0cca      	lsrs	r2, r1, #19
 8001eba:	4629      	mov	r1, r5
 8001ebc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	14cb      	asrs	r3, r1, #19
 8001ec4:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7)<<4);
 8001ec8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001ecc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001ed0:	1884      	adds	r4, r0, r2
 8001ed2:	65bc      	str	r4, [r7, #88]	; 0x58
 8001ed4:	eb41 0303 	adc.w	r3, r1, r3
 8001ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001eda:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001ede:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	1889      	adds	r1, r1, r2
 8001ee6:	6539      	str	r1, [r7, #80]	; 0x50
 8001ee8:	4629      	mov	r1, r5
 8001eea:	eb43 0101 	adc.w	r1, r3, r1
 8001eee:	6579      	str	r1, [r7, #84]	; 0x54
 8001ef0:	f04f 0000 	mov.w	r0, #0
 8001ef4:	f04f 0100 	mov.w	r1, #0
 8001ef8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001efc:	4623      	mov	r3, r4
 8001efe:	0a18      	lsrs	r0, r3, #8
 8001f00:	462b      	mov	r3, r5
 8001f02:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001f06:	462b      	mov	r3, r5
 8001f08:	1219      	asrs	r1, r3, #8
 8001f0a:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <BMP280_compensate_P_int64+0x588>)
 8001f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f10:	b21b      	sxth	r3, r3
 8001f12:	17da      	asrs	r2, r3, #31
 8001f14:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f16:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001f24:	464c      	mov	r4, r9
 8001f26:	0123      	lsls	r3, r4, #4
 8001f28:	4644      	mov	r4, r8
 8001f2a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001f2e:	4644      	mov	r4, r8
 8001f30:	0122      	lsls	r2, r4, #4
 8001f32:	1884      	adds	r4, r0, r2
 8001f34:	603c      	str	r4, [r7, #0]
 8001f36:	eb41 0303 	adc.w	r3, r1, r3
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001f40:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110

	return (BMP280_U32_t)p;
 8001f44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f54:	200002be 	.word	0x200002be
 8001f58:	200002bc 	.word	0x200002bc
 8001f5c:	200002ba 	.word	0x200002ba

08001f60 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure(float* Temperature, float* Pressure)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
	if (BMEReadRaw() == 0)
 8001f6a:	f7ff fca1 	bl	80018b0 <BMEReadRaw>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d142      	bne.n	8001ffa <BME280_Measure+0x9a>
	{
		  if (tRaw == 0x800000) *Temperature = 0; // value in case temp measurement was disabled
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <BME280_Measure+0xac>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f7c:	d104      	bne.n	8001f88 <BME280_Measure+0x28>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e016      	b.n	8001fb6 <BME280_Measure+0x56>
		  else
		  {
			  //Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
			  *Temperature = (BMP280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001f88:	4b20      	ldr	r3, [pc, #128]	; (800200c <BME280_Measure+0xac>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fcdf 	bl	8001950 <BMP280_compensate_T_int32>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe facd 	bl	8000534 <__aeabi_i2d>
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <BME280_Measure+0xb0>)
 8001fa0:	f7fe fc5c 	bl	800085c <__aeabi_ddiv>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4610      	mov	r0, r2
 8001faa:	4619      	mov	r1, r3
 8001fac:	f7fe fe04 	bl	8000bb8 <__aeabi_d2f>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	601a      	str	r2, [r3, #0]
		  }

		  if (pRaw == 0x800000) *Pressure = 0; // value in case temp measurement was disabled
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <BME280_Measure+0xb4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fbe:	d104      	bne.n	8001fca <BME280_Measure+0x6a>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = 0;
	}
}
 8001fc8:	e01b      	b.n	8002002 <BME280_Measure+0xa2>
			  *Pressure = (BMP280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <BME280_Measure+0xb4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fd00 	bl	80019d4 <BMP280_compensate_P_int64>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fa9c 	bl	8000514 <__aeabi_ui2d>
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <BME280_Measure+0xb8>)
 8001fe2:	f7fe fc3b 	bl	800085c <__aeabi_ddiv>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7fe fde3 	bl	8000bb8 <__aeabi_d2f>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	601a      	str	r2, [r3, #0]
}
 8001ff8:	e003      	b.n	8002002 <BME280_Measure+0xa2>
		Temperature = Pressure = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	607b      	str	r3, [r7, #4]
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	2000029c 	.word	0x2000029c
 8002010:	40590000 	.word	0x40590000
 8002014:	200002a0 	.word	0x200002a0
 8002018:	40700000 	.word	0x40700000

0800201c <MQ135_NivelContaminacion>:

	GasesDetectados[0]= SCA_CO2 * pow(Rs_R0, EXP_CO2); //Concentracion CO2
}

uint32_t MQ135_NivelContaminacion(uint32_t cuentas)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	return cuentas * 100/4095;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2264      	movs	r2, #100	; 0x64
 8002028:	fb03 f202 	mul.w	r2, r3, r2
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <MQ135_NivelContaminacion+0x2c>)
 800202e:	fba3 1302 	umull	r1, r3, r3, r2
 8002032:	1ad2      	subs	r2, r2, r3
 8002034:	0852      	lsrs	r2, r2, #1
 8002036:	4413      	add	r3, r2
 8002038:	0adb      	lsrs	r3, r3, #11
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	00100101 	.word	0x00100101

0800204c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4a07      	ldr	r2, [pc, #28]	; (8002078 <vApplicationGetIdleTaskMemory+0x2c>)
 800205c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	4a06      	ldr	r2, [pc, #24]	; (800207c <vApplicationGetIdleTaskMemory+0x30>)
 8002062:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2280      	movs	r2, #128	; 0x80
 8002068:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	200002c4 	.word	0x200002c4
 800207c:	20000318 	.word	0x20000318

08002080 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4a07      	ldr	r2, [pc, #28]	; (80020ac <vApplicationGetTimerTaskMemory+0x2c>)
 8002090:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	4a06      	ldr	r2, [pc, #24]	; (80020b0 <vApplicationGetTimerTaskMemory+0x30>)
 8002096:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800209e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	20000518 	.word	0x20000518
 80020b0:	2000056c 	.word	0x2000056c

080020b4 <Task_ReadSensors>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Task_ReadSensors(void *pvParam)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//xSemaphoreTake(sem1, portMAX_DELAY);
		BME280_Measure(&MedicionesEstacion.Temperature, &MedicionesEstacion.Pressure);
 80020bc:	4907      	ldr	r1, [pc, #28]	; (80020dc <Task_ReadSensors+0x28>)
 80020be:	4808      	ldr	r0, [pc, #32]	; (80020e0 <Task_ReadSensors+0x2c>)
 80020c0:	f7ff ff4e 	bl	8001f60 <BME280_Measure>
		BH1750_ReadLight(&MedicionesEstacion.Light);
 80020c4:	4807      	ldr	r0, [pc, #28]	; (80020e4 <Task_ReadSensors+0x30>)
 80020c6:	f7ff fa55 	bl	8001574 <BH1750_ReadLight>
		MedicionesEstacion.AirQuality= MQ135_NivelContaminacion(ConversionGasADC);
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <Task_ReadSensors+0x34>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ffa4 	bl	800201c <MQ135_NivelContaminacion>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4a02      	ldr	r2, [pc, #8]	; (80020e0 <Task_ReadSensors+0x2c>)
 80020d8:	6113      	str	r3, [r2, #16]
		BME280_Measure(&MedicionesEstacion.Temperature, &MedicionesEstacion.Pressure);
 80020da:	e7ef      	b.n	80020bc <Task_ReadSensors+0x8>
 80020dc:	20000afc 	.word	0x20000afc
 80020e0:	20000af8 	.word	0x20000af8
 80020e4:	20000b04 	.word	0x20000b04
 80020e8:	20000b10 	.word	0x20000b10

080020ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020ec:	b5b0      	push	{r4, r5, r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020f2:	f000 fd6d 	bl	8002bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020f6:	f000 f867 	bl	80021c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020fa:	f000 f9c3 	bl	8002484 <MX_GPIO_Init>
  MX_DMA_Init();
 80020fe:	f000 f9a1 	bl	8002444 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002102:	f000 f975 	bl	80023f0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002106:	f000 f91b 	bl	8002340 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800210a:	f000 f947 	bl	800239c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800210e:	f000 f8c5 	bl	800229c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //Inicializacion BH1750
  BH1750_Init(&hi2c1);
 8002112:	4823      	ldr	r0, [pc, #140]	; (80021a0 <main+0xb4>)
 8002114:	f7ff f978 	bl	8001408 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE);
 8002118:	2010      	movs	r0, #16
 800211a:	f7ff f9ab 	bl	8001474 <BH1750_SetMode>

  //Inicializacion BMP280
  BME280_Config(OSRS_1, OSRS_4, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 800211e:	2304      	movs	r3, #4
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	2300      	movs	r3, #0
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	2303      	movs	r3, #3
 8002128:	2201      	movs	r2, #1
 800212a:	2103      	movs	r1, #3
 800212c:	2001      	movs	r0, #1
 800212e:	f7ff fb17 	bl	8001760 <BME280_Config>


  //Inicializacion ESP01
  ESP_Init(MY_NETWORK, MY_PASSWORD);
 8002132:	491c      	ldr	r1, [pc, #112]	; (80021a4 <main+0xb8>)
 8002134:	481c      	ldr	r0, [pc, #112]	; (80021a8 <main+0xbc>)
 8002136:	f7fe ff61 	bl	8000ffc <ESP_Init>

  //Inicializacion MQ135
  HAL_ADC_Start_DMA(&hadc1, &ConversionGasADC, 1);
 800213a:	2201      	movs	r2, #1
 800213c:	491b      	ldr	r1, [pc, #108]	; (80021ac <main+0xc0>)
 800213e:	481c      	ldr	r0, [pc, #112]	; (80021b0 <main+0xc4>)
 8002140:	f000 fdf0 	bl	8002d24 <HAL_ADC_Start_DMA>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  sem1= xSemaphoreCreateBinary();
 8002144:	2203      	movs	r2, #3
 8002146:	2100      	movs	r1, #0
 8002148:	2001      	movs	r0, #1
 800214a:	f004 ffdd 	bl	8007108 <xQueueGenericCreate>
 800214e:	4603      	mov	r3, r0
 8002150:	4a18      	ldr	r2, [pc, #96]	; (80021b4 <main+0xc8>)
 8002152:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(sem1, 0);
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <main+0xc8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f005 faa8 	bl	80076b0 <xQueueSemaphoreTake>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002160:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <main+0xcc>)
 8002162:	1d3c      	adds	r4, r7, #4
 8002164:	461d      	mov	r5, r3
 8002166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800216a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800216e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f004 fdd1 	bl	8006d1e <osThreadCreate>
 800217c:	4603      	mov	r3, r0
 800217e:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <main+0xd0>)
 8002180:	6013      	str	r3, [r2, #0]
//  xTaskCreate(Task_ReadHumidity, "ReadHumidity", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
//  xTaskCreate(Task_ReadLight, "ReadLight", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
//  xTaskCreate(Task_ReadAirQuality, "ReadAirQuality", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
//  xTaskCreate(Task_ReadWindSpeed, "ReadWindSpeed", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);

  xTaskCreate(Task_ReadSensors, "ReadSensors", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8002182:	2300      	movs	r3, #0
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	2301      	movs	r3, #1
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2300      	movs	r3, #0
 800218c:	2280      	movs	r2, #128	; 0x80
 800218e:	490c      	ldr	r1, [pc, #48]	; (80021c0 <main+0xd4>)
 8002190:	480c      	ldr	r0, [pc, #48]	; (80021c4 <main+0xd8>)
 8002192:	f005 fd7c 	bl	8007c8e <xTaskCreate>
//  xTaskCreate(Task_SendDataToThingspeak, "SendDataToThingspeak", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);

  vTaskStartScheduler();
 8002196:	f005 fee5 	bl	8007f64 <vTaskStartScheduler>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800219a:	f004 fdb9 	bl	8006d10 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800219e:	e7fe      	b.n	800219e <main+0xb2>
 80021a0:	20000a14 	.word	0x20000a14
 80021a4:	0800ca60 	.word	0x0800ca60
 80021a8:	0800ca6c 	.word	0x0800ca6c
 80021ac:	20000b10 	.word	0x20000b10
 80021b0:	2000096c 	.word	0x2000096c
 80021b4:	20000af4 	.word	0x20000af4
 80021b8:	0800ca90 	.word	0x0800ca90
 80021bc:	20000af0 	.word	0x20000af0
 80021c0:	0800ca84 	.word	0x0800ca84
 80021c4:	080020b5 	.word	0x080020b5

080021c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b094      	sub	sp, #80	; 0x50
 80021cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ce:	f107 0320 	add.w	r3, r7, #32
 80021d2:	2230      	movs	r2, #48	; 0x30
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f007 fcc8 	bl	8009b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ec:	2300      	movs	r3, #0
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	4b28      	ldr	r3, [pc, #160]	; (8002294 <SystemClock_Config+0xcc>)
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	4a27      	ldr	r2, [pc, #156]	; (8002294 <SystemClock_Config+0xcc>)
 80021f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fa:	6413      	str	r3, [r2, #64]	; 0x40
 80021fc:	4b25      	ldr	r3, [pc, #148]	; (8002294 <SystemClock_Config+0xcc>)
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002208:	2300      	movs	r3, #0
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	4b22      	ldr	r3, [pc, #136]	; (8002298 <SystemClock_Config+0xd0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002214:	4a20      	ldr	r2, [pc, #128]	; (8002298 <SystemClock_Config+0xd0>)
 8002216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <SystemClock_Config+0xd0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002228:	2301      	movs	r3, #1
 800222a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800222c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002232:	2302      	movs	r3, #2
 8002234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002236:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800223a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800223c:	2304      	movs	r3, #4
 800223e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002240:	2354      	movs	r3, #84	; 0x54
 8002242:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002244:	2302      	movs	r3, #2
 8002246:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002248:	2307      	movs	r3, #7
 800224a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800224c:	f107 0320 	add.w	r3, r7, #32
 8002250:	4618      	mov	r0, r3
 8002252:	f003 fb39 	bl	80058c8 <HAL_RCC_OscConfig>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800225c:	f000 f99a 	bl	8002594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002260:	230f      	movs	r3, #15
 8002262:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002264:	2302      	movs	r3, #2
 8002266:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800226c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002270:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002276:	f107 030c 	add.w	r3, r7, #12
 800227a:	2102      	movs	r1, #2
 800227c:	4618      	mov	r0, r3
 800227e:	f003 fd9b 	bl	8005db8 <HAL_RCC_ClockConfig>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002288:	f000 f984 	bl	8002594 <Error_Handler>
  }
}
 800228c:	bf00      	nop
 800228e:	3750      	adds	r7, #80	; 0x50
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40023800 	.word	0x40023800
 8002298:	40007000 	.word	0x40007000

0800229c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022a2:	463b      	mov	r3, r7
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022ae:	4b21      	ldr	r3, [pc, #132]	; (8002334 <MX_ADC1_Init+0x98>)
 80022b0:	4a21      	ldr	r2, [pc, #132]	; (8002338 <MX_ADC1_Init+0x9c>)
 80022b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <MX_ADC1_Init+0x98>)
 80022b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022bc:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <MX_ADC1_Init+0x98>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80022c2:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <MX_ADC1_Init+0x98>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022c8:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <MX_ADC1_Init+0x98>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <MX_ADC1_Init+0x98>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022d6:	4b17      	ldr	r3, [pc, #92]	; (8002334 <MX_ADC1_Init+0x98>)
 80022d8:	2200      	movs	r2, #0
 80022da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <MX_ADC1_Init+0x98>)
 80022de:	4a17      	ldr	r2, [pc, #92]	; (800233c <MX_ADC1_Init+0xa0>)
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022e2:	4b14      	ldr	r3, [pc, #80]	; (8002334 <MX_ADC1_Init+0x98>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <MX_ADC1_Init+0x98>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <MX_ADC1_Init+0x98>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <MX_ADC1_Init+0x98>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022fc:	480d      	ldr	r0, [pc, #52]	; (8002334 <MX_ADC1_Init+0x98>)
 80022fe:	f000 fccd 	bl	8002c9c <HAL_ADC_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002308:	f000 f944 	bl	8002594 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800230c:	2300      	movs	r3, #0
 800230e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002310:	2301      	movs	r3, #1
 8002312:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002318:	463b      	mov	r3, r7
 800231a:	4619      	mov	r1, r3
 800231c:	4805      	ldr	r0, [pc, #20]	; (8002334 <MX_ADC1_Init+0x98>)
 800231e:	f000 fe0f 	bl	8002f40 <HAL_ADC_ConfigChannel>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002328:	f000 f934 	bl	8002594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	2000096c 	.word	0x2000096c
 8002338:	40012000 	.word	0x40012000
 800233c:	0f000001 	.word	0x0f000001

08002340 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <MX_I2C1_Init+0x50>)
 8002346:	4a13      	ldr	r2, [pc, #76]	; (8002394 <MX_I2C1_Init+0x54>)
 8002348:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <MX_I2C1_Init+0x50>)
 800234c:	4a12      	ldr	r2, [pc, #72]	; (8002398 <MX_I2C1_Init+0x58>)
 800234e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <MX_I2C1_Init+0x50>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <MX_I2C1_Init+0x50>)
 8002358:	2200      	movs	r2, #0
 800235a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <MX_I2C1_Init+0x50>)
 800235e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002362:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <MX_I2C1_Init+0x50>)
 8002366:	2200      	movs	r2, #0
 8002368:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <MX_I2C1_Init+0x50>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <MX_I2C1_Init+0x50>)
 8002372:	2200      	movs	r2, #0
 8002374:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <MX_I2C1_Init+0x50>)
 8002378:	2200      	movs	r2, #0
 800237a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800237c:	4804      	ldr	r0, [pc, #16]	; (8002390 <MX_I2C1_Init+0x50>)
 800237e:	f001 fe6f 	bl	8004060 <HAL_I2C_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002388:	f000 f904 	bl	8002594 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000a14 	.word	0x20000a14
 8002394:	40005400 	.word	0x40005400
 8002398:	000186a0 	.word	0x000186a0

0800239c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <MX_USART1_UART_Init+0x4c>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <MX_USART1_UART_Init+0x50>)
 80023a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <MX_USART1_UART_Init+0x4c>)
 80023a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <MX_USART1_UART_Init+0x4c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <MX_USART1_UART_Init+0x4c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <MX_USART1_UART_Init+0x4c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <MX_USART1_UART_Init+0x4c>)
 80023c2:	220c      	movs	r2, #12
 80023c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <MX_USART1_UART_Init+0x4c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <MX_USART1_UART_Init+0x4c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_USART1_UART_Init+0x4c>)
 80023d4:	f004 f9c2 	bl	800675c <HAL_UART_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023de:	f000 f8d9 	bl	8002594 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000a68 	.word	0x20000a68
 80023ec:	40011000 	.word	0x40011000

080023f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <MX_USART2_UART_Init+0x4c>)
 80023f6:	4a12      	ldr	r2, [pc, #72]	; (8002440 <MX_USART2_UART_Init+0x50>)
 80023f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <MX_USART2_UART_Init+0x4c>)
 80023fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MX_USART2_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <MX_USART2_UART_Init+0x4c>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <MX_USART2_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <MX_USART2_UART_Init+0x4c>)
 8002416:	220c      	movs	r2, #12
 8002418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <MX_USART2_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <MX_USART2_UART_Init+0x4c>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002426:	4805      	ldr	r0, [pc, #20]	; (800243c <MX_USART2_UART_Init+0x4c>)
 8002428:	f004 f998 	bl	800675c <HAL_UART_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002432:	f000 f8af 	bl	8002594 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000aac 	.word	0x20000aac
 8002440:	40004400 	.word	0x40004400

08002444 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <MX_DMA_Init+0x3c>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <MX_DMA_Init+0x3c>)
 8002454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_DMA_Init+0x3c>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	2105      	movs	r1, #5
 800246a:	2038      	movs	r0, #56	; 0x38
 800246c:	f001 f8c0 	bl	80035f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002470:	2038      	movs	r0, #56	; 0x38
 8002472:	f001 f8d9 	bl	8003628 <HAL_NVIC_EnableIRQ>

}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800

08002484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	60da      	str	r2, [r3, #12]
 8002498:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <MX_GPIO_Init+0xd0>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a2c      	ldr	r2, [pc, #176]	; (8002554 <MX_GPIO_Init+0xd0>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <MX_GPIO_Init+0xd0>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <MX_GPIO_Init+0xd0>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a25      	ldr	r2, [pc, #148]	; (8002554 <MX_GPIO_Init+0xd0>)
 80024c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b23      	ldr	r3, [pc, #140]	; (8002554 <MX_GPIO_Init+0xd0>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <MX_GPIO_Init+0xd0>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <MX_GPIO_Init+0xd0>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <MX_GPIO_Init+0xd0>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	4b18      	ldr	r3, [pc, #96]	; (8002554 <MX_GPIO_Init+0xd0>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a17      	ldr	r2, [pc, #92]	; (8002554 <MX_GPIO_Init+0xd0>)
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <MX_GPIO_Init+0xd0>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	607b      	str	r3, [r7, #4]
 8002508:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800250a:	2200      	movs	r2, #0
 800250c:	2120      	movs	r1, #32
 800250e:	4812      	ldr	r0, [pc, #72]	; (8002558 <MX_GPIO_Init+0xd4>)
 8002510:	f001 fd8c 	bl	800402c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800251a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800251e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002524:	f107 0314 	add.w	r3, r7, #20
 8002528:	4619      	mov	r1, r3
 800252a:	480c      	ldr	r0, [pc, #48]	; (800255c <MX_GPIO_Init+0xd8>)
 800252c:	f001 fbfa 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002530:	2320      	movs	r3, #32
 8002532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002534:	2301      	movs	r3, #1
 8002536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2300      	movs	r3, #0
 800253e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	4619      	mov	r1, r3
 8002546:	4804      	ldr	r0, [pc, #16]	; (8002558 <MX_GPIO_Init+0xd4>)
 8002548:	f001 fbec 	bl	8003d24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800254c:	bf00      	nop
 800254e:	3728      	adds	r7, #40	; 0x28
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40023800 	.word	0x40023800
 8002558:	40020000 	.word	0x40020000
 800255c:	40020800 	.word	0x40020800

08002560 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002568:	2001      	movs	r0, #1
 800256a:	f004 fc24 	bl	8006db6 <osDelay>
 800256e:	e7fb      	b.n	8002568 <StartDefaultTask+0x8>

08002570 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002582:	f000 fb47 	bl	8002c14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40010000 	.word	0x40010000

08002594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002598:	b672      	cpsid	i
}
 800259a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800259c:	e7fe      	b.n	800259c <Error_Handler+0x8>
	...

080025a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <HAL_MspInit+0x54>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <HAL_MspInit+0x54>)
 80025b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b4:	6453      	str	r3, [r2, #68]	; 0x44
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <HAL_MspInit+0x54>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	603b      	str	r3, [r7, #0]
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_MspInit+0x54>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <HAL_MspInit+0x54>)
 80025cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <HAL_MspInit+0x54>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	210f      	movs	r1, #15
 80025e2:	f06f 0001 	mvn.w	r0, #1
 80025e6:	f001 f803 	bl	80035f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800

080025f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a2f      	ldr	r2, [pc, #188]	; (80026d4 <HAL_ADC_MspInit+0xdc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d157      	bne.n	80026ca <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <HAL_ADC_MspInit+0xe0>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	4a2d      	ldr	r2, [pc, #180]	; (80026d8 <HAL_ADC_MspInit+0xe0>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002628:	6453      	str	r3, [r2, #68]	; 0x44
 800262a:	4b2b      	ldr	r3, [pc, #172]	; (80026d8 <HAL_ADC_MspInit+0xe0>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b27      	ldr	r3, [pc, #156]	; (80026d8 <HAL_ADC_MspInit+0xe0>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4a26      	ldr	r2, [pc, #152]	; (80026d8 <HAL_ADC_MspInit+0xe0>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
 8002646:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <HAL_ADC_MspInit+0xe0>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002652:	2301      	movs	r3, #1
 8002654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002656:	2303      	movs	r3, #3
 8002658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	481d      	ldr	r0, [pc, #116]	; (80026dc <HAL_ADC_MspInit+0xe4>)
 8002666:	f001 fb5d 	bl	8003d24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800266a:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <HAL_ADC_MspInit+0xe8>)
 800266c:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <HAL_ADC_MspInit+0xec>)
 800266e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002670:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <HAL_ADC_MspInit+0xe8>)
 8002672:	2200      	movs	r2, #0
 8002674:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002676:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <HAL_ADC_MspInit+0xe8>)
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800267c:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <HAL_ADC_MspInit+0xe8>)
 800267e:	2200      	movs	r2, #0
 8002680:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002682:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <HAL_ADC_MspInit+0xe8>)
 8002684:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002688:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_ADC_MspInit+0xe8>)
 800268c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002690:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002692:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <HAL_ADC_MspInit+0xe8>)
 8002694:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002698:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <HAL_ADC_MspInit+0xe8>)
 800269c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026a0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <HAL_ADC_MspInit+0xe8>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026a8:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <HAL_ADC_MspInit+0xe8>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026ae:	480c      	ldr	r0, [pc, #48]	; (80026e0 <HAL_ADC_MspInit+0xe8>)
 80026b0:	f000 ffc8 	bl	8003644 <HAL_DMA_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80026ba:	f7ff ff6b 	bl	8002594 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <HAL_ADC_MspInit+0xe8>)
 80026c2:	639a      	str	r2, [r3, #56]	; 0x38
 80026c4:	4a06      	ldr	r2, [pc, #24]	; (80026e0 <HAL_ADC_MspInit+0xe8>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026ca:	bf00      	nop
 80026cc:	3728      	adds	r7, #40	; 0x28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40012000 	.word	0x40012000
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40020000 	.word	0x40020000
 80026e0:	200009b4 	.word	0x200009b4
 80026e4:	40026410 	.word	0x40026410

080026e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	; 0x28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a19      	ldr	r2, [pc, #100]	; (800276c <HAL_I2C_MspInit+0x84>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d12c      	bne.n	8002764 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	4b18      	ldr	r3, [pc, #96]	; (8002770 <HAL_I2C_MspInit+0x88>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4a17      	ldr	r2, [pc, #92]	; (8002770 <HAL_I2C_MspInit+0x88>)
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <HAL_I2C_MspInit+0x88>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002726:	f44f 7340 	mov.w	r3, #768	; 0x300
 800272a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800272c:	2312      	movs	r3, #18
 800272e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002734:	2303      	movs	r3, #3
 8002736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002738:	2304      	movs	r3, #4
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	4619      	mov	r1, r3
 8002742:	480c      	ldr	r0, [pc, #48]	; (8002774 <HAL_I2C_MspInit+0x8c>)
 8002744:	f001 faee 	bl	8003d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <HAL_I2C_MspInit+0x88>)
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	4a07      	ldr	r2, [pc, #28]	; (8002770 <HAL_I2C_MspInit+0x88>)
 8002752:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002756:	6413      	str	r3, [r2, #64]	; 0x40
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_I2C_MspInit+0x88>)
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002764:	bf00      	nop
 8002766:	3728      	adds	r7, #40	; 0x28
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40005400 	.word	0x40005400
 8002770:	40023800 	.word	0x40023800
 8002774:	40020400 	.word	0x40020400

08002778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08c      	sub	sp, #48	; 0x30
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 031c 	add.w	r3, r7, #28
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a36      	ldr	r2, [pc, #216]	; (8002870 <HAL_UART_MspInit+0xf8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d135      	bne.n	8002806 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]
 800279e:	4b35      	ldr	r3, [pc, #212]	; (8002874 <HAL_UART_MspInit+0xfc>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	4a34      	ldr	r2, [pc, #208]	; (8002874 <HAL_UART_MspInit+0xfc>)
 80027a4:	f043 0310 	orr.w	r3, r3, #16
 80027a8:	6453      	str	r3, [r2, #68]	; 0x44
 80027aa:	4b32      	ldr	r3, [pc, #200]	; (8002874 <HAL_UART_MspInit+0xfc>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	4b2e      	ldr	r3, [pc, #184]	; (8002874 <HAL_UART_MspInit+0xfc>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a2d      	ldr	r2, [pc, #180]	; (8002874 <HAL_UART_MspInit+0xfc>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b2b      	ldr	r3, [pc, #172]	; (8002874 <HAL_UART_MspInit+0xfc>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d8:	2302      	movs	r3, #2
 80027da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e0:	2303      	movs	r3, #3
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027e4:	2307      	movs	r3, #7
 80027e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	4619      	mov	r1, r3
 80027ee:	4822      	ldr	r0, [pc, #136]	; (8002878 <HAL_UART_MspInit+0x100>)
 80027f0:	f001 fa98 	bl	8003d24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2105      	movs	r1, #5
 80027f8:	2025      	movs	r0, #37	; 0x25
 80027fa:	f000 fef9 	bl	80035f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027fe:	2025      	movs	r0, #37	; 0x25
 8002800:	f000 ff12 	bl	8003628 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002804:	e030      	b.n	8002868 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1c      	ldr	r2, [pc, #112]	; (800287c <HAL_UART_MspInit+0x104>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d12b      	bne.n	8002868 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	4b17      	ldr	r3, [pc, #92]	; (8002874 <HAL_UART_MspInit+0xfc>)
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	4a16      	ldr	r2, [pc, #88]	; (8002874 <HAL_UART_MspInit+0xfc>)
 800281a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800281e:	6413      	str	r3, [r2, #64]	; 0x40
 8002820:	4b14      	ldr	r3, [pc, #80]	; (8002874 <HAL_UART_MspInit+0xfc>)
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	4b10      	ldr	r3, [pc, #64]	; (8002874 <HAL_UART_MspInit+0xfc>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <HAL_UART_MspInit+0xfc>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6313      	str	r3, [r2, #48]	; 0x30
 800283c:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <HAL_UART_MspInit+0xfc>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002848:	230c      	movs	r3, #12
 800284a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2300      	movs	r3, #0
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002858:	2307      	movs	r3, #7
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	f107 031c 	add.w	r3, r7, #28
 8002860:	4619      	mov	r1, r3
 8002862:	4805      	ldr	r0, [pc, #20]	; (8002878 <HAL_UART_MspInit+0x100>)
 8002864:	f001 fa5e 	bl	8003d24 <HAL_GPIO_Init>
}
 8002868:	bf00      	nop
 800286a:	3730      	adds	r7, #48	; 0x30
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40011000 	.word	0x40011000
 8002874:	40023800 	.word	0x40023800
 8002878:	40020000 	.word	0x40020000
 800287c:	40004400 	.word	0x40004400

08002880 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08c      	sub	sp, #48	; 0x30
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <HAL_InitTick+0xd0>)
 8002896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002898:	4a2d      	ldr	r2, [pc, #180]	; (8002950 <HAL_InitTick+0xd0>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6453      	str	r3, [r2, #68]	; 0x44
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <HAL_InitTick+0xd0>)
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028ac:	f107 020c 	add.w	r2, r7, #12
 80028b0:	f107 0310 	add.w	r3, r7, #16
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f003 fc9e 	bl	80061f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80028bc:	f003 fc88 	bl	80061d0 <HAL_RCC_GetPCLK2Freq>
 80028c0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c4:	4a23      	ldr	r2, [pc, #140]	; (8002954 <HAL_InitTick+0xd4>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0c9b      	lsrs	r3, r3, #18
 80028cc:	3b01      	subs	r3, #1
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <HAL_InitTick+0xd8>)
 80028d2:	4a22      	ldr	r2, [pc, #136]	; (800295c <HAL_InitTick+0xdc>)
 80028d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80028d6:	4b20      	ldr	r3, [pc, #128]	; (8002958 <HAL_InitTick+0xd8>)
 80028d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80028de:	4a1e      	ldr	r2, [pc, #120]	; (8002958 <HAL_InitTick+0xd8>)
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80028e4:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <HAL_InitTick+0xd8>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ea:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <HAL_InitTick+0xd8>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <HAL_InitTick+0xd8>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80028f6:	4818      	ldr	r0, [pc, #96]	; (8002958 <HAL_InitTick+0xd8>)
 80028f8:	f003 fcb0 	bl	800625c <HAL_TIM_Base_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002902:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002906:	2b00      	cmp	r3, #0
 8002908:	d11b      	bne.n	8002942 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800290a:	4813      	ldr	r0, [pc, #76]	; (8002958 <HAL_InitTick+0xd8>)
 800290c:	f003 fd00 	bl	8006310 <HAL_TIM_Base_Start_IT>
 8002910:	4603      	mov	r3, r0
 8002912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800291a:	2b00      	cmp	r3, #0
 800291c:	d111      	bne.n	8002942 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800291e:	2019      	movs	r0, #25
 8002920:	f000 fe82 	bl	8003628 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b0f      	cmp	r3, #15
 8002928:	d808      	bhi.n	800293c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800292a:	2200      	movs	r2, #0
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	2019      	movs	r0, #25
 8002930:	f000 fe5e 	bl	80035f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002934:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <HAL_InitTick+0xe0>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e002      	b.n	8002942 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002942:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002946:	4618      	mov	r0, r3
 8002948:	3730      	adds	r7, #48	; 0x30
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	431bde83 	.word	0x431bde83
 8002958:	20000b14 	.word	0x20000b14
 800295c:	40010000 	.word	0x40010000
 8002960:	20000004 	.word	0x20000004

08002964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002968:	e7fe      	b.n	8002968 <NMI_Handler+0x4>

0800296a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800296e:	e7fe      	b.n	800296e <HardFault_Handler+0x4>

08002970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002974:	e7fe      	b.n	8002974 <MemManage_Handler+0x4>

08002976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800297a:	e7fe      	b.n	800297a <BusFault_Handler+0x4>

0800297c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <UsageFault_Handler+0x4>

08002982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002996:	f003 fd1d 	bl	80063d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000b14 	.word	0x20000b14

080029a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (&huart1);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <USART1_IRQHandler+0x10>)
 80029aa:	f7fe fcd3 	bl	8001354 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000a68 	.word	0x20000a68

080029b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <DMA2_Stream0_IRQHandler+0x10>)
 80029be:	f000 ff47 	bl	8003850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200009b4 	.word	0x200009b4

080029cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return 1;
 80029d0:	2301      	movs	r3, #1
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <_kill>:

int _kill(int pid, int sig)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029e6:	f007 f889 	bl	8009afc <__errno>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2216      	movs	r2, #22
 80029ee:	601a      	str	r2, [r3, #0]
  return -1;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_exit>:

void _exit (int status)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a04:	f04f 31ff 	mov.w	r1, #4294967295
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ffe7 	bl	80029dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a0e:	e7fe      	b.n	8002a0e <_exit+0x12>

08002a10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	e00a      	b.n	8002a38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a22:	f3af 8000 	nop.w
 8002a26:	4601      	mov	r1, r0
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	60ba      	str	r2, [r7, #8]
 8002a2e:	b2ca      	uxtb	r2, r1
 8002a30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	3301      	adds	r3, #1
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	dbf0      	blt.n	8002a22 <_read+0x12>
  }

  return len;
 8002a40:	687b      	ldr	r3, [r7, #4]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b086      	sub	sp, #24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	e009      	b.n	8002a70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	60ba      	str	r2, [r7, #8]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	dbf1      	blt.n	8002a5c <_write+0x12>
  }
  return len;
 8002a78:	687b      	ldr	r3, [r7, #4]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <_close>:

int _close(int file)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aaa:	605a      	str	r2, [r3, #4]
  return 0;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <_isatty>:

int _isatty(int file)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ac2:	2301      	movs	r3, #1
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af4:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <_sbrk+0x5c>)
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <_sbrk+0x60>)
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <_sbrk+0x64>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <_sbrk+0x64>)
 8002b0a:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <_sbrk+0x68>)
 8002b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <_sbrk+0x64>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d207      	bcs.n	8002b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b1c:	f006 ffee 	bl	8009afc <__errno>
 8002b20:	4603      	mov	r3, r0
 8002b22:	220c      	movs	r2, #12
 8002b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b26:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2a:	e009      	b.n	8002b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b2c:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <_sbrk+0x64>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b32:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <_sbrk+0x64>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <_sbrk+0x64>)
 8002b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20018000 	.word	0x20018000
 8002b4c:	00000400 	.word	0x00000400
 8002b50:	20000b5c 	.word	0x20000b5c
 8002b54:	20004a08 	.word	0x20004a08

08002b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <SystemInit+0x20>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	4a05      	ldr	r2, [pc, #20]	; (8002b78 <SystemInit+0x20>)
 8002b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b80:	480d      	ldr	r0, [pc, #52]	; (8002bb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b82:	490e      	ldr	r1, [pc, #56]	; (8002bbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b84:	4a0e      	ldr	r2, [pc, #56]	; (8002bc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b88:	e002      	b.n	8002b90 <LoopCopyDataInit>

08002b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b8e:	3304      	adds	r3, #4

08002b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b94:	d3f9      	bcc.n	8002b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b96:	4a0b      	ldr	r2, [pc, #44]	; (8002bc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b98:	4c0b      	ldr	r4, [pc, #44]	; (8002bc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b9c:	e001      	b.n	8002ba2 <LoopFillZerobss>

08002b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba0:	3204      	adds	r2, #4

08002ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba4:	d3fb      	bcc.n	8002b9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ba6:	f7ff ffd7 	bl	8002b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002baa:	f006 ffad 	bl	8009b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bae:	f7ff fa9d 	bl	80020ec <main>
  bx  lr    
 8002bb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bb4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bbc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002bc0:	0800cecc 	.word	0x0800cecc
  ldr r2, =_sbss
 8002bc4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002bc8:	20004a04 	.word	0x20004a04

08002bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bcc:	e7fe      	b.n	8002bcc <ADC_IRQHandler>
	...

08002bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <HAL_Init+0x40>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a0d      	ldr	r2, [pc, #52]	; (8002c10 <HAL_Init+0x40>)
 8002bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_Init+0x40>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <HAL_Init+0x40>)
 8002be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bec:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <HAL_Init+0x40>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a07      	ldr	r2, [pc, #28]	; (8002c10 <HAL_Init+0x40>)
 8002bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf8:	2003      	movs	r0, #3
 8002bfa:	f000 fcee 	bl	80035da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bfe:	200f      	movs	r0, #15
 8002c00:	f7ff fe3e 	bl	8002880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c04:	f7ff fccc 	bl	80025a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023c00 	.word	0x40023c00

08002c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_IncTick+0x20>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_IncTick+0x24>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <HAL_IncTick+0x24>)
 8002c26:	6013      	str	r3, [r2, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20000008 	.word	0x20000008
 8002c38:	20000b60 	.word	0x20000b60

08002c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_GetTick+0x14>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000b60 	.word	0x20000b60

08002c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7ff ffee 	bl	8002c3c <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d005      	beq.n	8002c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_Delay+0x44>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4413      	add	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c7a:	bf00      	nop
 8002c7c:	f7ff ffde 	bl	8002c3c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d8f7      	bhi.n	8002c7c <HAL_Delay+0x28>
  {
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000008 	.word	0x20000008

08002c9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e033      	b.n	8002d1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d109      	bne.n	8002cce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fc9c 	bl	80025f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d118      	bne.n	8002d0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ce2:	f023 0302 	bic.w	r3, r3, #2
 8002ce6:	f043 0202 	orr.w	r2, r3, #2
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fa48 	bl	8003184 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f023 0303 	bic.w	r3, r3, #3
 8002d02:	f043 0201 	orr.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
 8002d0a:	e001      	b.n	8002d10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_ADC_Start_DMA+0x1e>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e0ce      	b.n	8002ee0 <HAL_ADC_Start_DMA+0x1bc>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d018      	beq.n	8002d8a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d68:	4b5f      	ldr	r3, [pc, #380]	; (8002ee8 <HAL_ADC_Start_DMA+0x1c4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a5f      	ldr	r2, [pc, #380]	; (8002eec <HAL_ADC_Start_DMA+0x1c8>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	0c9a      	lsrs	r2, r3, #18
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002d7c:	e002      	b.n	8002d84 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f9      	bne.n	8002d7e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d98:	d107      	bne.n	8002daa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002da8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	f040 8086 	bne.w	8002ec6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d007      	beq.n	8002dec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002de4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df8:	d106      	bne.n	8002e08 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	f023 0206 	bic.w	r2, r3, #6
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
 8002e06:	e002      	b.n	8002e0e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e16:	4b36      	ldr	r3, [pc, #216]	; (8002ef0 <HAL_ADC_Start_DMA+0x1cc>)
 8002e18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1e:	4a35      	ldr	r2, [pc, #212]	; (8002ef4 <HAL_ADC_Start_DMA+0x1d0>)
 8002e20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	4a34      	ldr	r2, [pc, #208]	; (8002ef8 <HAL_ADC_Start_DMA+0x1d4>)
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	4a33      	ldr	r2, [pc, #204]	; (8002efc <HAL_ADC_Start_DMA+0x1d8>)
 8002e30:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002e4a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e5a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	334c      	adds	r3, #76	; 0x4c
 8002e66:	4619      	mov	r1, r3
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f000 fc98 	bl	80037a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10f      	bne.n	8002e9c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d129      	bne.n	8002ede <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e98:	609a      	str	r2, [r3, #8]
 8002e9a:	e020      	b.n	8002ede <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a17      	ldr	r2, [pc, #92]	; (8002f00 <HAL_ADC_Start_DMA+0x1dc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d11b      	bne.n	8002ede <HAL_ADC_Start_DMA+0x1ba>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d114      	bne.n	8002ede <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	e00b      	b.n	8002ede <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f043 0210 	orr.w	r2, r3, #16
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	f043 0201 	orr.w	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000000 	.word	0x20000000
 8002eec:	431bde83 	.word	0x431bde83
 8002ef0:	40012300 	.word	0x40012300
 8002ef4:	0800337d 	.word	0x0800337d
 8002ef8:	08003437 	.word	0x08003437
 8002efc:	08003453 	.word	0x08003453
 8002f00:	40012000 	.word	0x40012000

08002f04 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x1c>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e105      	b.n	8003168 <HAL_ADC_ConfigChannel+0x228>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b09      	cmp	r3, #9
 8002f6a:	d925      	bls.n	8002fb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68d9      	ldr	r1, [r3, #12]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	3b1e      	subs	r3, #30
 8002f82:	2207      	movs	r2, #7
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43da      	mvns	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	400a      	ands	r2, r1
 8002f90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68d9      	ldr	r1, [r3, #12]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4403      	add	r3, r0
 8002faa:	3b1e      	subs	r3, #30
 8002fac:	409a      	lsls	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	e022      	b.n	8002ffe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6919      	ldr	r1, [r3, #16]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	2207      	movs	r2, #7
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	400a      	ands	r2, r1
 8002fda:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6919      	ldr	r1, [r3, #16]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4618      	mov	r0, r3
 8002fee:	4603      	mov	r3, r0
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4403      	add	r3, r0
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b06      	cmp	r3, #6
 8003004:	d824      	bhi.n	8003050 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	3b05      	subs	r3, #5
 8003018:	221f      	movs	r2, #31
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	400a      	ands	r2, r1
 8003026:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	4618      	mov	r0, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	3b05      	subs	r3, #5
 8003042:	fa00 f203 	lsl.w	r2, r0, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	635a      	str	r2, [r3, #52]	; 0x34
 800304e:	e04c      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b0c      	cmp	r3, #12
 8003056:	d824      	bhi.n	80030a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	3b23      	subs	r3, #35	; 0x23
 800306a:	221f      	movs	r2, #31
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43da      	mvns	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	400a      	ands	r2, r1
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	b29b      	uxth	r3, r3
 8003086:	4618      	mov	r0, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	3b23      	subs	r3, #35	; 0x23
 8003094:	fa00 f203 	lsl.w	r2, r0, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
 80030a0:	e023      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	3b41      	subs	r3, #65	; 0x41
 80030b4:	221f      	movs	r2, #31
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43da      	mvns	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	400a      	ands	r2, r1
 80030c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4618      	mov	r0, r3
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	3b41      	subs	r3, #65	; 0x41
 80030de:	fa00 f203 	lsl.w	r2, r0, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030ea:	4b22      	ldr	r3, [pc, #136]	; (8003174 <HAL_ADC_ConfigChannel+0x234>)
 80030ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a21      	ldr	r2, [pc, #132]	; (8003178 <HAL_ADC_ConfigChannel+0x238>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d109      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1cc>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b12      	cmp	r3, #18
 80030fe:	d105      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a19      	ldr	r2, [pc, #100]	; (8003178 <HAL_ADC_ConfigChannel+0x238>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d123      	bne.n	800315e <HAL_ADC_ConfigChannel+0x21e>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b10      	cmp	r3, #16
 800311c:	d003      	beq.n	8003126 <HAL_ADC_ConfigChannel+0x1e6>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b11      	cmp	r3, #17
 8003124:	d11b      	bne.n	800315e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b10      	cmp	r3, #16
 8003138:	d111      	bne.n	800315e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <HAL_ADC_ConfigChannel+0x23c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a10      	ldr	r2, [pc, #64]	; (8003180 <HAL_ADC_ConfigChannel+0x240>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	0c9a      	lsrs	r2, r3, #18
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003150:	e002      	b.n	8003158 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	3b01      	subs	r3, #1
 8003156:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f9      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	40012300 	.word	0x40012300
 8003178:	40012000 	.word	0x40012000
 800317c:	20000000 	.word	0x20000000
 8003180:	431bde83 	.word	0x431bde83

08003184 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800318c:	4b79      	ldr	r3, [pc, #484]	; (8003374 <ADC_Init+0x1f0>)
 800318e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	431a      	orrs	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	021a      	lsls	r2, r3, #8
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6899      	ldr	r1, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	4a58      	ldr	r2, [pc, #352]	; (8003378 <ADC_Init+0x1f4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d022      	beq.n	8003262 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800322a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6899      	ldr	r1, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800324c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6899      	ldr	r1, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	e00f      	b.n	8003282 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003270:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003280:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0202 	bic.w	r2, r2, #2
 8003290:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6899      	ldr	r1, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7e1b      	ldrb	r3, [r3, #24]
 800329c:	005a      	lsls	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01b      	beq.n	80032e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6859      	ldr	r1, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	3b01      	subs	r3, #1
 80032dc:	035a      	lsls	r2, r3, #13
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	e007      	b.n	80032f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	3b01      	subs	r3, #1
 8003314:	051a      	lsls	r2, r3, #20
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800332c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6899      	ldr	r1, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800333a:	025a      	lsls	r2, r3, #9
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003352:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6899      	ldr	r1, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	029a      	lsls	r2, r3, #10
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	609a      	str	r2, [r3, #8]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40012300 	.word	0x40012300
 8003378:	0f000001 	.word	0x0f000001

0800337c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003392:	2b00      	cmp	r3, #0
 8003394:	d13c      	bne.n	8003410 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d12b      	bne.n	8003408 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d127      	bne.n	8003408 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d119      	bne.n	8003408 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0220 	bic.w	r2, r2, #32
 80033e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d105      	bne.n	8003408 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	f043 0201 	orr.w	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f7ff fd7b 	bl	8002f04 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800340e:	e00e      	b.n	800342e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff fd85 	bl	8002f2c <HAL_ADC_ErrorCallback>
}
 8003422:	e004      	b.n	800342e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
}
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7ff fd67 	bl	8002f18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800344a:	bf00      	nop
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2240      	movs	r2, #64	; 0x40
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	f043 0204 	orr.w	r2, r3, #4
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f7ff fd5a 	bl	8002f2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003490:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800349c:	4013      	ands	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b2:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <__NVIC_SetPriorityGrouping+0x44>)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	60d3      	str	r3, [r2, #12]
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	e000ed00 	.word	0xe000ed00

080034c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034cc:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <__NVIC_GetPriorityGrouping+0x18>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	0a1b      	lsrs	r3, r3, #8
 80034d2:	f003 0307 	and.w	r3, r3, #7
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	db0b      	blt.n	800350e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	f003 021f 	and.w	r2, r3, #31
 80034fc:	4907      	ldr	r1, [pc, #28]	; (800351c <__NVIC_EnableIRQ+0x38>)
 80034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	2001      	movs	r0, #1
 8003506:	fa00 f202 	lsl.w	r2, r0, r2
 800350a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	e000e100 	.word	0xe000e100

08003520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	6039      	str	r1, [r7, #0]
 800352a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003530:	2b00      	cmp	r3, #0
 8003532:	db0a      	blt.n	800354a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	b2da      	uxtb	r2, r3
 8003538:	490c      	ldr	r1, [pc, #48]	; (800356c <__NVIC_SetPriority+0x4c>)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	0112      	lsls	r2, r2, #4
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	440b      	add	r3, r1
 8003544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003548:	e00a      	b.n	8003560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	b2da      	uxtb	r2, r3
 800354e:	4908      	ldr	r1, [pc, #32]	; (8003570 <__NVIC_SetPriority+0x50>)
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	3b04      	subs	r3, #4
 8003558:	0112      	lsls	r2, r2, #4
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	440b      	add	r3, r1
 800355e:	761a      	strb	r2, [r3, #24]
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000e100 	.word	0xe000e100
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003574:	b480      	push	{r7}
 8003576:	b089      	sub	sp, #36	; 0x24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f1c3 0307 	rsb	r3, r3, #7
 800358e:	2b04      	cmp	r3, #4
 8003590:	bf28      	it	cs
 8003592:	2304      	movcs	r3, #4
 8003594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	3304      	adds	r3, #4
 800359a:	2b06      	cmp	r3, #6
 800359c:	d902      	bls.n	80035a4 <NVIC_EncodePriority+0x30>
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	3b03      	subs	r3, #3
 80035a2:	e000      	b.n	80035a6 <NVIC_EncodePriority+0x32>
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43da      	mvns	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	401a      	ands	r2, r3
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035bc:	f04f 31ff 	mov.w	r1, #4294967295
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	fa01 f303 	lsl.w	r3, r1, r3
 80035c6:	43d9      	mvns	r1, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035cc:	4313      	orrs	r3, r2
         );
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3724      	adds	r7, #36	; 0x24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff ff4c 	bl	8003480 <__NVIC_SetPriorityGrouping>
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003602:	f7ff ff61 	bl	80034c8 <__NVIC_GetPriorityGrouping>
 8003606:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	6978      	ldr	r0, [r7, #20]
 800360e:	f7ff ffb1 	bl	8003574 <NVIC_EncodePriority>
 8003612:	4602      	mov	r2, r0
 8003614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff ff80 	bl	8003520 <__NVIC_SetPriority>
}
 8003620:	bf00      	nop
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff ff54 	bl	80034e4 <__NVIC_EnableIRQ>
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003650:	f7ff faf4 	bl	8002c3c <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e099      	b.n	8003794 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003680:	e00f      	b.n	80036a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003682:	f7ff fadb 	bl	8002c3c <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b05      	cmp	r3, #5
 800368e:	d908      	bls.n	80036a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2203      	movs	r2, #3
 800369a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e078      	b.n	8003794 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e8      	bne.n	8003682 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4b38      	ldr	r3, [pc, #224]	; (800379c <HAL_DMA_Init+0x158>)
 80036bc:	4013      	ands	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d107      	bne.n	800370c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	4313      	orrs	r3, r2
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f023 0307 	bic.w	r3, r3, #7
 8003722:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	2b04      	cmp	r3, #4
 8003734:	d117      	bne.n	8003766 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00e      	beq.n	8003766 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 fa6f 	bl	8003c2c <DMA_CheckFifoParam>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2240      	movs	r2, #64	; 0x40
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003762:	2301      	movs	r3, #1
 8003764:	e016      	b.n	8003794 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fa26 	bl	8003bc0 <DMA_CalcBaseAndBitshift>
 8003774:	4603      	mov	r3, r0
 8003776:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	223f      	movs	r2, #63	; 0x3f
 800377e:	409a      	lsls	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	f010803f 	.word	0xf010803f

080037a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_DMA_Start_IT+0x26>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e040      	b.n	8003848 <HAL_DMA_Start_IT+0xa8>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d12f      	bne.n	800383a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	68b9      	ldr	r1, [r7, #8]
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f9b8 	bl	8003b64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	223f      	movs	r2, #63	; 0x3f
 80037fa:	409a      	lsls	r2, r3
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0216 	orr.w	r2, r2, #22
 800380e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d007      	beq.n	8003828 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0208 	orr.w	r2, r2, #8
 8003826:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e005      	b.n	8003846 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003842:	2302      	movs	r3, #2
 8003844:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003846:	7dfb      	ldrb	r3, [r7, #23]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800385c:	4b8e      	ldr	r3, [pc, #568]	; (8003a98 <HAL_DMA_IRQHandler+0x248>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a8e      	ldr	r2, [pc, #568]	; (8003a9c <HAL_DMA_IRQHandler+0x24c>)
 8003862:	fba2 2303 	umull	r2, r3, r2, r3
 8003866:	0a9b      	lsrs	r3, r3, #10
 8003868:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387a:	2208      	movs	r2, #8
 800387c:	409a      	lsls	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4013      	ands	r3, r2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d01a      	beq.n	80038bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d013      	beq.n	80038bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0204 	bic.w	r2, r2, #4
 80038a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	2208      	movs	r2, #8
 80038aa:	409a      	lsls	r2, r3
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b4:	f043 0201 	orr.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c0:	2201      	movs	r2, #1
 80038c2:	409a      	lsls	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d012      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	2201      	movs	r2, #1
 80038e0:	409a      	lsls	r2, r3
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	f043 0202 	orr.w	r2, r3, #2
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	2204      	movs	r2, #4
 80038f8:	409a      	lsls	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d012      	beq.n	8003928 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00b      	beq.n	8003928 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	2204      	movs	r2, #4
 8003916:	409a      	lsls	r2, r3
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	f043 0204 	orr.w	r2, r3, #4
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	2210      	movs	r2, #16
 800392e:	409a      	lsls	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d043      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d03c      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394a:	2210      	movs	r2, #16
 800394c:	409a      	lsls	r2, r3
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d018      	beq.n	8003992 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d108      	bne.n	8003980 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d024      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4798      	blx	r3
 800397e:	e01f      	b.n	80039c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01b      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	4798      	blx	r3
 8003990:	e016      	b.n	80039c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399c:	2b00      	cmp	r3, #0
 800399e:	d107      	bne.n	80039b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0208 	bic.w	r2, r2, #8
 80039ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c4:	2220      	movs	r2, #32
 80039c6:	409a      	lsls	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 808f 	beq.w	8003af0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8087 	beq.w	8003af0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	2220      	movs	r2, #32
 80039e8:	409a      	lsls	r2, r3
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b05      	cmp	r3, #5
 80039f8:	d136      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0216 	bic.w	r2, r2, #22
 8003a08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695a      	ldr	r2, [r3, #20]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <HAL_DMA_IRQHandler+0x1da>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d007      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0208 	bic.w	r2, r2, #8
 8003a38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	223f      	movs	r2, #63	; 0x3f
 8003a40:	409a      	lsls	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d07e      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	4798      	blx	r3
        }
        return;
 8003a66:	e079      	b.n	8003b5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d01d      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10d      	bne.n	8003aa0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d031      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
 8003a94:	e02c      	b.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
 8003a96:	bf00      	nop
 8003a98:	20000000 	.word	0x20000000
 8003a9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d023      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
 8003ab0:	e01e      	b.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10f      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0210 	bic.w	r2, r2, #16
 8003ace:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d032      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d022      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2205      	movs	r2, #5
 8003b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d307      	bcc.n	8003b38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f2      	bne.n	8003b1c <HAL_DMA_IRQHandler+0x2cc>
 8003b36:	e000      	b.n	8003b3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
 8003b5a:	e000      	b.n	8003b5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b5c:	bf00      	nop
    }
  }
}
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d108      	bne.n	8003ba4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ba2:	e007      	b.n	8003bb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	60da      	str	r2, [r3, #12]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	3b10      	subs	r3, #16
 8003bd0:	4a14      	ldr	r2, [pc, #80]	; (8003c24 <DMA_CalcBaseAndBitshift+0x64>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bda:	4a13      	ldr	r2, [pc, #76]	; (8003c28 <DMA_CalcBaseAndBitshift+0x68>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d909      	bls.n	8003c02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bf6:	f023 0303 	bic.w	r3, r3, #3
 8003bfa:	1d1a      	adds	r2, r3, #4
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	659a      	str	r2, [r3, #88]	; 0x58
 8003c00:	e007      	b.n	8003c12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c0a:	f023 0303 	bic.w	r3, r3, #3
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	aaaaaaab 	.word	0xaaaaaaab
 8003c28:	0800cadc 	.word	0x0800cadc

08003c2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d11f      	bne.n	8003c86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d856      	bhi.n	8003cfa <DMA_CheckFifoParam+0xce>
 8003c4c:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <DMA_CheckFifoParam+0x28>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003c65 	.word	0x08003c65
 8003c58:	08003c77 	.word	0x08003c77
 8003c5c:	08003c65 	.word	0x08003c65
 8003c60:	08003cfb 	.word	0x08003cfb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d046      	beq.n	8003cfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c74:	e043      	b.n	8003cfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c7e:	d140      	bne.n	8003d02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c84:	e03d      	b.n	8003d02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8e:	d121      	bne.n	8003cd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d837      	bhi.n	8003d06 <DMA_CheckFifoParam+0xda>
 8003c96:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <DMA_CheckFifoParam+0x70>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003cad 	.word	0x08003cad
 8003ca0:	08003cb3 	.word	0x08003cb3
 8003ca4:	08003cad 	.word	0x08003cad
 8003ca8:	08003cc5 	.word	0x08003cc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb0:	e030      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d025      	beq.n	8003d0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc2:	e022      	b.n	8003d0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ccc:	d11f      	bne.n	8003d0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cd2:	e01c      	b.n	8003d0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d903      	bls.n	8003ce2 <DMA_CheckFifoParam+0xb6>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d003      	beq.n	8003ce8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ce0:	e018      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce6:	e015      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00e      	beq.n	8003d12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf8:	e00b      	b.n	8003d12 <DMA_CheckFifoParam+0xe6>
      break;
 8003cfa:	bf00      	nop
 8003cfc:	e00a      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e008      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d02:	bf00      	nop
 8003d04:	e006      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d06:	bf00      	nop
 8003d08:	e004      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e002      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d0e:	bf00      	nop
 8003d10:	e000      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d12:	bf00      	nop
    }
  } 
  
  return status; 
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop

08003d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b089      	sub	sp, #36	; 0x24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	e159      	b.n	8003ff4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d40:	2201      	movs	r2, #1
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4013      	ands	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	f040 8148 	bne.w	8003fee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d005      	beq.n	8003d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d130      	bne.n	8003dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	2203      	movs	r2, #3
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dac:	2201      	movs	r2, #1
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 0201 	and.w	r2, r3, #1
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d017      	beq.n	8003e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	2203      	movs	r2, #3
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d123      	bne.n	8003e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	08da      	lsrs	r2, r3, #3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3208      	adds	r2, #8
 8003e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	220f      	movs	r2, #15
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	08da      	lsrs	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3208      	adds	r2, #8
 8003e62:	69b9      	ldr	r1, [r7, #24]
 8003e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	2203      	movs	r2, #3
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 0203 	and.w	r2, r3, #3
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80a2 	beq.w	8003fee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	4b57      	ldr	r3, [pc, #348]	; (800400c <HAL_GPIO_Init+0x2e8>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	4a56      	ldr	r2, [pc, #344]	; (800400c <HAL_GPIO_Init+0x2e8>)
 8003eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eba:	4b54      	ldr	r3, [pc, #336]	; (800400c <HAL_GPIO_Init+0x2e8>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ec6:	4a52      	ldr	r2, [pc, #328]	; (8004010 <HAL_GPIO_Init+0x2ec>)
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	089b      	lsrs	r3, r3, #2
 8003ecc:	3302      	adds	r3, #2
 8003ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	220f      	movs	r2, #15
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a49      	ldr	r2, [pc, #292]	; (8004014 <HAL_GPIO_Init+0x2f0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d019      	beq.n	8003f26 <HAL_GPIO_Init+0x202>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a48      	ldr	r2, [pc, #288]	; (8004018 <HAL_GPIO_Init+0x2f4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_GPIO_Init+0x1fe>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a47      	ldr	r2, [pc, #284]	; (800401c <HAL_GPIO_Init+0x2f8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00d      	beq.n	8003f1e <HAL_GPIO_Init+0x1fa>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a46      	ldr	r2, [pc, #280]	; (8004020 <HAL_GPIO_Init+0x2fc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d007      	beq.n	8003f1a <HAL_GPIO_Init+0x1f6>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a45      	ldr	r2, [pc, #276]	; (8004024 <HAL_GPIO_Init+0x300>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <HAL_GPIO_Init+0x1f2>
 8003f12:	2304      	movs	r3, #4
 8003f14:	e008      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f16:	2307      	movs	r3, #7
 8003f18:	e006      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e004      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e002      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f26:	2300      	movs	r3, #0
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	f002 0203 	and.w	r2, r2, #3
 8003f2e:	0092      	lsls	r2, r2, #2
 8003f30:	4093      	lsls	r3, r2
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f38:	4935      	ldr	r1, [pc, #212]	; (8004010 <HAL_GPIO_Init+0x2ec>)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	089b      	lsrs	r3, r3, #2
 8003f3e:	3302      	adds	r3, #2
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f46:	4b38      	ldr	r3, [pc, #224]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f6a:	4a2f      	ldr	r2, [pc, #188]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f70:	4b2d      	ldr	r3, [pc, #180]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f94:	4a24      	ldr	r2, [pc, #144]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f9a:	4b23      	ldr	r3, [pc, #140]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fbe:	4a1a      	ldr	r2, [pc, #104]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fc4:	4b18      	ldr	r3, [pc, #96]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fe8:	4a0f      	ldr	r2, [pc, #60]	; (8004028 <HAL_GPIO_Init+0x304>)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2b0f      	cmp	r3, #15
 8003ff8:	f67f aea2 	bls.w	8003d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	3724      	adds	r7, #36	; 0x24
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800
 8004010:	40013800 	.word	0x40013800
 8004014:	40020000 	.word	0x40020000
 8004018:	40020400 	.word	0x40020400
 800401c:	40020800 	.word	0x40020800
 8004020:	40020c00 	.word	0x40020c00
 8004024:	40021000 	.word	0x40021000
 8004028:	40013c00 	.word	0x40013c00

0800402c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	807b      	strh	r3, [r7, #2]
 8004038:	4613      	mov	r3, r2
 800403a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800403c:	787b      	ldrb	r3, [r7, #1]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004042:	887a      	ldrh	r2, [r7, #2]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004048:	e003      	b.n	8004052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800404a:	887b      	ldrh	r3, [r7, #2]
 800404c:	041a      	lsls	r2, r3, #16
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	619a      	str	r2, [r3, #24]
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e12b      	b.n	80042ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fe fb2e 	bl	80026e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2224      	movs	r2, #36	; 0x24
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040c4:	f002 f870 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 80040c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	4a81      	ldr	r2, [pc, #516]	; (80042d4 <HAL_I2C_Init+0x274>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d807      	bhi.n	80040e4 <HAL_I2C_Init+0x84>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4a80      	ldr	r2, [pc, #512]	; (80042d8 <HAL_I2C_Init+0x278>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	bf94      	ite	ls
 80040dc:	2301      	movls	r3, #1
 80040de:	2300      	movhi	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e006      	b.n	80040f2 <HAL_I2C_Init+0x92>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4a7d      	ldr	r2, [pc, #500]	; (80042dc <HAL_I2C_Init+0x27c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	bf94      	ite	ls
 80040ec:	2301      	movls	r3, #1
 80040ee:	2300      	movhi	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e0e7      	b.n	80042ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4a78      	ldr	r2, [pc, #480]	; (80042e0 <HAL_I2C_Init+0x280>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	0c9b      	lsrs	r3, r3, #18
 8004104:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	4a6a      	ldr	r2, [pc, #424]	; (80042d4 <HAL_I2C_Init+0x274>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d802      	bhi.n	8004134 <HAL_I2C_Init+0xd4>
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	3301      	adds	r3, #1
 8004132:	e009      	b.n	8004148 <HAL_I2C_Init+0xe8>
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800413a:	fb02 f303 	mul.w	r3, r2, r3
 800413e:	4a69      	ldr	r2, [pc, #420]	; (80042e4 <HAL_I2C_Init+0x284>)
 8004140:	fba2 2303 	umull	r2, r3, r2, r3
 8004144:	099b      	lsrs	r3, r3, #6
 8004146:	3301      	adds	r3, #1
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	430b      	orrs	r3, r1
 800414e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800415a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	495c      	ldr	r1, [pc, #368]	; (80042d4 <HAL_I2C_Init+0x274>)
 8004164:	428b      	cmp	r3, r1
 8004166:	d819      	bhi.n	800419c <HAL_I2C_Init+0x13c>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1e59      	subs	r1, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	fbb1 f3f3 	udiv	r3, r1, r3
 8004176:	1c59      	adds	r1, r3, #1
 8004178:	f640 73fc 	movw	r3, #4092	; 0xffc
 800417c:	400b      	ands	r3, r1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <HAL_I2C_Init+0x138>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1e59      	subs	r1, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004190:	3301      	adds	r3, #1
 8004192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004196:	e051      	b.n	800423c <HAL_I2C_Init+0x1dc>
 8004198:	2304      	movs	r3, #4
 800419a:	e04f      	b.n	800423c <HAL_I2C_Init+0x1dc>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d111      	bne.n	80041c8 <HAL_I2C_Init+0x168>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1e58      	subs	r0, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6859      	ldr	r1, [r3, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	440b      	add	r3, r1
 80041b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b6:	3301      	adds	r3, #1
 80041b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041bc:	2b00      	cmp	r3, #0
 80041be:	bf0c      	ite	eq
 80041c0:	2301      	moveq	r3, #1
 80041c2:	2300      	movne	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	e012      	b.n	80041ee <HAL_I2C_Init+0x18e>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	1e58      	subs	r0, r3, #1
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6859      	ldr	r1, [r3, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	0099      	lsls	r1, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	fbb0 f3f3 	udiv	r3, r0, r3
 80041de:	3301      	adds	r3, #1
 80041e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bf0c      	ite	eq
 80041e8:	2301      	moveq	r3, #1
 80041ea:	2300      	movne	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_I2C_Init+0x196>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e022      	b.n	800423c <HAL_I2C_Init+0x1dc>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10e      	bne.n	800421c <HAL_I2C_Init+0x1bc>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1e58      	subs	r0, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6859      	ldr	r1, [r3, #4]
 8004206:	460b      	mov	r3, r1
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	440b      	add	r3, r1
 800420c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004210:	3301      	adds	r3, #1
 8004212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421a:	e00f      	b.n	800423c <HAL_I2C_Init+0x1dc>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	1e58      	subs	r0, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6859      	ldr	r1, [r3, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	0099      	lsls	r1, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004232:	3301      	adds	r3, #1
 8004234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004238:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	6809      	ldr	r1, [r1, #0]
 8004240:	4313      	orrs	r3, r2
 8004242:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69da      	ldr	r2, [r3, #28]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800426a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6911      	ldr	r1, [r2, #16]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68d2      	ldr	r2, [r2, #12]
 8004276:	4311      	orrs	r1, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	430b      	orrs	r3, r1
 800427e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	000186a0 	.word	0x000186a0
 80042d8:	001e847f 	.word	0x001e847f
 80042dc:	003d08ff 	.word	0x003d08ff
 80042e0:	431bde83 	.word	0x431bde83
 80042e4:	10624dd3 	.word	0x10624dd3

080042e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	461a      	mov	r2, r3
 80042f4:	460b      	mov	r3, r1
 80042f6:	817b      	strh	r3, [r7, #10]
 80042f8:	4613      	mov	r3, r2
 80042fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042fc:	f7fe fc9e 	bl	8002c3c <HAL_GetTick>
 8004300:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b20      	cmp	r3, #32
 800430c:	f040 80e0 	bne.w	80044d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	2319      	movs	r3, #25
 8004316:	2201      	movs	r2, #1
 8004318:	4970      	ldr	r1, [pc, #448]	; (80044dc <HAL_I2C_Master_Transmit+0x1f4>)
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f001 f8f6 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004326:	2302      	movs	r3, #2
 8004328:	e0d3      	b.n	80044d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_I2C_Master_Transmit+0x50>
 8004334:	2302      	movs	r3, #2
 8004336:	e0cc      	b.n	80044d2 <HAL_I2C_Master_Transmit+0x1ea>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b01      	cmp	r3, #1
 800434c:	d007      	beq.n	800435e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f042 0201 	orr.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800436c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2221      	movs	r2, #33	; 0x21
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2210      	movs	r2, #16
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	893a      	ldrh	r2, [r7, #8]
 800438e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4a50      	ldr	r2, [pc, #320]	; (80044e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800439e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043a0:	8979      	ldrh	r1, [r7, #10]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	6a3a      	ldr	r2, [r7, #32]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fde2 	bl	8004f70 <I2C_MasterRequestWrite>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e08d      	b.n	80044d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b6:	2300      	movs	r3, #0
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80043cc:	e066      	b.n	800449c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	6a39      	ldr	r1, [r7, #32]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f001 f970 	bl	80056b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00d      	beq.n	80043fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d107      	bne.n	80043f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e06b      	b.n	80044d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	781a      	ldrb	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b04      	cmp	r3, #4
 8004436:	d11b      	bne.n	8004470 <HAL_I2C_Master_Transmit+0x188>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443c:	2b00      	cmp	r3, #0
 800443e:	d017      	beq.n	8004470 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	781a      	ldrb	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	6a39      	ldr	r1, [r7, #32]
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f001 f960 	bl	800573a <I2C_WaitOnBTFFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00d      	beq.n	800449c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	2b04      	cmp	r3, #4
 8004486:	d107      	bne.n	8004498 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004496:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e01a      	b.n	80044d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d194      	bne.n	80043ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	e000      	b.n	80044d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80044d0:	2302      	movs	r3, #2
  }
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	00100002 	.word	0x00100002
 80044e0:	ffff0000 	.word	0xffff0000

080044e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08c      	sub	sp, #48	; 0x30
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	461a      	mov	r2, r3
 80044f0:	460b      	mov	r3, r1
 80044f2:	817b      	strh	r3, [r7, #10]
 80044f4:	4613      	mov	r3, r2
 80044f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044f8:	f7fe fba0 	bl	8002c3c <HAL_GetTick>
 80044fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b20      	cmp	r3, #32
 8004508:	f040 820b 	bne.w	8004922 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	2319      	movs	r3, #25
 8004512:	2201      	movs	r2, #1
 8004514:	497c      	ldr	r1, [pc, #496]	; (8004708 <HAL_I2C_Master_Receive+0x224>)
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fff8 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004522:	2302      	movs	r3, #2
 8004524:	e1fe      	b.n	8004924 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_I2C_Master_Receive+0x50>
 8004530:	2302      	movs	r3, #2
 8004532:	e1f7      	b.n	8004924 <HAL_I2C_Master_Receive+0x440>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b01      	cmp	r3, #1
 8004548:	d007      	beq.n	800455a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0201 	orr.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004568:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2222      	movs	r2, #34	; 0x22
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2210      	movs	r2, #16
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	893a      	ldrh	r2, [r7, #8]
 800458a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4a5c      	ldr	r2, [pc, #368]	; (800470c <HAL_I2C_Master_Receive+0x228>)
 800459a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800459c:	8979      	ldrh	r1, [r7, #10]
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 fd66 	bl	8005074 <I2C_MasterRequestRead>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e1b8      	b.n	8004924 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d113      	bne.n	80045e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ba:	2300      	movs	r3, #0
 80045bc:	623b      	str	r3, [r7, #32]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	623b      	str	r3, [r7, #32]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	623b      	str	r3, [r7, #32]
 80045ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	e18c      	b.n	80048fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d11b      	bne.n	8004622 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	e16c      	b.n	80048fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004626:	2b02      	cmp	r3, #2
 8004628:	d11b      	bne.n	8004662 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004638:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004648:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800464a:	2300      	movs	r3, #0
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	61bb      	str	r3, [r7, #24]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	e14c      	b.n	80048fc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004670:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004688:	e138      	b.n	80048fc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468e:	2b03      	cmp	r3, #3
 8004690:	f200 80f1 	bhi.w	8004876 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004698:	2b01      	cmp	r3, #1
 800469a:	d123      	bne.n	80046e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800469c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f001 f88b 	bl	80057bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e139      	b.n	8004924 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046e2:	e10b      	b.n	80048fc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d14e      	bne.n	800478a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	2200      	movs	r2, #0
 80046f4:	4906      	ldr	r1, [pc, #24]	; (8004710 <HAL_I2C_Master_Receive+0x22c>)
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 ff08 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e10e      	b.n	8004924 <HAL_I2C_Master_Receive+0x440>
 8004706:	bf00      	nop
 8004708:	00100002 	.word	0x00100002
 800470c:	ffff0000 	.word	0xffff0000
 8004710:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691a      	ldr	r2, [r3, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004788:	e0b8      	b.n	80048fc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	2200      	movs	r2, #0
 8004792:	4966      	ldr	r1, [pc, #408]	; (800492c <HAL_I2C_Master_Receive+0x448>)
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 feb9 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e0bf      	b.n	8004924 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	2200      	movs	r2, #0
 80047ee:	494f      	ldr	r1, [pc, #316]	; (800492c <HAL_I2C_Master_Receive+0x448>)
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 fe8b 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e091      	b.n	8004924 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800480e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004874:	e042      	b.n	80048fc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004878:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 ff9e 	bl	80057bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e04c      	b.n	8004924 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d118      	bne.n	80048fc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004900:	2b00      	cmp	r3, #0
 8004902:	f47f aec2 	bne.w	800468a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	e000      	b.n	8004924 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004922:	2302      	movs	r3, #2
  }
}
 8004924:	4618      	mov	r0, r3
 8004926:	3728      	adds	r7, #40	; 0x28
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	00010004 	.word	0x00010004

08004930 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	4608      	mov	r0, r1
 800493a:	4611      	mov	r1, r2
 800493c:	461a      	mov	r2, r3
 800493e:	4603      	mov	r3, r0
 8004940:	817b      	strh	r3, [r7, #10]
 8004942:	460b      	mov	r3, r1
 8004944:	813b      	strh	r3, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800494a:	f7fe f977 	bl	8002c3c <HAL_GetTick>
 800494e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b20      	cmp	r3, #32
 800495a:	f040 80d9 	bne.w	8004b10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	2319      	movs	r3, #25
 8004964:	2201      	movs	r2, #1
 8004966:	496d      	ldr	r1, [pc, #436]	; (8004b1c <HAL_I2C_Mem_Write+0x1ec>)
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 fdcf 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004974:	2302      	movs	r3, #2
 8004976:	e0cc      	b.n	8004b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_I2C_Mem_Write+0x56>
 8004982:	2302      	movs	r3, #2
 8004984:	e0c5      	b.n	8004b12 <HAL_I2C_Mem_Write+0x1e2>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b01      	cmp	r3, #1
 800499a:	d007      	beq.n	80049ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2221      	movs	r2, #33	; 0x21
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2240      	movs	r2, #64	; 0x40
 80049c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6a3a      	ldr	r2, [r7, #32]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4a4d      	ldr	r2, [pc, #308]	; (8004b20 <HAL_I2C_Mem_Write+0x1f0>)
 80049ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049ee:	88f8      	ldrh	r0, [r7, #6]
 80049f0:	893a      	ldrh	r2, [r7, #8]
 80049f2:	8979      	ldrh	r1, [r7, #10]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	4603      	mov	r3, r0
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fc06 	bl	8005210 <I2C_RequestMemoryWrite>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d052      	beq.n	8004ab0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e081      	b.n	8004b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 fe50 	bl	80056b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00d      	beq.n	8004a3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d107      	bne.n	8004a36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e06b      	b.n	8004b12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	781a      	ldrb	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d11b      	bne.n	8004ab0 <HAL_I2C_Mem_Write+0x180>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d017      	beq.n	8004ab0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	781a      	ldrb	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1aa      	bne.n	8004a0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 fe3c 	bl	800573a <I2C_WaitOnBTFFlagUntilTimeout>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00d      	beq.n	8004ae4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d107      	bne.n	8004ae0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ade:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e016      	b.n	8004b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	e000      	b.n	8004b12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b10:	2302      	movs	r3, #2
  }
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	00100002 	.word	0x00100002
 8004b20:	ffff0000 	.word	0xffff0000

08004b24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08c      	sub	sp, #48	; 0x30
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	4608      	mov	r0, r1
 8004b2e:	4611      	mov	r1, r2
 8004b30:	461a      	mov	r2, r3
 8004b32:	4603      	mov	r3, r0
 8004b34:	817b      	strh	r3, [r7, #10]
 8004b36:	460b      	mov	r3, r1
 8004b38:	813b      	strh	r3, [r7, #8]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b3e:	f7fe f87d 	bl	8002c3c <HAL_GetTick>
 8004b42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	f040 8208 	bne.w	8004f62 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	2319      	movs	r3, #25
 8004b58:	2201      	movs	r2, #1
 8004b5a:	497b      	ldr	r1, [pc, #492]	; (8004d48 <HAL_I2C_Mem_Read+0x224>)
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 fcd5 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e1fb      	b.n	8004f64 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_I2C_Mem_Read+0x56>
 8004b76:	2302      	movs	r3, #2
 8004b78:	e1f4      	b.n	8004f64 <HAL_I2C_Mem_Read+0x440>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d007      	beq.n	8004ba0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2222      	movs	r2, #34	; 0x22
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2240      	movs	r2, #64	; 0x40
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4a5b      	ldr	r2, [pc, #364]	; (8004d4c <HAL_I2C_Mem_Read+0x228>)
 8004be0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004be2:	88f8      	ldrh	r0, [r7, #6]
 8004be4:	893a      	ldrh	r2, [r7, #8]
 8004be6:	8979      	ldrh	r1, [r7, #10]
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	9301      	str	r3, [sp, #4]
 8004bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fba2 	bl	800533c <I2C_RequestMemoryRead>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e1b0      	b.n	8004f64 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d113      	bne.n	8004c32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	623b      	str	r3, [r7, #32]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	623b      	str	r3, [r7, #32]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	623b      	str	r3, [r7, #32]
 8004c1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	e184      	b.n	8004f3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d11b      	bne.n	8004c72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	e164      	b.n	8004f3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d11b      	bne.n	8004cb2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	e144      	b.n	8004f3c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004cc8:	e138      	b.n	8004f3c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	f200 80f1 	bhi.w	8004eb6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d123      	bne.n	8004d24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 fd6b 	bl	80057bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e139      	b.n	8004f64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d22:	e10b      	b.n	8004f3c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d14e      	bne.n	8004dca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d32:	2200      	movs	r2, #0
 8004d34:	4906      	ldr	r1, [pc, #24]	; (8004d50 <HAL_I2C_Mem_Read+0x22c>)
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fbe8 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d008      	beq.n	8004d54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e10e      	b.n	8004f64 <HAL_I2C_Mem_Read+0x440>
 8004d46:	bf00      	nop
 8004d48:	00100002 	.word	0x00100002
 8004d4c:	ffff0000 	.word	0xffff0000
 8004d50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dc8:	e0b8      	b.n	8004f3c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	4966      	ldr	r1, [pc, #408]	; (8004f6c <HAL_I2C_Mem_Read+0x448>)
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 fb99 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0bf      	b.n	8004f64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691a      	ldr	r2, [r3, #16]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	494f      	ldr	r1, [pc, #316]	; (8004f6c <HAL_I2C_Mem_Read+0x448>)
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 fb6b 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e091      	b.n	8004f64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691a      	ldr	r2, [r3, #16]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004eb4:	e042      	b.n	8004f3c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fc7e 	bl	80057bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e04c      	b.n	8004f64 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d118      	bne.n	8004f3c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f47f aec2 	bne.w	8004cca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e000      	b.n	8004f64 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f62:	2302      	movs	r3, #2
  }
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3728      	adds	r7, #40	; 0x28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	00010004 	.word	0x00010004

08004f70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d006      	beq.n	8004f9a <I2C_MasterRequestWrite+0x2a>
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d003      	beq.n	8004f9a <I2C_MasterRequestWrite+0x2a>
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f98:	d108      	bne.n	8004fac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	e00b      	b.n	8004fc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb0:	2b12      	cmp	r3, #18
 8004fb2:	d107      	bne.n	8004fc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 fa9b 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00d      	beq.n	8004ff8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fea:	d103      	bne.n	8004ff4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e035      	b.n	8005064 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005000:	d108      	bne.n	8005014 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005002:	897b      	ldrh	r3, [r7, #10]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005010:	611a      	str	r2, [r3, #16]
 8005012:	e01b      	b.n	800504c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005014:	897b      	ldrh	r3, [r7, #10]
 8005016:	11db      	asrs	r3, r3, #7
 8005018:	b2db      	uxtb	r3, r3
 800501a:	f003 0306 	and.w	r3, r3, #6
 800501e:	b2db      	uxtb	r3, r3
 8005020:	f063 030f 	orn	r3, r3, #15
 8005024:	b2da      	uxtb	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	490e      	ldr	r1, [pc, #56]	; (800506c <I2C_MasterRequestWrite+0xfc>)
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 fac1 	bl	80055ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e010      	b.n	8005064 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005042:	897b      	ldrh	r3, [r7, #10]
 8005044:	b2da      	uxtb	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4907      	ldr	r1, [pc, #28]	; (8005070 <I2C_MasterRequestWrite+0x100>)
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 fab1 	bl	80055ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	00010008 	.word	0x00010008
 8005070:	00010002 	.word	0x00010002

08005074 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af02      	add	r7, sp, #8
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	607a      	str	r2, [r7, #4]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	460b      	mov	r3, r1
 8005082:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005098:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b08      	cmp	r3, #8
 800509e:	d006      	beq.n	80050ae <I2C_MasterRequestRead+0x3a>
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d003      	beq.n	80050ae <I2C_MasterRequestRead+0x3a>
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050ac:	d108      	bne.n	80050c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	e00b      	b.n	80050d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c4:	2b11      	cmp	r3, #17
 80050c6:	d107      	bne.n	80050d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 fa11 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00d      	beq.n	800510c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050fe:	d103      	bne.n	8005108 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005106:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e079      	b.n	8005200 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005114:	d108      	bne.n	8005128 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005116:	897b      	ldrh	r3, [r7, #10]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	f043 0301 	orr.w	r3, r3, #1
 800511e:	b2da      	uxtb	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	611a      	str	r2, [r3, #16]
 8005126:	e05f      	b.n	80051e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005128:	897b      	ldrh	r3, [r7, #10]
 800512a:	11db      	asrs	r3, r3, #7
 800512c:	b2db      	uxtb	r3, r3
 800512e:	f003 0306 	and.w	r3, r3, #6
 8005132:	b2db      	uxtb	r3, r3
 8005134:	f063 030f 	orn	r3, r3, #15
 8005138:	b2da      	uxtb	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	4930      	ldr	r1, [pc, #192]	; (8005208 <I2C_MasterRequestRead+0x194>)
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f000 fa37 	bl	80055ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e054      	b.n	8005200 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005156:	897b      	ldrh	r3, [r7, #10]
 8005158:	b2da      	uxtb	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	4929      	ldr	r1, [pc, #164]	; (800520c <I2C_MasterRequestRead+0x198>)
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 fa27 	bl	80055ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e044      	b.n	8005200 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	613b      	str	r3, [r7, #16]
 800518a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800519a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f9af 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00d      	beq.n	80051d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c2:	d103      	bne.n	80051cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e017      	b.n	8005200 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80051d0:	897b      	ldrh	r3, [r7, #10]
 80051d2:	11db      	asrs	r3, r3, #7
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	f003 0306 	and.w	r3, r3, #6
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	f063 030e 	orn	r3, r3, #14
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	4907      	ldr	r1, [pc, #28]	; (800520c <I2C_MasterRequestRead+0x198>)
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f9e3 	bl	80055ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	00010008 	.word	0x00010008
 800520c:	00010002 	.word	0x00010002

08005210 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af02      	add	r7, sp, #8
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	4608      	mov	r0, r1
 800521a:	4611      	mov	r1, r2
 800521c:	461a      	mov	r2, r3
 800521e:	4603      	mov	r3, r0
 8005220:	817b      	strh	r3, [r7, #10]
 8005222:	460b      	mov	r3, r1
 8005224:	813b      	strh	r3, [r7, #8]
 8005226:	4613      	mov	r3, r2
 8005228:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005238:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	2200      	movs	r2, #0
 8005242:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 f960 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00d      	beq.n	800526e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005260:	d103      	bne.n	800526a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005268:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e05f      	b.n	800532e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800526e:	897b      	ldrh	r3, [r7, #10]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800527c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	6a3a      	ldr	r2, [r7, #32]
 8005282:	492d      	ldr	r1, [pc, #180]	; (8005338 <I2C_RequestMemoryWrite+0x128>)
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f998 	bl	80055ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e04c      	b.n	800532e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005294:	2300      	movs	r3, #0
 8005296:	617b      	str	r3, [r7, #20]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ac:	6a39      	ldr	r1, [r7, #32]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 fa02 	bl	80056b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00d      	beq.n	80052d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d107      	bne.n	80052d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e02b      	b.n	800532e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d105      	bne.n	80052e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052dc:	893b      	ldrh	r3, [r7, #8]
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	611a      	str	r2, [r3, #16]
 80052e6:	e021      	b.n	800532c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052e8:	893b      	ldrh	r3, [r7, #8]
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f8:	6a39      	ldr	r1, [r7, #32]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f9dc 	bl	80056b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00d      	beq.n	8005322 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	2b04      	cmp	r3, #4
 800530c:	d107      	bne.n	800531e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e005      	b.n	800532e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005322:	893b      	ldrh	r3, [r7, #8]
 8005324:	b2da      	uxtb	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	00010002 	.word	0x00010002

0800533c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af02      	add	r7, sp, #8
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	4608      	mov	r0, r1
 8005346:	4611      	mov	r1, r2
 8005348:	461a      	mov	r2, r3
 800534a:	4603      	mov	r3, r0
 800534c:	817b      	strh	r3, [r7, #10]
 800534e:	460b      	mov	r3, r1
 8005350:	813b      	strh	r3, [r7, #8]
 8005352:	4613      	mov	r3, r2
 8005354:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005364:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005374:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	2200      	movs	r2, #0
 800537e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 f8c2 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00d      	beq.n	80053aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539c:	d103      	bne.n	80053a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e0aa      	b.n	8005500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053aa:	897b      	ldrh	r3, [r7, #10]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	461a      	mov	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	6a3a      	ldr	r2, [r7, #32]
 80053be:	4952      	ldr	r1, [pc, #328]	; (8005508 <I2C_RequestMemoryRead+0x1cc>)
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 f8fa 	bl	80055ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e097      	b.n	8005500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e8:	6a39      	ldr	r1, [r7, #32]
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 f964 	bl	80056b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00d      	beq.n	8005412 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d107      	bne.n	800540e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800540c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e076      	b.n	8005500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005412:	88fb      	ldrh	r3, [r7, #6]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d105      	bne.n	8005424 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005418:	893b      	ldrh	r3, [r7, #8]
 800541a:	b2da      	uxtb	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	611a      	str	r2, [r3, #16]
 8005422:	e021      	b.n	8005468 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005424:	893b      	ldrh	r3, [r7, #8]
 8005426:	0a1b      	lsrs	r3, r3, #8
 8005428:	b29b      	uxth	r3, r3
 800542a:	b2da      	uxtb	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005434:	6a39      	ldr	r1, [r7, #32]
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 f93e 	bl	80056b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00d      	beq.n	800545e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	2b04      	cmp	r3, #4
 8005448:	d107      	bne.n	800545a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005458:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e050      	b.n	8005500 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800545e:	893b      	ldrh	r3, [r7, #8]
 8005460:	b2da      	uxtb	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546a:	6a39      	ldr	r1, [r7, #32]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 f923 	bl	80056b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00d      	beq.n	8005494 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	2b04      	cmp	r3, #4
 800547e:	d107      	bne.n	8005490 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800548e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e035      	b.n	8005500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f82b 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00d      	beq.n	80054d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ca:	d103      	bne.n	80054d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e013      	b.n	8005500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054d8:	897b      	ldrh	r3, [r7, #10]
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	f043 0301 	orr.w	r3, r3, #1
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	6a3a      	ldr	r2, [r7, #32]
 80054ec:	4906      	ldr	r1, [pc, #24]	; (8005508 <I2C_RequestMemoryRead+0x1cc>)
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 f863 	bl	80055ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	00010002 	.word	0x00010002

0800550c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	4613      	mov	r3, r2
 800551a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800551c:	e025      	b.n	800556a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005524:	d021      	beq.n	800556a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005526:	f7fd fb89 	bl	8002c3c <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d302      	bcc.n	800553c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d116      	bne.n	800556a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2220      	movs	r2, #32
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e023      	b.n	80055b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	0c1b      	lsrs	r3, r3, #16
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	d10d      	bne.n	8005590 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	43da      	mvns	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4013      	ands	r3, r2
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	bf0c      	ite	eq
 8005586:	2301      	moveq	r3, #1
 8005588:	2300      	movne	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	e00c      	b.n	80055aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	43da      	mvns	r2, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4013      	ands	r3, r2
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	bf0c      	ite	eq
 80055a2:	2301      	moveq	r3, #1
 80055a4:	2300      	movne	r3, #0
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d0b6      	beq.n	800551e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
 80055c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055c8:	e051      	b.n	800566e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d8:	d123      	bne.n	8005622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	f043 0204 	orr.w	r2, r3, #4
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e046      	b.n	80056b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d021      	beq.n	800566e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562a:	f7fd fb07 	bl	8002c3c <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	429a      	cmp	r2, r3
 8005638:	d302      	bcc.n	8005640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d116      	bne.n	800566e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2220      	movs	r2, #32
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	f043 0220 	orr.w	r2, r3, #32
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e020      	b.n	80056b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	0c1b      	lsrs	r3, r3, #16
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b01      	cmp	r3, #1
 8005676:	d10c      	bne.n	8005692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	43da      	mvns	r2, r3
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4013      	ands	r3, r2
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	bf14      	ite	ne
 800568a:	2301      	movne	r3, #1
 800568c:	2300      	moveq	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	e00b      	b.n	80056aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	43da      	mvns	r2, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4013      	ands	r3, r2
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	bf14      	ite	ne
 80056a4:	2301      	movne	r3, #1
 80056a6:	2300      	moveq	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d18d      	bne.n	80055ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056c4:	e02d      	b.n	8005722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 f8ce 	bl	8005868 <I2C_IsAcknowledgeFailed>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e02d      	b.n	8005732 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056dc:	d021      	beq.n	8005722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056de:	f7fd faad 	bl	8002c3c <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d302      	bcc.n	80056f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d116      	bne.n	8005722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	f043 0220 	orr.w	r2, r3, #32
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e007      	b.n	8005732 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572c:	2b80      	cmp	r3, #128	; 0x80
 800572e:	d1ca      	bne.n	80056c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005746:	e02d      	b.n	80057a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f88d 	bl	8005868 <I2C_IsAcknowledgeFailed>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e02d      	b.n	80057b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d021      	beq.n	80057a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005760:	f7fd fa6c 	bl	8002c3c <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	429a      	cmp	r2, r3
 800576e:	d302      	bcc.n	8005776 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d116      	bne.n	80057a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005790:	f043 0220 	orr.w	r2, r3, #32
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e007      	b.n	80057b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	f003 0304 	and.w	r3, r3, #4
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d1ca      	bne.n	8005748 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057c8:	e042      	b.n	8005850 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	2b10      	cmp	r3, #16
 80057d6:	d119      	bne.n	800580c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0210 	mvn.w	r2, #16
 80057e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e029      	b.n	8005860 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580c:	f7fd fa16 	bl	8002c3c <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	429a      	cmp	r2, r3
 800581a:	d302      	bcc.n	8005822 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d116      	bne.n	8005850 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	f043 0220 	orr.w	r2, r3, #32
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e007      	b.n	8005860 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585a:	2b40      	cmp	r3, #64	; 0x40
 800585c:	d1b5      	bne.n	80057ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800587a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587e:	d11b      	bne.n	80058b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005888:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	f043 0204 	orr.w	r2, r3, #4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e000      	b.n	80058ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
	...

080058c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e267      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d075      	beq.n	80059d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058e6:	4b88      	ldr	r3, [pc, #544]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 030c 	and.w	r3, r3, #12
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d00c      	beq.n	800590c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058f2:	4b85      	ldr	r3, [pc, #532]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058fa:	2b08      	cmp	r3, #8
 80058fc:	d112      	bne.n	8005924 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058fe:	4b82      	ldr	r3, [pc, #520]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800590a:	d10b      	bne.n	8005924 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800590c:	4b7e      	ldr	r3, [pc, #504]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d05b      	beq.n	80059d0 <HAL_RCC_OscConfig+0x108>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d157      	bne.n	80059d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e242      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592c:	d106      	bne.n	800593c <HAL_RCC_OscConfig+0x74>
 800592e:	4b76      	ldr	r3, [pc, #472]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a75      	ldr	r2, [pc, #468]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	e01d      	b.n	8005978 <HAL_RCC_OscConfig+0xb0>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005944:	d10c      	bne.n	8005960 <HAL_RCC_OscConfig+0x98>
 8005946:	4b70      	ldr	r3, [pc, #448]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a6f      	ldr	r2, [pc, #444]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 800594c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	4b6d      	ldr	r3, [pc, #436]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a6c      	ldr	r2, [pc, #432]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	e00b      	b.n	8005978 <HAL_RCC_OscConfig+0xb0>
 8005960:	4b69      	ldr	r3, [pc, #420]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a68      	ldr	r2, [pc, #416]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	4b66      	ldr	r3, [pc, #408]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a65      	ldr	r2, [pc, #404]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d013      	beq.n	80059a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005980:	f7fd f95c 	bl	8002c3c <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005988:	f7fd f958 	bl	8002c3c <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b64      	cmp	r3, #100	; 0x64
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e207      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800599a:	4b5b      	ldr	r3, [pc, #364]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f0      	beq.n	8005988 <HAL_RCC_OscConfig+0xc0>
 80059a6:	e014      	b.n	80059d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a8:	f7fd f948 	bl	8002c3c <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059b0:	f7fd f944 	bl	8002c3c <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b64      	cmp	r3, #100	; 0x64
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e1f3      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059c2:	4b51      	ldr	r3, [pc, #324]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f0      	bne.n	80059b0 <HAL_RCC_OscConfig+0xe8>
 80059ce:	e000      	b.n	80059d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d063      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059de:	4b4a      	ldr	r3, [pc, #296]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00b      	beq.n	8005a02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059ea:	4b47      	ldr	r3, [pc, #284]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059f2:	2b08      	cmp	r3, #8
 80059f4:	d11c      	bne.n	8005a30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059f6:	4b44      	ldr	r3, [pc, #272]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d116      	bne.n	8005a30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a02:	4b41      	ldr	r3, [pc, #260]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <HAL_RCC_OscConfig+0x152>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d001      	beq.n	8005a1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e1c7      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a1a:	4b3b      	ldr	r3, [pc, #236]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	4937      	ldr	r1, [pc, #220]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a2e:	e03a      	b.n	8005aa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d020      	beq.n	8005a7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a38:	4b34      	ldr	r3, [pc, #208]	; (8005b0c <HAL_RCC_OscConfig+0x244>)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3e:	f7fd f8fd 	bl	8002c3c <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a44:	e008      	b.n	8005a58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a46:	f7fd f8f9 	bl	8002c3c <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e1a8      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a58:	4b2b      	ldr	r3, [pc, #172]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0f0      	beq.n	8005a46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a64:	4b28      	ldr	r3, [pc, #160]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	4925      	ldr	r1, [pc, #148]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	600b      	str	r3, [r1, #0]
 8005a78:	e015      	b.n	8005aa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a7a:	4b24      	ldr	r3, [pc, #144]	; (8005b0c <HAL_RCC_OscConfig+0x244>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a80:	f7fd f8dc 	bl	8002c3c <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a88:	f7fd f8d8 	bl	8002c3c <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e187      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a9a:	4b1b      	ldr	r3, [pc, #108]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1f0      	bne.n	8005a88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d036      	beq.n	8005b20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d016      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aba:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <HAL_RCC_OscConfig+0x248>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac0:	f7fd f8bc 	bl	8002c3c <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ac8:	f7fd f8b8 	bl	8002c3c <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e167      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ada:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <HAL_RCC_OscConfig+0x240>)
 8005adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0f0      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x200>
 8005ae6:	e01b      	b.n	8005b20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ae8:	4b09      	ldr	r3, [pc, #36]	; (8005b10 <HAL_RCC_OscConfig+0x248>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aee:	f7fd f8a5 	bl	8002c3c <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005af4:	e00e      	b.n	8005b14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005af6:	f7fd f8a1 	bl	8002c3c <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d907      	bls.n	8005b14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e150      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	42470000 	.word	0x42470000
 8005b10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b14:	4b88      	ldr	r3, [pc, #544]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1ea      	bne.n	8005af6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 8097 	beq.w	8005c5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b32:	4b81      	ldr	r3, [pc, #516]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10f      	bne.n	8005b5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60bb      	str	r3, [r7, #8]
 8005b42:	4b7d      	ldr	r3, [pc, #500]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	4a7c      	ldr	r2, [pc, #496]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b4e:	4b7a      	ldr	r3, [pc, #488]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b56:	60bb      	str	r3, [r7, #8]
 8005b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b5e:	4b77      	ldr	r3, [pc, #476]	; (8005d3c <HAL_RCC_OscConfig+0x474>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d118      	bne.n	8005b9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b6a:	4b74      	ldr	r3, [pc, #464]	; (8005d3c <HAL_RCC_OscConfig+0x474>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a73      	ldr	r2, [pc, #460]	; (8005d3c <HAL_RCC_OscConfig+0x474>)
 8005b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b76:	f7fd f861 	bl	8002c3c <HAL_GetTick>
 8005b7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b7c:	e008      	b.n	8005b90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b7e:	f7fd f85d 	bl	8002c3c <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e10c      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b90:	4b6a      	ldr	r3, [pc, #424]	; (8005d3c <HAL_RCC_OscConfig+0x474>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0f0      	beq.n	8005b7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d106      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x2ea>
 8005ba4:	4b64      	ldr	r3, [pc, #400]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba8:	4a63      	ldr	r2, [pc, #396]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005baa:	f043 0301 	orr.w	r3, r3, #1
 8005bae:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb0:	e01c      	b.n	8005bec <HAL_RCC_OscConfig+0x324>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2b05      	cmp	r3, #5
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x30c>
 8005bba:	4b5f      	ldr	r3, [pc, #380]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbe:	4a5e      	ldr	r2, [pc, #376]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005bc0:	f043 0304 	orr.w	r3, r3, #4
 8005bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc6:	4b5c      	ldr	r3, [pc, #368]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	4a5b      	ldr	r2, [pc, #364]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd2:	e00b      	b.n	8005bec <HAL_RCC_OscConfig+0x324>
 8005bd4:	4b58      	ldr	r3, [pc, #352]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd8:	4a57      	ldr	r2, [pc, #348]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005bda:	f023 0301 	bic.w	r3, r3, #1
 8005bde:	6713      	str	r3, [r2, #112]	; 0x70
 8005be0:	4b55      	ldr	r3, [pc, #340]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be4:	4a54      	ldr	r2, [pc, #336]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005be6:	f023 0304 	bic.w	r3, r3, #4
 8005bea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d015      	beq.n	8005c20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf4:	f7fd f822 	bl	8002c3c <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bfa:	e00a      	b.n	8005c12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bfc:	f7fd f81e 	bl	8002c3c <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e0cb      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c12:	4b49      	ldr	r3, [pc, #292]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0ee      	beq.n	8005bfc <HAL_RCC_OscConfig+0x334>
 8005c1e:	e014      	b.n	8005c4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c20:	f7fd f80c 	bl	8002c3c <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c26:	e00a      	b.n	8005c3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c28:	f7fd f808 	bl	8002c3c <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e0b5      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c3e:	4b3e      	ldr	r3, [pc, #248]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1ee      	bne.n	8005c28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d105      	bne.n	8005c5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c50:	4b39      	ldr	r3, [pc, #228]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	4a38      	ldr	r2, [pc, #224]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 80a1 	beq.w	8005da8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c66:	4b34      	ldr	r3, [pc, #208]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 030c 	and.w	r3, r3, #12
 8005c6e:	2b08      	cmp	r3, #8
 8005c70:	d05c      	beq.n	8005d2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d141      	bne.n	8005cfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c7a:	4b31      	ldr	r3, [pc, #196]	; (8005d40 <HAL_RCC_OscConfig+0x478>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c80:	f7fc ffdc 	bl	8002c3c <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c88:	f7fc ffd8 	bl	8002c3c <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e087      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c9a:	4b27      	ldr	r3, [pc, #156]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1f0      	bne.n	8005c88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69da      	ldr	r2, [r3, #28]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	019b      	lsls	r3, r3, #6
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	085b      	lsrs	r3, r3, #1
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	041b      	lsls	r3, r3, #16
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	061b      	lsls	r3, r3, #24
 8005cca:	491b      	ldr	r1, [pc, #108]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cd0:	4b1b      	ldr	r3, [pc, #108]	; (8005d40 <HAL_RCC_OscConfig+0x478>)
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd6:	f7fc ffb1 	bl	8002c3c <HAL_GetTick>
 8005cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cdc:	e008      	b.n	8005cf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cde:	f7fc ffad 	bl	8002c3c <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e05c      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cf0:	4b11      	ldr	r3, [pc, #68]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0f0      	beq.n	8005cde <HAL_RCC_OscConfig+0x416>
 8005cfc:	e054      	b.n	8005da8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cfe:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <HAL_RCC_OscConfig+0x478>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d04:	f7fc ff9a 	bl	8002c3c <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d0c:	f7fc ff96 	bl	8002c3c <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e045      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d1e:	4b06      	ldr	r3, [pc, #24]	; (8005d38 <HAL_RCC_OscConfig+0x470>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f0      	bne.n	8005d0c <HAL_RCC_OscConfig+0x444>
 8005d2a:	e03d      	b.n	8005da8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d107      	bne.n	8005d44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e038      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	40007000 	.word	0x40007000
 8005d40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d44:	4b1b      	ldr	r3, [pc, #108]	; (8005db4 <HAL_RCC_OscConfig+0x4ec>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d028      	beq.n	8005da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d121      	bne.n	8005da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d11a      	bne.n	8005da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d74:	4013      	ands	r3, r2
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d111      	bne.n	8005da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8a:	085b      	lsrs	r3, r3, #1
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d107      	bne.n	8005da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d001      	beq.n	8005da8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e000      	b.n	8005daa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	40023800 	.word	0x40023800

08005db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e0cc      	b.n	8005f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dcc:	4b68      	ldr	r3, [pc, #416]	; (8005f70 <HAL_RCC_ClockConfig+0x1b8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d90c      	bls.n	8005df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dda:	4b65      	ldr	r3, [pc, #404]	; (8005f70 <HAL_RCC_ClockConfig+0x1b8>)
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de2:	4b63      	ldr	r3, [pc, #396]	; (8005f70 <HAL_RCC_ClockConfig+0x1b8>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d001      	beq.n	8005df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e0b8      	b.n	8005f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d020      	beq.n	8005e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d005      	beq.n	8005e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e0c:	4b59      	ldr	r3, [pc, #356]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	4a58      	ldr	r2, [pc, #352]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e24:	4b53      	ldr	r3, [pc, #332]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	4a52      	ldr	r2, [pc, #328]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e30:	4b50      	ldr	r3, [pc, #320]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	494d      	ldr	r1, [pc, #308]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d044      	beq.n	8005ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d107      	bne.n	8005e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e56:	4b47      	ldr	r3, [pc, #284]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d119      	bne.n	8005e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e07f      	b.n	8005f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d003      	beq.n	8005e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d107      	bne.n	8005e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e76:	4b3f      	ldr	r3, [pc, #252]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d109      	bne.n	8005e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e06f      	b.n	8005f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e86:	4b3b      	ldr	r3, [pc, #236]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e067      	b.n	8005f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e96:	4b37      	ldr	r3, [pc, #220]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f023 0203 	bic.w	r2, r3, #3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	4934      	ldr	r1, [pc, #208]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ea8:	f7fc fec8 	bl	8002c3c <HAL_GetTick>
 8005eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eae:	e00a      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eb0:	f7fc fec4 	bl	8002c3c <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e04f      	b.n	8005f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ec6:	4b2b      	ldr	r3, [pc, #172]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 020c 	and.w	r2, r3, #12
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d1eb      	bne.n	8005eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ed8:	4b25      	ldr	r3, [pc, #148]	; (8005f70 <HAL_RCC_ClockConfig+0x1b8>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d20c      	bcs.n	8005f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ee6:	4b22      	ldr	r3, [pc, #136]	; (8005f70 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eee:	4b20      	ldr	r3, [pc, #128]	; (8005f70 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d001      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e032      	b.n	8005f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d008      	beq.n	8005f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f0c:	4b19      	ldr	r3, [pc, #100]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	4916      	ldr	r1, [pc, #88]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0308 	and.w	r3, r3, #8
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d009      	beq.n	8005f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f2a:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	490e      	ldr	r1, [pc, #56]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f3e:	f000 f821 	bl	8005f84 <HAL_RCC_GetSysClockFreq>
 8005f42:	4602      	mov	r2, r0
 8005f44:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	091b      	lsrs	r3, r3, #4
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	490a      	ldr	r1, [pc, #40]	; (8005f78 <HAL_RCC_ClockConfig+0x1c0>)
 8005f50:	5ccb      	ldrb	r3, [r1, r3]
 8005f52:	fa22 f303 	lsr.w	r3, r2, r3
 8005f56:	4a09      	ldr	r2, [pc, #36]	; (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f5a:	4b09      	ldr	r3, [pc, #36]	; (8005f80 <HAL_RCC_ClockConfig+0x1c8>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fc fc8e 	bl	8002880 <HAL_InitTick>

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	40023c00 	.word	0x40023c00
 8005f74:	40023800 	.word	0x40023800
 8005f78:	0800cac4 	.word	0x0800cac4
 8005f7c:	20000000 	.word	0x20000000
 8005f80:	20000004 	.word	0x20000004

08005f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f88:	b094      	sub	sp, #80	; 0x50
 8005f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f90:	2300      	movs	r3, #0
 8005f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f94:	2300      	movs	r3, #0
 8005f96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f9c:	4b79      	ldr	r3, [pc, #484]	; (8006184 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f003 030c 	and.w	r3, r3, #12
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d00d      	beq.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	f200 80e1 	bhi.w	8006170 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d003      	beq.n	8005fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8005fb6:	e0db      	b.n	8006170 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fb8:	4b73      	ldr	r3, [pc, #460]	; (8006188 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005fbc:	e0db      	b.n	8006176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fbe:	4b73      	ldr	r3, [pc, #460]	; (800618c <HAL_RCC_GetSysClockFreq+0x208>)
 8005fc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fc2:	e0d8      	b.n	8006176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fc4:	4b6f      	ldr	r3, [pc, #444]	; (8006184 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fce:	4b6d      	ldr	r3, [pc, #436]	; (8006184 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d063      	beq.n	80060a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fda:	4b6a      	ldr	r3, [pc, #424]	; (8006184 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	099b      	lsrs	r3, r3, #6
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fe4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fec:	633b      	str	r3, [r7, #48]	; 0x30
 8005fee:	2300      	movs	r3, #0
 8005ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ff6:	4622      	mov	r2, r4
 8005ff8:	462b      	mov	r3, r5
 8005ffa:	f04f 0000 	mov.w	r0, #0
 8005ffe:	f04f 0100 	mov.w	r1, #0
 8006002:	0159      	lsls	r1, r3, #5
 8006004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006008:	0150      	lsls	r0, r2, #5
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	4621      	mov	r1, r4
 8006010:	1a51      	subs	r1, r2, r1
 8006012:	6139      	str	r1, [r7, #16]
 8006014:	4629      	mov	r1, r5
 8006016:	eb63 0301 	sbc.w	r3, r3, r1
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006028:	4659      	mov	r1, fp
 800602a:	018b      	lsls	r3, r1, #6
 800602c:	4651      	mov	r1, sl
 800602e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006032:	4651      	mov	r1, sl
 8006034:	018a      	lsls	r2, r1, #6
 8006036:	4651      	mov	r1, sl
 8006038:	ebb2 0801 	subs.w	r8, r2, r1
 800603c:	4659      	mov	r1, fp
 800603e:	eb63 0901 	sbc.w	r9, r3, r1
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800604e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006056:	4690      	mov	r8, r2
 8006058:	4699      	mov	r9, r3
 800605a:	4623      	mov	r3, r4
 800605c:	eb18 0303 	adds.w	r3, r8, r3
 8006060:	60bb      	str	r3, [r7, #8]
 8006062:	462b      	mov	r3, r5
 8006064:	eb49 0303 	adc.w	r3, r9, r3
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	f04f 0200 	mov.w	r2, #0
 800606e:	f04f 0300 	mov.w	r3, #0
 8006072:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006076:	4629      	mov	r1, r5
 8006078:	024b      	lsls	r3, r1, #9
 800607a:	4621      	mov	r1, r4
 800607c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006080:	4621      	mov	r1, r4
 8006082:	024a      	lsls	r2, r1, #9
 8006084:	4610      	mov	r0, r2
 8006086:	4619      	mov	r1, r3
 8006088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800608a:	2200      	movs	r2, #0
 800608c:	62bb      	str	r3, [r7, #40]	; 0x28
 800608e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006090:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006094:	f7fa fe30 	bl	8000cf8 <__aeabi_uldivmod>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4613      	mov	r3, r2
 800609e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060a0:	e058      	b.n	8006154 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060a2:	4b38      	ldr	r3, [pc, #224]	; (8006184 <HAL_RCC_GetSysClockFreq+0x200>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	099b      	lsrs	r3, r3, #6
 80060a8:	2200      	movs	r2, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	4611      	mov	r1, r2
 80060ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060b2:	623b      	str	r3, [r7, #32]
 80060b4:	2300      	movs	r3, #0
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
 80060b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060bc:	4642      	mov	r2, r8
 80060be:	464b      	mov	r3, r9
 80060c0:	f04f 0000 	mov.w	r0, #0
 80060c4:	f04f 0100 	mov.w	r1, #0
 80060c8:	0159      	lsls	r1, r3, #5
 80060ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060ce:	0150      	lsls	r0, r2, #5
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4641      	mov	r1, r8
 80060d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80060da:	4649      	mov	r1, r9
 80060dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80060ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80060f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060f4:	ebb2 040a 	subs.w	r4, r2, sl
 80060f8:	eb63 050b 	sbc.w	r5, r3, fp
 80060fc:	f04f 0200 	mov.w	r2, #0
 8006100:	f04f 0300 	mov.w	r3, #0
 8006104:	00eb      	lsls	r3, r5, #3
 8006106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800610a:	00e2      	lsls	r2, r4, #3
 800610c:	4614      	mov	r4, r2
 800610e:	461d      	mov	r5, r3
 8006110:	4643      	mov	r3, r8
 8006112:	18e3      	adds	r3, r4, r3
 8006114:	603b      	str	r3, [r7, #0]
 8006116:	464b      	mov	r3, r9
 8006118:	eb45 0303 	adc.w	r3, r5, r3
 800611c:	607b      	str	r3, [r7, #4]
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	e9d7 4500 	ldrd	r4, r5, [r7]
 800612a:	4629      	mov	r1, r5
 800612c:	028b      	lsls	r3, r1, #10
 800612e:	4621      	mov	r1, r4
 8006130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006134:	4621      	mov	r1, r4
 8006136:	028a      	lsls	r2, r1, #10
 8006138:	4610      	mov	r0, r2
 800613a:	4619      	mov	r1, r3
 800613c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800613e:	2200      	movs	r2, #0
 8006140:	61bb      	str	r3, [r7, #24]
 8006142:	61fa      	str	r2, [r7, #28]
 8006144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006148:	f7fa fdd6 	bl	8000cf8 <__aeabi_uldivmod>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4613      	mov	r3, r2
 8006152:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006154:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <HAL_RCC_GetSysClockFreq+0x200>)
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	0c1b      	lsrs	r3, r3, #16
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	3301      	adds	r3, #1
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006164:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006168:	fbb2 f3f3 	udiv	r3, r2, r3
 800616c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800616e:	e002      	b.n	8006176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006170:	4b05      	ldr	r3, [pc, #20]	; (8006188 <HAL_RCC_GetSysClockFreq+0x204>)
 8006172:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006178:	4618      	mov	r0, r3
 800617a:	3750      	adds	r7, #80	; 0x50
 800617c:	46bd      	mov	sp, r7
 800617e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006182:	bf00      	nop
 8006184:	40023800 	.word	0x40023800
 8006188:	00f42400 	.word	0x00f42400
 800618c:	007a1200 	.word	0x007a1200

08006190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006194:	4b03      	ldr	r3, [pc, #12]	; (80061a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006196:	681b      	ldr	r3, [r3, #0]
}
 8006198:	4618      	mov	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	20000000 	.word	0x20000000

080061a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061ac:	f7ff fff0 	bl	8006190 <HAL_RCC_GetHCLKFreq>
 80061b0:	4602      	mov	r2, r0
 80061b2:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	0a9b      	lsrs	r3, r3, #10
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	4903      	ldr	r1, [pc, #12]	; (80061cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80061be:	5ccb      	ldrb	r3, [r1, r3]
 80061c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40023800 	.word	0x40023800
 80061cc:	0800cad4 	.word	0x0800cad4

080061d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061d4:	f7ff ffdc 	bl	8006190 <HAL_RCC_GetHCLKFreq>
 80061d8:	4602      	mov	r2, r0
 80061da:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	0b5b      	lsrs	r3, r3, #13
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	4903      	ldr	r1, [pc, #12]	; (80061f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061e6:	5ccb      	ldrb	r3, [r1, r3]
 80061e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	40023800 	.word	0x40023800
 80061f4:	0800cad4 	.word	0x0800cad4

080061f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	220f      	movs	r2, #15
 8006206:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006208:	4b12      	ldr	r3, [pc, #72]	; (8006254 <HAL_RCC_GetClockConfig+0x5c>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 0203 	and.w	r2, r3, #3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006214:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <HAL_RCC_GetClockConfig+0x5c>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006220:	4b0c      	ldr	r3, [pc, #48]	; (8006254 <HAL_RCC_GetClockConfig+0x5c>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800622c:	4b09      	ldr	r3, [pc, #36]	; (8006254 <HAL_RCC_GetClockConfig+0x5c>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	08db      	lsrs	r3, r3, #3
 8006232:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800623a:	4b07      	ldr	r3, [pc, #28]	; (8006258 <HAL_RCC_GetClockConfig+0x60>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0207 	and.w	r2, r3, #7
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	601a      	str	r2, [r3, #0]
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40023800 	.word	0x40023800
 8006258:	40023c00 	.word	0x40023c00

0800625c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e041      	b.n	80062f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f839 	bl	80062fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3304      	adds	r3, #4
 8006298:	4619      	mov	r1, r3
 800629a:	4610      	mov	r0, r2
 800629c:	f000 f9ca 	bl	8006634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
	...

08006310 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b01      	cmp	r3, #1
 8006322:	d001      	beq.n	8006328 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e044      	b.n	80063b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0201 	orr.w	r2, r2, #1
 800633e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a1e      	ldr	r2, [pc, #120]	; (80063c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d018      	beq.n	800637c <HAL_TIM_Base_Start_IT+0x6c>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006352:	d013      	beq.n	800637c <HAL_TIM_Base_Start_IT+0x6c>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a1a      	ldr	r2, [pc, #104]	; (80063c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d00e      	beq.n	800637c <HAL_TIM_Base_Start_IT+0x6c>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a19      	ldr	r2, [pc, #100]	; (80063c8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d009      	beq.n	800637c <HAL_TIM_Base_Start_IT+0x6c>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a17      	ldr	r2, [pc, #92]	; (80063cc <HAL_TIM_Base_Start_IT+0xbc>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d004      	beq.n	800637c <HAL_TIM_Base_Start_IT+0x6c>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a16      	ldr	r2, [pc, #88]	; (80063d0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d111      	bne.n	80063a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b06      	cmp	r3, #6
 800638c:	d010      	beq.n	80063b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0201 	orr.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639e:	e007      	b.n	80063b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f042 0201 	orr.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40000400 	.word	0x40000400
 80063c8:	40000800 	.word	0x40000800
 80063cc:	40000c00 	.word	0x40000c00
 80063d0:	40014000 	.word	0x40014000

080063d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d122      	bne.n	8006430 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d11b      	bne.n	8006430 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0202 	mvn.w	r2, #2
 8006400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f8ee 	bl	80065f8 <HAL_TIM_IC_CaptureCallback>
 800641c:	e005      	b.n	800642a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f8e0 	bl	80065e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f8f1 	bl	800660c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0304 	and.w	r3, r3, #4
 800643a:	2b04      	cmp	r3, #4
 800643c:	d122      	bne.n	8006484 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b04      	cmp	r3, #4
 800644a:	d11b      	bne.n	8006484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f06f 0204 	mvn.w	r2, #4
 8006454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2202      	movs	r2, #2
 800645a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f8c4 	bl	80065f8 <HAL_TIM_IC_CaptureCallback>
 8006470:	e005      	b.n	800647e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f8b6 	bl	80065e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f8c7 	bl	800660c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f003 0308 	and.w	r3, r3, #8
 800648e:	2b08      	cmp	r3, #8
 8006490:	d122      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f003 0308 	and.w	r3, r3, #8
 800649c:	2b08      	cmp	r3, #8
 800649e:	d11b      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f06f 0208 	mvn.w	r2, #8
 80064a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2204      	movs	r2, #4
 80064ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f89a 	bl	80065f8 <HAL_TIM_IC_CaptureCallback>
 80064c4:	e005      	b.n	80064d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f88c 	bl	80065e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f89d 	bl	800660c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b10      	cmp	r3, #16
 80064e4:	d122      	bne.n	800652c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0310 	and.w	r3, r3, #16
 80064f0:	2b10      	cmp	r3, #16
 80064f2:	d11b      	bne.n	800652c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0210 	mvn.w	r2, #16
 80064fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2208      	movs	r2, #8
 8006502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f870 	bl	80065f8 <HAL_TIM_IC_CaptureCallback>
 8006518:	e005      	b.n	8006526 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f862 	bl	80065e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f873 	bl	800660c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b01      	cmp	r3, #1
 8006538:	d10e      	bne.n	8006558 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b01      	cmp	r3, #1
 8006546:	d107      	bne.n	8006558 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0201 	mvn.w	r2, #1
 8006550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7fc f80c 	bl	8002570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006562:	2b80      	cmp	r3, #128	; 0x80
 8006564:	d10e      	bne.n	8006584 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006570:	2b80      	cmp	r3, #128	; 0x80
 8006572:	d107      	bne.n	8006584 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800657c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f8e2 	bl	8006748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658e:	2b40      	cmp	r3, #64	; 0x40
 8006590:	d10e      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659c:	2b40      	cmp	r3, #64	; 0x40
 800659e:	d107      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f838 	bl	8006620 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f003 0320 	and.w	r3, r3, #32
 80065ba:	2b20      	cmp	r3, #32
 80065bc:	d10e      	bne.n	80065dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f003 0320 	and.w	r3, r3, #32
 80065c8:	2b20      	cmp	r3, #32
 80065ca:	d107      	bne.n	80065dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0220 	mvn.w	r2, #32
 80065d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f8ac 	bl	8006734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065dc:	bf00      	nop
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a34      	ldr	r2, [pc, #208]	; (8006718 <TIM_Base_SetConfig+0xe4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00f      	beq.n	800666c <TIM_Base_SetConfig+0x38>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006652:	d00b      	beq.n	800666c <TIM_Base_SetConfig+0x38>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a31      	ldr	r2, [pc, #196]	; (800671c <TIM_Base_SetConfig+0xe8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d007      	beq.n	800666c <TIM_Base_SetConfig+0x38>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a30      	ldr	r2, [pc, #192]	; (8006720 <TIM_Base_SetConfig+0xec>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d003      	beq.n	800666c <TIM_Base_SetConfig+0x38>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a2f      	ldr	r2, [pc, #188]	; (8006724 <TIM_Base_SetConfig+0xf0>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d108      	bne.n	800667e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a25      	ldr	r2, [pc, #148]	; (8006718 <TIM_Base_SetConfig+0xe4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d01b      	beq.n	80066be <TIM_Base_SetConfig+0x8a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668c:	d017      	beq.n	80066be <TIM_Base_SetConfig+0x8a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a22      	ldr	r2, [pc, #136]	; (800671c <TIM_Base_SetConfig+0xe8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d013      	beq.n	80066be <TIM_Base_SetConfig+0x8a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a21      	ldr	r2, [pc, #132]	; (8006720 <TIM_Base_SetConfig+0xec>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00f      	beq.n	80066be <TIM_Base_SetConfig+0x8a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a20      	ldr	r2, [pc, #128]	; (8006724 <TIM_Base_SetConfig+0xf0>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00b      	beq.n	80066be <TIM_Base_SetConfig+0x8a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a1f      	ldr	r2, [pc, #124]	; (8006728 <TIM_Base_SetConfig+0xf4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d007      	beq.n	80066be <TIM_Base_SetConfig+0x8a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a1e      	ldr	r2, [pc, #120]	; (800672c <TIM_Base_SetConfig+0xf8>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d003      	beq.n	80066be <TIM_Base_SetConfig+0x8a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a1d      	ldr	r2, [pc, #116]	; (8006730 <TIM_Base_SetConfig+0xfc>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d108      	bne.n	80066d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a08      	ldr	r2, [pc, #32]	; (8006718 <TIM_Base_SetConfig+0xe4>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d103      	bne.n	8006704 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	691a      	ldr	r2, [r3, #16]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	615a      	str	r2, [r3, #20]
}
 800670a:	bf00      	nop
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	40010000 	.word	0x40010000
 800671c:	40000400 	.word	0x40000400
 8006720:	40000800 	.word	0x40000800
 8006724:	40000c00 	.word	0x40000c00
 8006728:	40014000 	.word	0x40014000
 800672c:	40014400 	.word	0x40014400
 8006730:	40014800 	.word	0x40014800

08006734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e03f      	b.n	80067ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d106      	bne.n	8006788 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7fb fff8 	bl	8002778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2224      	movs	r2, #36	; 0x24
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800679e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f829 	bl	80067f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	695a      	ldr	r2, [r3, #20]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2220      	movs	r2, #32
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067fc:	b0c0      	sub	sp, #256	; 0x100
 80067fe:	af00      	add	r7, sp, #0
 8006800:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006814:	68d9      	ldr	r1, [r3, #12]
 8006816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	ea40 0301 	orr.w	r3, r0, r1
 8006820:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	431a      	orrs	r2, r3
 8006830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	431a      	orrs	r2, r3
 8006838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	4313      	orrs	r3, r2
 8006840:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006850:	f021 010c 	bic.w	r1, r1, #12
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800685e:	430b      	orrs	r3, r1
 8006860:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800686e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006872:	6999      	ldr	r1, [r3, #24]
 8006874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	ea40 0301 	orr.w	r3, r0, r1
 800687e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	4b8f      	ldr	r3, [pc, #572]	; (8006ac4 <UART_SetConfig+0x2cc>)
 8006888:	429a      	cmp	r2, r3
 800688a:	d005      	beq.n	8006898 <UART_SetConfig+0xa0>
 800688c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	4b8d      	ldr	r3, [pc, #564]	; (8006ac8 <UART_SetConfig+0x2d0>)
 8006894:	429a      	cmp	r2, r3
 8006896:	d104      	bne.n	80068a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006898:	f7ff fc9a 	bl	80061d0 <HAL_RCC_GetPCLK2Freq>
 800689c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80068a0:	e003      	b.n	80068aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068a2:	f7ff fc81 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 80068a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b4:	f040 810c 	bne.w	8006ad0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068bc:	2200      	movs	r2, #0
 80068be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80068c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80068ca:	4622      	mov	r2, r4
 80068cc:	462b      	mov	r3, r5
 80068ce:	1891      	adds	r1, r2, r2
 80068d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80068d2:	415b      	adcs	r3, r3
 80068d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068da:	4621      	mov	r1, r4
 80068dc:	eb12 0801 	adds.w	r8, r2, r1
 80068e0:	4629      	mov	r1, r5
 80068e2:	eb43 0901 	adc.w	r9, r3, r1
 80068e6:	f04f 0200 	mov.w	r2, #0
 80068ea:	f04f 0300 	mov.w	r3, #0
 80068ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068fa:	4690      	mov	r8, r2
 80068fc:	4699      	mov	r9, r3
 80068fe:	4623      	mov	r3, r4
 8006900:	eb18 0303 	adds.w	r3, r8, r3
 8006904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006908:	462b      	mov	r3, r5
 800690a:	eb49 0303 	adc.w	r3, r9, r3
 800690e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800691e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006922:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006926:	460b      	mov	r3, r1
 8006928:	18db      	adds	r3, r3, r3
 800692a:	653b      	str	r3, [r7, #80]	; 0x50
 800692c:	4613      	mov	r3, r2
 800692e:	eb42 0303 	adc.w	r3, r2, r3
 8006932:	657b      	str	r3, [r7, #84]	; 0x54
 8006934:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006938:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800693c:	f7fa f9dc 	bl	8000cf8 <__aeabi_uldivmod>
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	4b61      	ldr	r3, [pc, #388]	; (8006acc <UART_SetConfig+0x2d4>)
 8006946:	fba3 2302 	umull	r2, r3, r3, r2
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	011c      	lsls	r4, r3, #4
 800694e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006952:	2200      	movs	r2, #0
 8006954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006958:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800695c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006960:	4642      	mov	r2, r8
 8006962:	464b      	mov	r3, r9
 8006964:	1891      	adds	r1, r2, r2
 8006966:	64b9      	str	r1, [r7, #72]	; 0x48
 8006968:	415b      	adcs	r3, r3
 800696a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800696c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006970:	4641      	mov	r1, r8
 8006972:	eb12 0a01 	adds.w	sl, r2, r1
 8006976:	4649      	mov	r1, r9
 8006978:	eb43 0b01 	adc.w	fp, r3, r1
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006988:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800698c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006990:	4692      	mov	sl, r2
 8006992:	469b      	mov	fp, r3
 8006994:	4643      	mov	r3, r8
 8006996:	eb1a 0303 	adds.w	r3, sl, r3
 800699a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800699e:	464b      	mov	r3, r9
 80069a0:	eb4b 0303 	adc.w	r3, fp, r3
 80069a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80069b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80069bc:	460b      	mov	r3, r1
 80069be:	18db      	adds	r3, r3, r3
 80069c0:	643b      	str	r3, [r7, #64]	; 0x40
 80069c2:	4613      	mov	r3, r2
 80069c4:	eb42 0303 	adc.w	r3, r2, r3
 80069c8:	647b      	str	r3, [r7, #68]	; 0x44
 80069ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80069d2:	f7fa f991 	bl	8000cf8 <__aeabi_uldivmod>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	4611      	mov	r1, r2
 80069dc:	4b3b      	ldr	r3, [pc, #236]	; (8006acc <UART_SetConfig+0x2d4>)
 80069de:	fba3 2301 	umull	r2, r3, r3, r1
 80069e2:	095b      	lsrs	r3, r3, #5
 80069e4:	2264      	movs	r2, #100	; 0x64
 80069e6:	fb02 f303 	mul.w	r3, r2, r3
 80069ea:	1acb      	subs	r3, r1, r3
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069f2:	4b36      	ldr	r3, [pc, #216]	; (8006acc <UART_SetConfig+0x2d4>)
 80069f4:	fba3 2302 	umull	r2, r3, r3, r2
 80069f8:	095b      	lsrs	r3, r3, #5
 80069fa:	005b      	lsls	r3, r3, #1
 80069fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a00:	441c      	add	r4, r3
 8006a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a14:	4642      	mov	r2, r8
 8006a16:	464b      	mov	r3, r9
 8006a18:	1891      	adds	r1, r2, r2
 8006a1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a1c:	415b      	adcs	r3, r3
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a24:	4641      	mov	r1, r8
 8006a26:	1851      	adds	r1, r2, r1
 8006a28:	6339      	str	r1, [r7, #48]	; 0x30
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	414b      	adcs	r3, r1
 8006a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a30:	f04f 0200 	mov.w	r2, #0
 8006a34:	f04f 0300 	mov.w	r3, #0
 8006a38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a3c:	4659      	mov	r1, fp
 8006a3e:	00cb      	lsls	r3, r1, #3
 8006a40:	4651      	mov	r1, sl
 8006a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a46:	4651      	mov	r1, sl
 8006a48:	00ca      	lsls	r2, r1, #3
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4603      	mov	r3, r0
 8006a50:	4642      	mov	r2, r8
 8006a52:	189b      	adds	r3, r3, r2
 8006a54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a58:	464b      	mov	r3, r9
 8006a5a:	460a      	mov	r2, r1
 8006a5c:	eb42 0303 	adc.w	r3, r2, r3
 8006a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a78:	460b      	mov	r3, r1
 8006a7a:	18db      	adds	r3, r3, r3
 8006a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a7e:	4613      	mov	r3, r2
 8006a80:	eb42 0303 	adc.w	r3, r2, r3
 8006a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a8e:	f7fa f933 	bl	8000cf8 <__aeabi_uldivmod>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <UART_SetConfig+0x2d4>)
 8006a98:	fba3 1302 	umull	r1, r3, r3, r2
 8006a9c:	095b      	lsrs	r3, r3, #5
 8006a9e:	2164      	movs	r1, #100	; 0x64
 8006aa0:	fb01 f303 	mul.w	r3, r1, r3
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	00db      	lsls	r3, r3, #3
 8006aa8:	3332      	adds	r3, #50	; 0x32
 8006aaa:	4a08      	ldr	r2, [pc, #32]	; (8006acc <UART_SetConfig+0x2d4>)
 8006aac:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab0:	095b      	lsrs	r3, r3, #5
 8006ab2:	f003 0207 	and.w	r2, r3, #7
 8006ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4422      	add	r2, r4
 8006abe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ac0:	e105      	b.n	8006cce <UART_SetConfig+0x4d6>
 8006ac2:	bf00      	nop
 8006ac4:	40011000 	.word	0x40011000
 8006ac8:	40011400 	.word	0x40011400
 8006acc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ad0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ada:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ade:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ae2:	4642      	mov	r2, r8
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	1891      	adds	r1, r2, r2
 8006ae8:	6239      	str	r1, [r7, #32]
 8006aea:	415b      	adcs	r3, r3
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
 8006aee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006af2:	4641      	mov	r1, r8
 8006af4:	1854      	adds	r4, r2, r1
 8006af6:	4649      	mov	r1, r9
 8006af8:	eb43 0501 	adc.w	r5, r3, r1
 8006afc:	f04f 0200 	mov.w	r2, #0
 8006b00:	f04f 0300 	mov.w	r3, #0
 8006b04:	00eb      	lsls	r3, r5, #3
 8006b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b0a:	00e2      	lsls	r2, r4, #3
 8006b0c:	4614      	mov	r4, r2
 8006b0e:	461d      	mov	r5, r3
 8006b10:	4643      	mov	r3, r8
 8006b12:	18e3      	adds	r3, r4, r3
 8006b14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b18:	464b      	mov	r3, r9
 8006b1a:	eb45 0303 	adc.w	r3, r5, r3
 8006b1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b32:	f04f 0200 	mov.w	r2, #0
 8006b36:	f04f 0300 	mov.w	r3, #0
 8006b3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b3e:	4629      	mov	r1, r5
 8006b40:	008b      	lsls	r3, r1, #2
 8006b42:	4621      	mov	r1, r4
 8006b44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b48:	4621      	mov	r1, r4
 8006b4a:	008a      	lsls	r2, r1, #2
 8006b4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b50:	f7fa f8d2 	bl	8000cf8 <__aeabi_uldivmod>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4b60      	ldr	r3, [pc, #384]	; (8006cdc <UART_SetConfig+0x4e4>)
 8006b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b5e:	095b      	lsrs	r3, r3, #5
 8006b60:	011c      	lsls	r4, r3, #4
 8006b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b74:	4642      	mov	r2, r8
 8006b76:	464b      	mov	r3, r9
 8006b78:	1891      	adds	r1, r2, r2
 8006b7a:	61b9      	str	r1, [r7, #24]
 8006b7c:	415b      	adcs	r3, r3
 8006b7e:	61fb      	str	r3, [r7, #28]
 8006b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b84:	4641      	mov	r1, r8
 8006b86:	1851      	adds	r1, r2, r1
 8006b88:	6139      	str	r1, [r7, #16]
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	414b      	adcs	r3, r1
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	f04f 0300 	mov.w	r3, #0
 8006b98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b9c:	4659      	mov	r1, fp
 8006b9e:	00cb      	lsls	r3, r1, #3
 8006ba0:	4651      	mov	r1, sl
 8006ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ba6:	4651      	mov	r1, sl
 8006ba8:	00ca      	lsls	r2, r1, #3
 8006baa:	4610      	mov	r0, r2
 8006bac:	4619      	mov	r1, r3
 8006bae:	4603      	mov	r3, r0
 8006bb0:	4642      	mov	r2, r8
 8006bb2:	189b      	adds	r3, r3, r2
 8006bb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bb8:	464b      	mov	r3, r9
 8006bba:	460a      	mov	r2, r1
 8006bbc:	eb42 0303 	adc.w	r3, r2, r3
 8006bc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006bd0:	f04f 0200 	mov.w	r2, #0
 8006bd4:	f04f 0300 	mov.w	r3, #0
 8006bd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006bdc:	4649      	mov	r1, r9
 8006bde:	008b      	lsls	r3, r1, #2
 8006be0:	4641      	mov	r1, r8
 8006be2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006be6:	4641      	mov	r1, r8
 8006be8:	008a      	lsls	r2, r1, #2
 8006bea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006bee:	f7fa f883 	bl	8000cf8 <__aeabi_uldivmod>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	4b39      	ldr	r3, [pc, #228]	; (8006cdc <UART_SetConfig+0x4e4>)
 8006bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8006bfc:	095b      	lsrs	r3, r3, #5
 8006bfe:	2164      	movs	r1, #100	; 0x64
 8006c00:	fb01 f303 	mul.w	r3, r1, r3
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	3332      	adds	r3, #50	; 0x32
 8006c0a:	4a34      	ldr	r2, [pc, #208]	; (8006cdc <UART_SetConfig+0x4e4>)
 8006c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c10:	095b      	lsrs	r3, r3, #5
 8006c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c16:	441c      	add	r4, r3
 8006c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	673b      	str	r3, [r7, #112]	; 0x70
 8006c20:	677a      	str	r2, [r7, #116]	; 0x74
 8006c22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c26:	4642      	mov	r2, r8
 8006c28:	464b      	mov	r3, r9
 8006c2a:	1891      	adds	r1, r2, r2
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	415b      	adcs	r3, r3
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c36:	4641      	mov	r1, r8
 8006c38:	1851      	adds	r1, r2, r1
 8006c3a:	6039      	str	r1, [r7, #0]
 8006c3c:	4649      	mov	r1, r9
 8006c3e:	414b      	adcs	r3, r1
 8006c40:	607b      	str	r3, [r7, #4]
 8006c42:	f04f 0200 	mov.w	r2, #0
 8006c46:	f04f 0300 	mov.w	r3, #0
 8006c4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c4e:	4659      	mov	r1, fp
 8006c50:	00cb      	lsls	r3, r1, #3
 8006c52:	4651      	mov	r1, sl
 8006c54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c58:	4651      	mov	r1, sl
 8006c5a:	00ca      	lsls	r2, r1, #3
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4603      	mov	r3, r0
 8006c62:	4642      	mov	r2, r8
 8006c64:	189b      	adds	r3, r3, r2
 8006c66:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c68:	464b      	mov	r3, r9
 8006c6a:	460a      	mov	r2, r1
 8006c6c:	eb42 0303 	adc.w	r3, r2, r3
 8006c70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	663b      	str	r3, [r7, #96]	; 0x60
 8006c7c:	667a      	str	r2, [r7, #100]	; 0x64
 8006c7e:	f04f 0200 	mov.w	r2, #0
 8006c82:	f04f 0300 	mov.w	r3, #0
 8006c86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	008b      	lsls	r3, r1, #2
 8006c8e:	4641      	mov	r1, r8
 8006c90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c94:	4641      	mov	r1, r8
 8006c96:	008a      	lsls	r2, r1, #2
 8006c98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c9c:	f7fa f82c 	bl	8000cf8 <__aeabi_uldivmod>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4b0d      	ldr	r3, [pc, #52]	; (8006cdc <UART_SetConfig+0x4e4>)
 8006ca6:	fba3 1302 	umull	r1, r3, r3, r2
 8006caa:	095b      	lsrs	r3, r3, #5
 8006cac:	2164      	movs	r1, #100	; 0x64
 8006cae:	fb01 f303 	mul.w	r3, r1, r3
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	3332      	adds	r3, #50	; 0x32
 8006cb8:	4a08      	ldr	r2, [pc, #32]	; (8006cdc <UART_SetConfig+0x4e4>)
 8006cba:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbe:	095b      	lsrs	r3, r3, #5
 8006cc0:	f003 020f 	and.w	r2, r3, #15
 8006cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4422      	add	r2, r4
 8006ccc:	609a      	str	r2, [r3, #8]
}
 8006cce:	bf00      	nop
 8006cd0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cda:	bf00      	nop
 8006cdc:	51eb851f 	.word	0x51eb851f

08006ce0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cf2:	2b84      	cmp	r3, #132	; 0x84
 8006cf4:	d005      	beq.n	8006d02 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006cf6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	3303      	adds	r3, #3
 8006d00:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006d02:	68fb      	ldr	r3, [r7, #12]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006d14:	f001 f926 	bl	8007f64 <vTaskStartScheduler>
  
  return osOK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d20:	b089      	sub	sp, #36	; 0x24
 8006d22:	af04      	add	r7, sp, #16
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d020      	beq.n	8006d72 <osThreadCreate+0x54>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d01c      	beq.n	8006d72 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685c      	ldr	r4, [r3, #4]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681d      	ldr	r5, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691e      	ldr	r6, [r3, #16]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7ff ffc8 	bl	8006ce0 <makeFreeRtosPriority>
 8006d50:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d5a:	9202      	str	r2, [sp, #8]
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	9100      	str	r1, [sp, #0]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	4632      	mov	r2, r6
 8006d64:	4629      	mov	r1, r5
 8006d66:	4620      	mov	r0, r4
 8006d68:	f000 ff34 	bl	8007bd4 <xTaskCreateStatic>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	e01c      	b.n	8006dac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685c      	ldr	r4, [r3, #4]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d7e:	b29e      	uxth	r6, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7ff ffaa 	bl	8006ce0 <makeFreeRtosPriority>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	f107 030c 	add.w	r3, r7, #12
 8006d92:	9301      	str	r3, [sp, #4]
 8006d94:	9200      	str	r2, [sp, #0]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	4632      	mov	r2, r6
 8006d9a:	4629      	mov	r1, r5
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f000 ff76 	bl	8007c8e <xTaskCreate>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d001      	beq.n	8006dac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006da8:	2300      	movs	r3, #0
 8006daa:	e000      	b.n	8006dae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006dac:	68fb      	ldr	r3, [r7, #12]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006db6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <osDelay+0x16>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	e000      	b.n	8006dce <osDelay+0x18>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f001 f894 	bl	8007efc <vTaskDelay>
  
  return osOK;
 8006dd4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f103 0208 	add.w	r2, r3, #8
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f04f 32ff 	mov.w	r2, #4294967295
 8006df6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f103 0208 	add.w	r2, r3, #8
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f103 0208 	add.w	r2, r3, #8
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e12:	bf00      	nop
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	689a      	ldr	r2, [r3, #8]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	1c5a      	adds	r2, r3, #1
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	601a      	str	r2, [r3, #0]
}
 8006e74:	bf00      	nop
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e96:	d103      	bne.n	8006ea0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	e00c      	b.n	8006eba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3308      	adds	r3, #8
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	e002      	b.n	8006eae <vListInsert+0x2e>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d2f6      	bcs.n	8006ea8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	601a      	str	r2, [r3, #0]
}
 8006ee6:	bf00      	nop
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b085      	sub	sp, #20
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6892      	ldr	r2, [r2, #8]
 8006f08:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	6852      	ldr	r2, [r2, #4]
 8006f12:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d103      	bne.n	8006f26 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689a      	ldr	r2, [r3, #8]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	1e5a      	subs	r2, r3, #1
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
	...

08006f48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10a      	bne.n	8006f72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f6e:	bf00      	nop
 8006f70:	e7fe      	b.n	8006f70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006f72:	f002 fab7 	bl	80094e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7e:	68f9      	ldr	r1, [r7, #12]
 8006f80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f82:	fb01 f303 	mul.w	r3, r1, r3
 8006f86:	441a      	add	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	68f9      	ldr	r1, [r7, #12]
 8006fa6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006fa8:	fb01 f303 	mul.w	r3, r1, r3
 8006fac:	441a      	add	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	22ff      	movs	r2, #255	; 0xff
 8006fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	22ff      	movs	r2, #255	; 0xff
 8006fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d114      	bne.n	8006ff2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d01a      	beq.n	8007006 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3310      	adds	r3, #16
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f001 fa49 	bl	800846c <xTaskRemoveFromEventList>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d012      	beq.n	8007006 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006fe0:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <xQueueGenericReset+0xcc>)
 8006fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	e009      	b.n	8007006 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3310      	adds	r3, #16
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff fef1 	bl	8006dde <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3324      	adds	r3, #36	; 0x24
 8007000:	4618      	mov	r0, r3
 8007002:	f7ff feec 	bl	8006dde <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007006:	f002 fa9d 	bl	8009544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800700a:	2301      	movs	r3, #1
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	e000ed04 	.word	0xe000ed04

08007018 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08e      	sub	sp, #56	; 0x38
 800701c:	af02      	add	r7, sp, #8
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
}
 800705a:	bf00      	nop
 800705c:	e7fe      	b.n	800705c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <xQueueGenericCreateStatic+0x52>
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <xQueueGenericCreateStatic+0x56>
 800706a:	2301      	movs	r3, #1
 800706c:	e000      	b.n	8007070 <xQueueGenericCreateStatic+0x58>
 800706e:	2300      	movs	r3, #0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10a      	bne.n	800708a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	623b      	str	r3, [r7, #32]
}
 8007086:	bf00      	nop
 8007088:	e7fe      	b.n	8007088 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d102      	bne.n	8007096 <xQueueGenericCreateStatic+0x7e>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <xQueueGenericCreateStatic+0x82>
 8007096:	2301      	movs	r3, #1
 8007098:	e000      	b.n	800709c <xQueueGenericCreateStatic+0x84>
 800709a:	2300      	movs	r3, #0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10a      	bne.n	80070b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	61fb      	str	r3, [r7, #28]
}
 80070b2:	bf00      	nop
 80070b4:	e7fe      	b.n	80070b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80070b6:	2348      	movs	r3, #72	; 0x48
 80070b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2b48      	cmp	r3, #72	; 0x48
 80070be:	d00a      	beq.n	80070d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	61bb      	str	r3, [r7, #24]
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80070d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80070dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00d      	beq.n	80070fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80070e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	4613      	mov	r3, r2
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	68b9      	ldr	r1, [r7, #8]
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f000 f83f 	bl	800717c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007100:	4618      	mov	r0, r3
 8007102:	3730      	adds	r7, #48	; 0x30
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007108:	b580      	push	{r7, lr}
 800710a:	b08a      	sub	sp, #40	; 0x28
 800710c:	af02      	add	r7, sp, #8
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	4613      	mov	r3, r2
 8007114:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10a      	bne.n	8007132 <xQueueGenericCreate+0x2a>
	__asm volatile
 800711c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	613b      	str	r3, [r7, #16]
}
 800712e:	bf00      	nop
 8007130:	e7fe      	b.n	8007130 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	fb02 f303 	mul.w	r3, r2, r3
 800713a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	3348      	adds	r3, #72	; 0x48
 8007140:	4618      	mov	r0, r3
 8007142:	f002 faf1 	bl	8009728 <pvPortMalloc>
 8007146:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d011      	beq.n	8007172 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	3348      	adds	r3, #72	; 0x48
 8007156:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007160:	79fa      	ldrb	r2, [r7, #7]
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	4613      	mov	r3, r2
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	68b9      	ldr	r1, [r7, #8]
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 f805 	bl	800717c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007172:	69bb      	ldr	r3, [r7, #24]
	}
 8007174:	4618      	mov	r0, r3
 8007176:	3720      	adds	r7, #32
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d103      	bne.n	8007198 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	e002      	b.n	800719e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80071aa:	2101      	movs	r1, #1
 80071ac:	69b8      	ldr	r0, [r7, #24]
 80071ae:	f7ff fecb 	bl	8006f48 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80071b2:	bf00      	nop
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08e      	sub	sp, #56	; 0x38
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80071ca:	2300      	movs	r3, #0
 80071cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <xQueueGenericSend+0x32>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d103      	bne.n	80071fc <xQueueGenericSend+0x40>
 80071f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <xQueueGenericSend+0x44>
 80071fc:	2301      	movs	r3, #1
 80071fe:	e000      	b.n	8007202 <xQueueGenericSend+0x46>
 8007200:	2300      	movs	r3, #0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <xQueueGenericSend+0x60>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007218:	bf00      	nop
 800721a:	e7fe      	b.n	800721a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2b02      	cmp	r3, #2
 8007220:	d103      	bne.n	800722a <xQueueGenericSend+0x6e>
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007226:	2b01      	cmp	r3, #1
 8007228:	d101      	bne.n	800722e <xQueueGenericSend+0x72>
 800722a:	2301      	movs	r3, #1
 800722c:	e000      	b.n	8007230 <xQueueGenericSend+0x74>
 800722e:	2300      	movs	r3, #0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10a      	bne.n	800724a <xQueueGenericSend+0x8e>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	623b      	str	r3, [r7, #32]
}
 8007246:	bf00      	nop
 8007248:	e7fe      	b.n	8007248 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800724a:	f001 facb 	bl	80087e4 <xTaskGetSchedulerState>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d102      	bne.n	800725a <xQueueGenericSend+0x9e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <xQueueGenericSend+0xa2>
 800725a:	2301      	movs	r3, #1
 800725c:	e000      	b.n	8007260 <xQueueGenericSend+0xa4>
 800725e:	2300      	movs	r3, #0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10a      	bne.n	800727a <xQueueGenericSend+0xbe>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	61fb      	str	r3, [r7, #28]
}
 8007276:	bf00      	nop
 8007278:	e7fe      	b.n	8007278 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800727a:	f002 f933 	bl	80094e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007286:	429a      	cmp	r2, r3
 8007288:	d302      	bcc.n	8007290 <xQueueGenericSend+0xd4>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b02      	cmp	r3, #2
 800728e:	d129      	bne.n	80072e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	68b9      	ldr	r1, [r7, #8]
 8007294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007296:	f000 fb2f 	bl	80078f8 <prvCopyDataToQueue>
 800729a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800729c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d010      	beq.n	80072c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a6:	3324      	adds	r3, #36	; 0x24
 80072a8:	4618      	mov	r0, r3
 80072aa:	f001 f8df 	bl	800846c <xTaskRemoveFromEventList>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d013      	beq.n	80072dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80072b4:	4b3f      	ldr	r3, [pc, #252]	; (80073b4 <xQueueGenericSend+0x1f8>)
 80072b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	e00a      	b.n	80072dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80072c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d007      	beq.n	80072dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80072cc:	4b39      	ldr	r3, [pc, #228]	; (80073b4 <xQueueGenericSend+0x1f8>)
 80072ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80072dc:	f002 f932 	bl	8009544 <vPortExitCritical>
				return pdPASS;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e063      	b.n	80073ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d103      	bne.n	80072f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072ea:	f002 f92b 	bl	8009544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	e05c      	b.n	80073ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d106      	bne.n	8007306 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072f8:	f107 0314 	add.w	r3, r7, #20
 80072fc:	4618      	mov	r0, r3
 80072fe:	f001 f917 	bl	8008530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007302:	2301      	movs	r3, #1
 8007304:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007306:	f002 f91d 	bl	8009544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800730a:	f000 fe91 	bl	8008030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800730e:	f002 f8e9 	bl	80094e4 <vPortEnterCritical>
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007318:	b25b      	sxtb	r3, r3
 800731a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731e:	d103      	bne.n	8007328 <xQueueGenericSend+0x16c>
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800732e:	b25b      	sxtb	r3, r3
 8007330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007334:	d103      	bne.n	800733e <xQueueGenericSend+0x182>
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800733e:	f002 f901 	bl	8009544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007342:	1d3a      	adds	r2, r7, #4
 8007344:	f107 0314 	add.w	r3, r7, #20
 8007348:	4611      	mov	r1, r2
 800734a:	4618      	mov	r0, r3
 800734c:	f001 f906 	bl	800855c <xTaskCheckForTimeOut>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d124      	bne.n	80073a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007358:	f000 fbc6 	bl	8007ae8 <prvIsQueueFull>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d018      	beq.n	8007394 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	3310      	adds	r3, #16
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	4611      	mov	r1, r2
 800736a:	4618      	mov	r0, r3
 800736c:	f001 f82e 	bl	80083cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007372:	f000 fb51 	bl	8007a18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007376:	f000 fe69 	bl	800804c <xTaskResumeAll>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	f47f af7c 	bne.w	800727a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007382:	4b0c      	ldr	r3, [pc, #48]	; (80073b4 <xQueueGenericSend+0x1f8>)
 8007384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	e772      	b.n	800727a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007396:	f000 fb3f 	bl	8007a18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800739a:	f000 fe57 	bl	800804c <xTaskResumeAll>
 800739e:	e76c      	b.n	800727a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80073a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073a2:	f000 fb39 	bl	8007a18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073a6:	f000 fe51 	bl	800804c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80073aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3738      	adds	r7, #56	; 0x38
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	e000ed04 	.word	0xe000ed04

080073b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b090      	sub	sp, #64	; 0x40
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
 80073c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80073ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d103      	bne.n	80073f4 <xQueueGenericSendFromISR+0x3c>
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <xQueueGenericSendFromISR+0x40>
 80073f4:	2301      	movs	r3, #1
 80073f6:	e000      	b.n	80073fa <xQueueGenericSendFromISR+0x42>
 80073f8:	2300      	movs	r3, #0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10a      	bne.n	8007414 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007410:	bf00      	nop
 8007412:	e7fe      	b.n	8007412 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d103      	bne.n	8007422 <xQueueGenericSendFromISR+0x6a>
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <xQueueGenericSendFromISR+0x6e>
 8007422:	2301      	movs	r3, #1
 8007424:	e000      	b.n	8007428 <xQueueGenericSendFromISR+0x70>
 8007426:	2300      	movs	r3, #0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10a      	bne.n	8007442 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	623b      	str	r3, [r7, #32]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007442:	f002 f931 	bl	80096a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007446:	f3ef 8211 	mrs	r2, BASEPRI
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	61fa      	str	r2, [r7, #28]
 800745c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800745e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007460:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746a:	429a      	cmp	r2, r3
 800746c:	d302      	bcc.n	8007474 <xQueueGenericSendFromISR+0xbc>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b02      	cmp	r3, #2
 8007472:	d12f      	bne.n	80074d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007476:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800747a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007482:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	68b9      	ldr	r1, [r7, #8]
 8007488:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800748a:	f000 fa35 	bl	80078f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800748e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007496:	d112      	bne.n	80074be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	2b00      	cmp	r3, #0
 800749e:	d016      	beq.n	80074ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a2:	3324      	adds	r3, #36	; 0x24
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 ffe1 	bl	800846c <xTaskRemoveFromEventList>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00e      	beq.n	80074ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00b      	beq.n	80074ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	e007      	b.n	80074ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80074c2:	3301      	adds	r3, #1
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	b25a      	sxtb	r2, r3
 80074c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80074ce:	2301      	movs	r3, #1
 80074d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80074d2:	e001      	b.n	80074d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80074e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3740      	adds	r7, #64	; 0x40
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
	...

080074f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08c      	sub	sp, #48	; 0x30
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80074fc:	2300      	movs	r3, #0
 80074fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <xQueueReceive+0x30>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	623b      	str	r3, [r7, #32]
}
 800751c:	bf00      	nop
 800751e:	e7fe      	b.n	800751e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d103      	bne.n	800752e <xQueueReceive+0x3e>
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	2b00      	cmp	r3, #0
 800752c:	d101      	bne.n	8007532 <xQueueReceive+0x42>
 800752e:	2301      	movs	r3, #1
 8007530:	e000      	b.n	8007534 <xQueueReceive+0x44>
 8007532:	2300      	movs	r3, #0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10a      	bne.n	800754e <xQueueReceive+0x5e>
	__asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	61fb      	str	r3, [r7, #28]
}
 800754a:	bf00      	nop
 800754c:	e7fe      	b.n	800754c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800754e:	f001 f949 	bl	80087e4 <xTaskGetSchedulerState>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d102      	bne.n	800755e <xQueueReceive+0x6e>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <xQueueReceive+0x72>
 800755e:	2301      	movs	r3, #1
 8007560:	e000      	b.n	8007564 <xQueueReceive+0x74>
 8007562:	2300      	movs	r3, #0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10a      	bne.n	800757e <xQueueReceive+0x8e>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	61bb      	str	r3, [r7, #24]
}
 800757a:	bf00      	nop
 800757c:	e7fe      	b.n	800757c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800757e:	f001 ffb1 	bl	80094e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007586:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	2b00      	cmp	r3, #0
 800758c:	d01f      	beq.n	80075ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800758e:	68b9      	ldr	r1, [r7, #8]
 8007590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007592:	f000 fa1b 	bl	80079cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007598:	1e5a      	subs	r2, r3, #1
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00f      	beq.n	80075c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a8:	3310      	adds	r3, #16
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 ff5e 	bl	800846c <xTaskRemoveFromEventList>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d007      	beq.n	80075c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80075b6:	4b3d      	ldr	r3, [pc, #244]	; (80076ac <xQueueReceive+0x1bc>)
 80075b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80075c6:	f001 ffbd 	bl	8009544 <vPortExitCritical>
				return pdPASS;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e069      	b.n	80076a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d103      	bne.n	80075dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075d4:	f001 ffb6 	bl	8009544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80075d8:	2300      	movs	r3, #0
 80075da:	e062      	b.n	80076a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075e2:	f107 0310 	add.w	r3, r7, #16
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 ffa2 	bl	8008530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075ec:	2301      	movs	r3, #1
 80075ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075f0:	f001 ffa8 	bl	8009544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075f4:	f000 fd1c 	bl	8008030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075f8:	f001 ff74 	bl	80094e4 <vPortEnterCritical>
 80075fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007602:	b25b      	sxtb	r3, r3
 8007604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007608:	d103      	bne.n	8007612 <xQueueReceive+0x122>
 800760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007618:	b25b      	sxtb	r3, r3
 800761a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761e:	d103      	bne.n	8007628 <xQueueReceive+0x138>
 8007620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007628:	f001 ff8c 	bl	8009544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800762c:	1d3a      	adds	r2, r7, #4
 800762e:	f107 0310 	add.w	r3, r7, #16
 8007632:	4611      	mov	r1, r2
 8007634:	4618      	mov	r0, r3
 8007636:	f000 ff91 	bl	800855c <xTaskCheckForTimeOut>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d123      	bne.n	8007688 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007642:	f000 fa3b 	bl	8007abc <prvIsQueueEmpty>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d017      	beq.n	800767c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800764c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764e:	3324      	adds	r3, #36	; 0x24
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	4611      	mov	r1, r2
 8007654:	4618      	mov	r0, r3
 8007656:	f000 feb9 	bl	80083cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800765a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800765c:	f000 f9dc 	bl	8007a18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007660:	f000 fcf4 	bl	800804c <xTaskResumeAll>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d189      	bne.n	800757e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800766a:	4b10      	ldr	r3, [pc, #64]	; (80076ac <xQueueReceive+0x1bc>)
 800766c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	e780      	b.n	800757e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800767c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800767e:	f000 f9cb 	bl	8007a18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007682:	f000 fce3 	bl	800804c <xTaskResumeAll>
 8007686:	e77a      	b.n	800757e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800768a:	f000 f9c5 	bl	8007a18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800768e:	f000 fcdd 	bl	800804c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007694:	f000 fa12 	bl	8007abc <prvIsQueueEmpty>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	f43f af6f 	beq.w	800757e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3730      	adds	r7, #48	; 0x30
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	e000ed04 	.word	0xe000ed04

080076b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08e      	sub	sp, #56	; 0x38
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80076ba:	2300      	movs	r3, #0
 80076bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80076c2:	2300      	movs	r3, #0
 80076c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	623b      	str	r3, [r7, #32]
}
 80076de:	bf00      	nop
 80076e0:	e7fe      	b.n	80076e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80076e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	61fb      	str	r3, [r7, #28]
}
 80076fc:	bf00      	nop
 80076fe:	e7fe      	b.n	80076fe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007700:	f001 f870 	bl	80087e4 <xTaskGetSchedulerState>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d102      	bne.n	8007710 <xQueueSemaphoreTake+0x60>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <xQueueSemaphoreTake+0x64>
 8007710:	2301      	movs	r3, #1
 8007712:	e000      	b.n	8007716 <xQueueSemaphoreTake+0x66>
 8007714:	2300      	movs	r3, #0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10a      	bne.n	8007730 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	61bb      	str	r3, [r7, #24]
}
 800772c:	bf00      	nop
 800772e:	e7fe      	b.n	800772e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007730:	f001 fed8 	bl	80094e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007738:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	2b00      	cmp	r3, #0
 800773e:	d024      	beq.n	800778a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007742:	1e5a      	subs	r2, r3, #1
 8007744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007746:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d104      	bne.n	800775a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007750:	f001 f9f0 	bl	8008b34 <pvTaskIncrementMutexHeldCount>
 8007754:	4602      	mov	r2, r0
 8007756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007758:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00f      	beq.n	8007782 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007764:	3310      	adds	r3, #16
 8007766:	4618      	mov	r0, r3
 8007768:	f000 fe80 	bl	800846c <xTaskRemoveFromEventList>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d007      	beq.n	8007782 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007772:	4b54      	ldr	r3, [pc, #336]	; (80078c4 <xQueueSemaphoreTake+0x214>)
 8007774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007782:	f001 fedf 	bl	8009544 <vPortExitCritical>
				return pdPASS;
 8007786:	2301      	movs	r3, #1
 8007788:	e097      	b.n	80078ba <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d111      	bne.n	80077b4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00a      	beq.n	80077ac <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	617b      	str	r3, [r7, #20]
}
 80077a8:	bf00      	nop
 80077aa:	e7fe      	b.n	80077aa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80077ac:	f001 feca 	bl	8009544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80077b0:	2300      	movs	r3, #0
 80077b2:	e082      	b.n	80078ba <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077ba:	f107 030c 	add.w	r3, r7, #12
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 feb6 	bl	8008530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077c4:	2301      	movs	r3, #1
 80077c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077c8:	f001 febc 	bl	8009544 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077cc:	f000 fc30 	bl	8008030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077d0:	f001 fe88 	bl	80094e4 <vPortEnterCritical>
 80077d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077da:	b25b      	sxtb	r3, r3
 80077dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e0:	d103      	bne.n	80077ea <xQueueSemaphoreTake+0x13a>
 80077e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077f0:	b25b      	sxtb	r3, r3
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f6:	d103      	bne.n	8007800 <xQueueSemaphoreTake+0x150>
 80077f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007800:	f001 fea0 	bl	8009544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007804:	463a      	mov	r2, r7
 8007806:	f107 030c 	add.w	r3, r7, #12
 800780a:	4611      	mov	r1, r2
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fea5 	bl	800855c <xTaskCheckForTimeOut>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d132      	bne.n	800787e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007818:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800781a:	f000 f94f 	bl	8007abc <prvIsQueueEmpty>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d026      	beq.n	8007872 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d109      	bne.n	8007840 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800782c:	f001 fe5a 	bl	80094e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	4618      	mov	r0, r3
 8007836:	f000 fff3 	bl	8008820 <xTaskPriorityInherit>
 800783a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800783c:	f001 fe82 	bl	8009544 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	3324      	adds	r3, #36	; 0x24
 8007844:	683a      	ldr	r2, [r7, #0]
 8007846:	4611      	mov	r1, r2
 8007848:	4618      	mov	r0, r3
 800784a:	f000 fdbf 	bl	80083cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800784e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007850:	f000 f8e2 	bl	8007a18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007854:	f000 fbfa 	bl	800804c <xTaskResumeAll>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	f47f af68 	bne.w	8007730 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007860:	4b18      	ldr	r3, [pc, #96]	; (80078c4 <xQueueSemaphoreTake+0x214>)
 8007862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	e75e      	b.n	8007730 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007872:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007874:	f000 f8d0 	bl	8007a18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007878:	f000 fbe8 	bl	800804c <xTaskResumeAll>
 800787c:	e758      	b.n	8007730 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800787e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007880:	f000 f8ca 	bl	8007a18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007884:	f000 fbe2 	bl	800804c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800788a:	f000 f917 	bl	8007abc <prvIsQueueEmpty>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	f43f af4d 	beq.w	8007730 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00d      	beq.n	80078b8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800789c:	f001 fe22 	bl	80094e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80078a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078a2:	f000 f811 	bl	80078c8 <prvGetDisinheritPriorityAfterTimeout>
 80078a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80078a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078ae:	4618      	mov	r0, r3
 80078b0:	f001 f8b2 	bl	8008a18 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80078b4:	f001 fe46 	bl	8009544 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3738      	adds	r7, #56	; 0x38
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	e000ed04 	.word	0xe000ed04

080078c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d006      	beq.n	80078e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f1c3 0307 	rsb	r3, r3, #7
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	e001      	b.n	80078ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80078e6:	2300      	movs	r3, #0
 80078e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80078ea:	68fb      	ldr	r3, [r7, #12]
	}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007904:	2300      	movs	r3, #0
 8007906:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10d      	bne.n	8007932 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d14d      	bne.n	80079ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	4618      	mov	r0, r3
 8007924:	f000 fff2 	bl	800890c <xTaskPriorityDisinherit>
 8007928:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	609a      	str	r2, [r3, #8]
 8007930:	e043      	b.n	80079ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d119      	bne.n	800796c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6858      	ldr	r0, [r3, #4]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	461a      	mov	r2, r3
 8007942:	68b9      	ldr	r1, [r7, #8]
 8007944:	f002 f904 	bl	8009b50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007950:	441a      	add	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	429a      	cmp	r2, r3
 8007960:	d32b      	bcc.n	80079ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	605a      	str	r2, [r3, #4]
 800796a:	e026      	b.n	80079ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	68d8      	ldr	r0, [r3, #12]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007974:	461a      	mov	r2, r3
 8007976:	68b9      	ldr	r1, [r7, #8]
 8007978:	f002 f8ea 	bl	8009b50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	68da      	ldr	r2, [r3, #12]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007984:	425b      	negs	r3, r3
 8007986:	441a      	add	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	68da      	ldr	r2, [r3, #12]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	429a      	cmp	r2, r3
 8007996:	d207      	bcs.n	80079a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a0:	425b      	negs	r3, r3
 80079a2:	441a      	add	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d105      	bne.n	80079ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80079c2:	697b      	ldr	r3, [r7, #20]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d018      	beq.n	8007a10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	441a      	add	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d303      	bcc.n	8007a00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	68d9      	ldr	r1, [r3, #12]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a08:	461a      	mov	r2, r3
 8007a0a:	6838      	ldr	r0, [r7, #0]
 8007a0c:	f002 f8a0 	bl	8009b50 <memcpy>
	}
}
 8007a10:	bf00      	nop
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a20:	f001 fd60 	bl	80094e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a2c:	e011      	b.n	8007a52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d012      	beq.n	8007a5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	3324      	adds	r3, #36	; 0x24
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 fd16 	bl	800846c <xTaskRemoveFromEventList>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a46:	f000 fdeb 	bl	8008620 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	dce9      	bgt.n	8007a2e <prvUnlockQueue+0x16>
 8007a5a:	e000      	b.n	8007a5e <prvUnlockQueue+0x46>
					break;
 8007a5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	22ff      	movs	r2, #255	; 0xff
 8007a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007a66:	f001 fd6d 	bl	8009544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a6a:	f001 fd3b 	bl	80094e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a76:	e011      	b.n	8007a9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d012      	beq.n	8007aa6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	3310      	adds	r3, #16
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fcf1 	bl	800846c <xTaskRemoveFromEventList>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a90:	f000 fdc6 	bl	8008620 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	dce9      	bgt.n	8007a78 <prvUnlockQueue+0x60>
 8007aa4:	e000      	b.n	8007aa8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007aa6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	22ff      	movs	r2, #255	; 0xff
 8007aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ab0:	f001 fd48 	bl	8009544 <vPortExitCritical>
}
 8007ab4:	bf00      	nop
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ac4:	f001 fd0e 	bl	80094e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d102      	bne.n	8007ad6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	e001      	b.n	8007ada <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ada:	f001 fd33 	bl	8009544 <vPortExitCritical>

	return xReturn;
 8007ade:	68fb      	ldr	r3, [r7, #12]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007af0:	f001 fcf8 	bl	80094e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d102      	bne.n	8007b06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b00:	2301      	movs	r3, #1
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e001      	b.n	8007b0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b06:	2300      	movs	r3, #0
 8007b08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b0a:	f001 fd1b 	bl	8009544 <vPortExitCritical>

	return xReturn;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
 8007b26:	e014      	b.n	8007b52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b28:	4a0f      	ldr	r2, [pc, #60]	; (8007b68 <vQueueAddToRegistry+0x50>)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10b      	bne.n	8007b4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007b34:	490c      	ldr	r1, [pc, #48]	; (8007b68 <vQueueAddToRegistry+0x50>)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007b3e:	4a0a      	ldr	r2, [pc, #40]	; (8007b68 <vQueueAddToRegistry+0x50>)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	4413      	add	r3, r2
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007b4a:	e006      	b.n	8007b5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b07      	cmp	r3, #7
 8007b56:	d9e7      	bls.n	8007b28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007b58:	bf00      	nop
 8007b5a:	bf00      	nop
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	20000b64 	.word	0x20000b64

08007b6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007b7c:	f001 fcb2 	bl	80094e4 <vPortEnterCritical>
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b86:	b25b      	sxtb	r3, r3
 8007b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8c:	d103      	bne.n	8007b96 <vQueueWaitForMessageRestricted+0x2a>
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b9c:	b25b      	sxtb	r3, r3
 8007b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba2:	d103      	bne.n	8007bac <vQueueWaitForMessageRestricted+0x40>
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bac:	f001 fcca 	bl	8009544 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d106      	bne.n	8007bc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	3324      	adds	r3, #36	; 0x24
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	68b9      	ldr	r1, [r7, #8]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 fc27 	bl	8008414 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007bc6:	6978      	ldr	r0, [r7, #20]
 8007bc8:	f7ff ff26 	bl	8007a18 <prvUnlockQueue>
	}
 8007bcc:	bf00      	nop
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b08e      	sub	sp, #56	; 0x38
 8007bd8:	af04      	add	r7, sp, #16
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10a      	bne.n	8007bfe <xTaskCreateStatic+0x2a>
	__asm volatile
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	623b      	str	r3, [r7, #32]
}
 8007bfa:	bf00      	nop
 8007bfc:	e7fe      	b.n	8007bfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10a      	bne.n	8007c1a <xTaskCreateStatic+0x46>
	__asm volatile
 8007c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	61fb      	str	r3, [r7, #28]
}
 8007c16:	bf00      	nop
 8007c18:	e7fe      	b.n	8007c18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c1a:	2354      	movs	r3, #84	; 0x54
 8007c1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	2b54      	cmp	r3, #84	; 0x54
 8007c22:	d00a      	beq.n	8007c3a <xTaskCreateStatic+0x66>
	__asm volatile
 8007c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	61bb      	str	r3, [r7, #24]
}
 8007c36:	bf00      	nop
 8007c38:	e7fe      	b.n	8007c38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007c3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d01e      	beq.n	8007c80 <xTaskCreateStatic+0xac>
 8007c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d01b      	beq.n	8007c80 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c54:	2202      	movs	r2, #2
 8007c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	9303      	str	r3, [sp, #12]
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	9302      	str	r3, [sp, #8]
 8007c62:	f107 0314 	add.w	r3, r7, #20
 8007c66:	9301      	str	r3, [sp, #4]
 8007c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	68b9      	ldr	r1, [r7, #8]
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 f850 	bl	8007d18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c7a:	f000 f8d5 	bl	8007e28 <prvAddNewTaskToReadyList>
 8007c7e:	e001      	b.n	8007c84 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007c80:	2300      	movs	r3, #0
 8007c82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c84:	697b      	ldr	r3, [r7, #20]
	}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3728      	adds	r7, #40	; 0x28
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b08c      	sub	sp, #48	; 0x30
 8007c92:	af04      	add	r7, sp, #16
 8007c94:	60f8      	str	r0, [r7, #12]
 8007c96:	60b9      	str	r1, [r7, #8]
 8007c98:	603b      	str	r3, [r7, #0]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c9e:	88fb      	ldrh	r3, [r7, #6]
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f001 fd40 	bl	8009728 <pvPortMalloc>
 8007ca8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00e      	beq.n	8007cce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007cb0:	2054      	movs	r0, #84	; 0x54
 8007cb2:	f001 fd39 	bl	8009728 <pvPortMalloc>
 8007cb6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d003      	beq.n	8007cc6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8007cc4:	e005      	b.n	8007cd2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007cc6:	6978      	ldr	r0, [r7, #20]
 8007cc8:	f001 fdfa 	bl	80098c0 <vPortFree>
 8007ccc:	e001      	b.n	8007cd2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d017      	beq.n	8007d08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ce0:	88fa      	ldrh	r2, [r7, #6]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	9303      	str	r3, [sp, #12]
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	9302      	str	r3, [sp, #8]
 8007cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cec:	9301      	str	r3, [sp, #4]
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	68b9      	ldr	r1, [r7, #8]
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f000 f80e 	bl	8007d18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cfc:	69f8      	ldr	r0, [r7, #28]
 8007cfe:	f000 f893 	bl	8007e28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d02:	2301      	movs	r3, #1
 8007d04:	61bb      	str	r3, [r7, #24]
 8007d06:	e002      	b.n	8007d0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d08:	f04f 33ff 	mov.w	r3, #4294967295
 8007d0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d0e:	69bb      	ldr	r3, [r7, #24]
	}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3720      	adds	r7, #32
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b088      	sub	sp, #32
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d30:	3b01      	subs	r3, #1
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	f023 0307 	bic.w	r3, r3, #7
 8007d3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	f003 0307 	and.w	r3, r3, #7
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	617b      	str	r3, [r7, #20]
}
 8007d5c:	bf00      	nop
 8007d5e:	e7fe      	b.n	8007d5e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d01f      	beq.n	8007da6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d66:	2300      	movs	r3, #0
 8007d68:	61fb      	str	r3, [r7, #28]
 8007d6a:	e012      	b.n	8007d92 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	4413      	add	r3, r2
 8007d72:	7819      	ldrb	r1, [r3, #0]
 8007d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	4413      	add	r3, r2
 8007d7a:	3334      	adds	r3, #52	; 0x34
 8007d7c:	460a      	mov	r2, r1
 8007d7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	4413      	add	r3, r2
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d006      	beq.n	8007d9a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	61fb      	str	r3, [r7, #28]
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	2b0f      	cmp	r3, #15
 8007d96:	d9e9      	bls.n	8007d6c <prvInitialiseNewTask+0x54>
 8007d98:	e000      	b.n	8007d9c <prvInitialiseNewTask+0x84>
			{
				break;
 8007d9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007da4:	e003      	b.n	8007dae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db0:	2b06      	cmp	r3, #6
 8007db2:	d901      	bls.n	8007db8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007db4:	2306      	movs	r3, #6
 8007db6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dc2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dcc:	3304      	adds	r3, #4
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff f825 	bl	8006e1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd6:	3318      	adds	r3, #24
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7ff f820 	bl	8006e1e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007de2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de6:	f1c3 0207 	rsb	r2, r3, #7
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df6:	2200      	movs	r2, #0
 8007df8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	68f9      	ldr	r1, [r7, #12]
 8007e06:	69b8      	ldr	r0, [r7, #24]
 8007e08:	f001 fa40 	bl	800928c <pxPortInitialiseStack>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d002      	beq.n	8007e1e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e1e:	bf00      	nop
 8007e20:	3720      	adds	r7, #32
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
	...

08007e28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e30:	f001 fb58 	bl	80094e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e34:	4b2a      	ldr	r3, [pc, #168]	; (8007ee0 <prvAddNewTaskToReadyList+0xb8>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	4a29      	ldr	r2, [pc, #164]	; (8007ee0 <prvAddNewTaskToReadyList+0xb8>)
 8007e3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e3e:	4b29      	ldr	r3, [pc, #164]	; (8007ee4 <prvAddNewTaskToReadyList+0xbc>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d109      	bne.n	8007e5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e46:	4a27      	ldr	r2, [pc, #156]	; (8007ee4 <prvAddNewTaskToReadyList+0xbc>)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e4c:	4b24      	ldr	r3, [pc, #144]	; (8007ee0 <prvAddNewTaskToReadyList+0xb8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d110      	bne.n	8007e76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e54:	f000 fc08 	bl	8008668 <prvInitialiseTaskLists>
 8007e58:	e00d      	b.n	8007e76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e5a:	4b23      	ldr	r3, [pc, #140]	; (8007ee8 <prvAddNewTaskToReadyList+0xc0>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d109      	bne.n	8007e76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e62:	4b20      	ldr	r3, [pc, #128]	; (8007ee4 <prvAddNewTaskToReadyList+0xbc>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d802      	bhi.n	8007e76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e70:	4a1c      	ldr	r2, [pc, #112]	; (8007ee4 <prvAddNewTaskToReadyList+0xbc>)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e76:	4b1d      	ldr	r3, [pc, #116]	; (8007eec <prvAddNewTaskToReadyList+0xc4>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	4a1b      	ldr	r2, [pc, #108]	; (8007eec <prvAddNewTaskToReadyList+0xc4>)
 8007e7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	2201      	movs	r2, #1
 8007e86:	409a      	lsls	r2, r3
 8007e88:	4b19      	ldr	r3, [pc, #100]	; (8007ef0 <prvAddNewTaskToReadyList+0xc8>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	4a18      	ldr	r2, [pc, #96]	; (8007ef0 <prvAddNewTaskToReadyList+0xc8>)
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e96:	4613      	mov	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4a15      	ldr	r2, [pc, #84]	; (8007ef4 <prvAddNewTaskToReadyList+0xcc>)
 8007ea0:	441a      	add	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	f7fe ffc5 	bl	8006e38 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007eae:	f001 fb49 	bl	8009544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007eb2:	4b0d      	ldr	r3, [pc, #52]	; (8007ee8 <prvAddNewTaskToReadyList+0xc0>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00e      	beq.n	8007ed8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007eba:	4b0a      	ldr	r3, [pc, #40]	; (8007ee4 <prvAddNewTaskToReadyList+0xbc>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d207      	bcs.n	8007ed8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ec8:	4b0b      	ldr	r3, [pc, #44]	; (8007ef8 <prvAddNewTaskToReadyList+0xd0>)
 8007eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ed8:	bf00      	nop
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	20000ca4 	.word	0x20000ca4
 8007ee4:	20000ba4 	.word	0x20000ba4
 8007ee8:	20000cb0 	.word	0x20000cb0
 8007eec:	20000cc0 	.word	0x20000cc0
 8007ef0:	20000cac 	.word	0x20000cac
 8007ef4:	20000ba8 	.word	0x20000ba8
 8007ef8:	e000ed04 	.word	0xe000ed04

08007efc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f04:	2300      	movs	r3, #0
 8007f06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d017      	beq.n	8007f3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f0e:	4b13      	ldr	r3, [pc, #76]	; (8007f5c <vTaskDelay+0x60>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <vTaskDelay+0x30>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1a:	f383 8811 	msr	BASEPRI, r3
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	60bb      	str	r3, [r7, #8]
}
 8007f28:	bf00      	nop
 8007f2a:	e7fe      	b.n	8007f2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f2c:	f000 f880 	bl	8008030 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f30:	2100      	movs	r1, #0
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fe12 	bl	8008b5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f38:	f000 f888 	bl	800804c <xTaskResumeAll>
 8007f3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d107      	bne.n	8007f54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007f44:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <vTaskDelay+0x64>)
 8007f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f54:	bf00      	nop
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	20000ccc 	.word	0x20000ccc
 8007f60:	e000ed04 	.word	0xe000ed04

08007f64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08a      	sub	sp, #40	; 0x28
 8007f68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f72:	463a      	mov	r2, r7
 8007f74:	1d39      	adds	r1, r7, #4
 8007f76:	f107 0308 	add.w	r3, r7, #8
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fa f866 	bl	800204c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	9202      	str	r2, [sp, #8]
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	460a      	mov	r2, r1
 8007f92:	4921      	ldr	r1, [pc, #132]	; (8008018 <vTaskStartScheduler+0xb4>)
 8007f94:	4821      	ldr	r0, [pc, #132]	; (800801c <vTaskStartScheduler+0xb8>)
 8007f96:	f7ff fe1d 	bl	8007bd4 <xTaskCreateStatic>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	4a20      	ldr	r2, [pc, #128]	; (8008020 <vTaskStartScheduler+0xbc>)
 8007f9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007fa0:	4b1f      	ldr	r3, [pc, #124]	; (8008020 <vTaskStartScheduler+0xbc>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	617b      	str	r3, [r7, #20]
 8007fac:	e001      	b.n	8007fb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d102      	bne.n	8007fbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007fb8:	f000 fe36 	bl	8008c28 <xTimerCreateTimerTask>
 8007fbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d116      	bne.n	8007ff2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	613b      	str	r3, [r7, #16]
}
 8007fd6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007fd8:	4b12      	ldr	r3, [pc, #72]	; (8008024 <vTaskStartScheduler+0xc0>)
 8007fda:	f04f 32ff 	mov.w	r2, #4294967295
 8007fde:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007fe0:	4b11      	ldr	r3, [pc, #68]	; (8008028 <vTaskStartScheduler+0xc4>)
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007fe6:	4b11      	ldr	r3, [pc, #68]	; (800802c <vTaskStartScheduler+0xc8>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007fec:	f001 f9d8 	bl	80093a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ff0:	e00e      	b.n	8008010 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff8:	d10a      	bne.n	8008010 <vTaskStartScheduler+0xac>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	60fb      	str	r3, [r7, #12]
}
 800800c:	bf00      	nop
 800800e:	e7fe      	b.n	800800e <vTaskStartScheduler+0xaa>
}
 8008010:	bf00      	nop
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	0800caac 	.word	0x0800caac
 800801c:	08008639 	.word	0x08008639
 8008020:	20000cc8 	.word	0x20000cc8
 8008024:	20000cc4 	.word	0x20000cc4
 8008028:	20000cb0 	.word	0x20000cb0
 800802c:	20000ca8 	.word	0x20000ca8

08008030 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008030:	b480      	push	{r7}
 8008032:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008034:	4b04      	ldr	r3, [pc, #16]	; (8008048 <vTaskSuspendAll+0x18>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3301      	adds	r3, #1
 800803a:	4a03      	ldr	r2, [pc, #12]	; (8008048 <vTaskSuspendAll+0x18>)
 800803c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800803e:	bf00      	nop
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	20000ccc 	.word	0x20000ccc

0800804c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008052:	2300      	movs	r3, #0
 8008054:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008056:	2300      	movs	r3, #0
 8008058:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800805a:	4b41      	ldr	r3, [pc, #260]	; (8008160 <xTaskResumeAll+0x114>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10a      	bne.n	8008078 <xTaskResumeAll+0x2c>
	__asm volatile
 8008062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	603b      	str	r3, [r7, #0]
}
 8008074:	bf00      	nop
 8008076:	e7fe      	b.n	8008076 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008078:	f001 fa34 	bl	80094e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800807c:	4b38      	ldr	r3, [pc, #224]	; (8008160 <xTaskResumeAll+0x114>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	3b01      	subs	r3, #1
 8008082:	4a37      	ldr	r2, [pc, #220]	; (8008160 <xTaskResumeAll+0x114>)
 8008084:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008086:	4b36      	ldr	r3, [pc, #216]	; (8008160 <xTaskResumeAll+0x114>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d161      	bne.n	8008152 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800808e:	4b35      	ldr	r3, [pc, #212]	; (8008164 <xTaskResumeAll+0x118>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d05d      	beq.n	8008152 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008096:	e02e      	b.n	80080f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008098:	4b33      	ldr	r3, [pc, #204]	; (8008168 <xTaskResumeAll+0x11c>)
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3318      	adds	r3, #24
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fe ff24 	bl	8006ef2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	3304      	adds	r3, #4
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe ff1f 	bl	8006ef2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	2201      	movs	r2, #1
 80080ba:	409a      	lsls	r2, r3
 80080bc:	4b2b      	ldr	r3, [pc, #172]	; (800816c <xTaskResumeAll+0x120>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	4a2a      	ldr	r2, [pc, #168]	; (800816c <xTaskResumeAll+0x120>)
 80080c4:	6013      	str	r3, [r2, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ca:	4613      	mov	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4a27      	ldr	r2, [pc, #156]	; (8008170 <xTaskResumeAll+0x124>)
 80080d4:	441a      	add	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3304      	adds	r3, #4
 80080da:	4619      	mov	r1, r3
 80080dc:	4610      	mov	r0, r2
 80080de:	f7fe feab 	bl	8006e38 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e6:	4b23      	ldr	r3, [pc, #140]	; (8008174 <xTaskResumeAll+0x128>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d302      	bcc.n	80080f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80080f0:	4b21      	ldr	r3, [pc, #132]	; (8008178 <xTaskResumeAll+0x12c>)
 80080f2:	2201      	movs	r2, #1
 80080f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080f6:	4b1c      	ldr	r3, [pc, #112]	; (8008168 <xTaskResumeAll+0x11c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1cc      	bne.n	8008098 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008104:	f000 fb4e 	bl	80087a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008108:	4b1c      	ldr	r3, [pc, #112]	; (800817c <xTaskResumeAll+0x130>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d010      	beq.n	8008136 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008114:	f000 f846 	bl	80081a4 <xTaskIncrementTick>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d002      	beq.n	8008124 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800811e:	4b16      	ldr	r3, [pc, #88]	; (8008178 <xTaskResumeAll+0x12c>)
 8008120:	2201      	movs	r2, #1
 8008122:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3b01      	subs	r3, #1
 8008128:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1f1      	bne.n	8008114 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008130:	4b12      	ldr	r3, [pc, #72]	; (800817c <xTaskResumeAll+0x130>)
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008136:	4b10      	ldr	r3, [pc, #64]	; (8008178 <xTaskResumeAll+0x12c>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d009      	beq.n	8008152 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800813e:	2301      	movs	r3, #1
 8008140:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008142:	4b0f      	ldr	r3, [pc, #60]	; (8008180 <xTaskResumeAll+0x134>)
 8008144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008152:	f001 f9f7 	bl	8009544 <vPortExitCritical>

	return xAlreadyYielded;
 8008156:	68bb      	ldr	r3, [r7, #8]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	20000ccc 	.word	0x20000ccc
 8008164:	20000ca4 	.word	0x20000ca4
 8008168:	20000c64 	.word	0x20000c64
 800816c:	20000cac 	.word	0x20000cac
 8008170:	20000ba8 	.word	0x20000ba8
 8008174:	20000ba4 	.word	0x20000ba4
 8008178:	20000cb8 	.word	0x20000cb8
 800817c:	20000cb4 	.word	0x20000cb4
 8008180:	e000ed04 	.word	0xe000ed04

08008184 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800818a:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <xTaskGetTickCount+0x1c>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008190:	687b      	ldr	r3, [r7, #4]
}
 8008192:	4618      	mov	r0, r3
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	20000ca8 	.word	0x20000ca8

080081a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081aa:	2300      	movs	r3, #0
 80081ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ae:	4b4e      	ldr	r3, [pc, #312]	; (80082e8 <xTaskIncrementTick+0x144>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f040 808e 	bne.w	80082d4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081b8:	4b4c      	ldr	r3, [pc, #304]	; (80082ec <xTaskIncrementTick+0x148>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3301      	adds	r3, #1
 80081be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081c0:	4a4a      	ldr	r2, [pc, #296]	; (80082ec <xTaskIncrementTick+0x148>)
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d120      	bne.n	800820e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80081cc:	4b48      	ldr	r3, [pc, #288]	; (80082f0 <xTaskIncrementTick+0x14c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <xTaskIncrementTick+0x48>
	__asm volatile
 80081d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	603b      	str	r3, [r7, #0]
}
 80081e8:	bf00      	nop
 80081ea:	e7fe      	b.n	80081ea <xTaskIncrementTick+0x46>
 80081ec:	4b40      	ldr	r3, [pc, #256]	; (80082f0 <xTaskIncrementTick+0x14c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	4b40      	ldr	r3, [pc, #256]	; (80082f4 <xTaskIncrementTick+0x150>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a3e      	ldr	r2, [pc, #248]	; (80082f0 <xTaskIncrementTick+0x14c>)
 80081f8:	6013      	str	r3, [r2, #0]
 80081fa:	4a3e      	ldr	r2, [pc, #248]	; (80082f4 <xTaskIncrementTick+0x150>)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	4b3d      	ldr	r3, [pc, #244]	; (80082f8 <xTaskIncrementTick+0x154>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3301      	adds	r3, #1
 8008206:	4a3c      	ldr	r2, [pc, #240]	; (80082f8 <xTaskIncrementTick+0x154>)
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	f000 facb 	bl	80087a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800820e:	4b3b      	ldr	r3, [pc, #236]	; (80082fc <xTaskIncrementTick+0x158>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	429a      	cmp	r2, r3
 8008216:	d348      	bcc.n	80082aa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008218:	4b35      	ldr	r3, [pc, #212]	; (80082f0 <xTaskIncrementTick+0x14c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d104      	bne.n	800822c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008222:	4b36      	ldr	r3, [pc, #216]	; (80082fc <xTaskIncrementTick+0x158>)
 8008224:	f04f 32ff 	mov.w	r2, #4294967295
 8008228:	601a      	str	r2, [r3, #0]
					break;
 800822a:	e03e      	b.n	80082aa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800822c:	4b30      	ldr	r3, [pc, #192]	; (80082f0 <xTaskIncrementTick+0x14c>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	429a      	cmp	r2, r3
 8008242:	d203      	bcs.n	800824c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008244:	4a2d      	ldr	r2, [pc, #180]	; (80082fc <xTaskIncrementTick+0x158>)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800824a:	e02e      	b.n	80082aa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	3304      	adds	r3, #4
 8008250:	4618      	mov	r0, r3
 8008252:	f7fe fe4e 	bl	8006ef2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825a:	2b00      	cmp	r3, #0
 800825c:	d004      	beq.n	8008268 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	3318      	adds	r3, #24
 8008262:	4618      	mov	r0, r3
 8008264:	f7fe fe45 	bl	8006ef2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826c:	2201      	movs	r2, #1
 800826e:	409a      	lsls	r2, r3
 8008270:	4b23      	ldr	r3, [pc, #140]	; (8008300 <xTaskIncrementTick+0x15c>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4313      	orrs	r3, r2
 8008276:	4a22      	ldr	r2, [pc, #136]	; (8008300 <xTaskIncrementTick+0x15c>)
 8008278:	6013      	str	r3, [r2, #0]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4a1f      	ldr	r2, [pc, #124]	; (8008304 <xTaskIncrementTick+0x160>)
 8008288:	441a      	add	r2, r3
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	3304      	adds	r3, #4
 800828e:	4619      	mov	r1, r3
 8008290:	4610      	mov	r0, r2
 8008292:	f7fe fdd1 	bl	8006e38 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829a:	4b1b      	ldr	r3, [pc, #108]	; (8008308 <xTaskIncrementTick+0x164>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d3b9      	bcc.n	8008218 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80082a4:	2301      	movs	r3, #1
 80082a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082a8:	e7b6      	b.n	8008218 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082aa:	4b17      	ldr	r3, [pc, #92]	; (8008308 <xTaskIncrementTick+0x164>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b0:	4914      	ldr	r1, [pc, #80]	; (8008304 <xTaskIncrementTick+0x160>)
 80082b2:	4613      	mov	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	440b      	add	r3, r1
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d901      	bls.n	80082c6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80082c2:	2301      	movs	r3, #1
 80082c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80082c6:	4b11      	ldr	r3, [pc, #68]	; (800830c <xTaskIncrementTick+0x168>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d007      	beq.n	80082de <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80082ce:	2301      	movs	r3, #1
 80082d0:	617b      	str	r3, [r7, #20]
 80082d2:	e004      	b.n	80082de <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80082d4:	4b0e      	ldr	r3, [pc, #56]	; (8008310 <xTaskIncrementTick+0x16c>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	3301      	adds	r3, #1
 80082da:	4a0d      	ldr	r2, [pc, #52]	; (8008310 <xTaskIncrementTick+0x16c>)
 80082dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80082de:	697b      	ldr	r3, [r7, #20]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3718      	adds	r7, #24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	20000ccc 	.word	0x20000ccc
 80082ec:	20000ca8 	.word	0x20000ca8
 80082f0:	20000c5c 	.word	0x20000c5c
 80082f4:	20000c60 	.word	0x20000c60
 80082f8:	20000cbc 	.word	0x20000cbc
 80082fc:	20000cc4 	.word	0x20000cc4
 8008300:	20000cac 	.word	0x20000cac
 8008304:	20000ba8 	.word	0x20000ba8
 8008308:	20000ba4 	.word	0x20000ba4
 800830c:	20000cb8 	.word	0x20000cb8
 8008310:	20000cb4 	.word	0x20000cb4

08008314 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800831a:	4b27      	ldr	r3, [pc, #156]	; (80083b8 <vTaskSwitchContext+0xa4>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008322:	4b26      	ldr	r3, [pc, #152]	; (80083bc <vTaskSwitchContext+0xa8>)
 8008324:	2201      	movs	r2, #1
 8008326:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008328:	e03f      	b.n	80083aa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800832a:	4b24      	ldr	r3, [pc, #144]	; (80083bc <vTaskSwitchContext+0xa8>)
 800832c:	2200      	movs	r2, #0
 800832e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008330:	4b23      	ldr	r3, [pc, #140]	; (80083c0 <vTaskSwitchContext+0xac>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	fab3 f383 	clz	r3, r3
 800833c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800833e:	7afb      	ldrb	r3, [r7, #11]
 8008340:	f1c3 031f 	rsb	r3, r3, #31
 8008344:	617b      	str	r3, [r7, #20]
 8008346:	491f      	ldr	r1, [pc, #124]	; (80083c4 <vTaskSwitchContext+0xb0>)
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	4613      	mov	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	440b      	add	r3, r1
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10a      	bne.n	8008370 <vTaskSwitchContext+0x5c>
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	607b      	str	r3, [r7, #4]
}
 800836c:	bf00      	nop
 800836e:	e7fe      	b.n	800836e <vTaskSwitchContext+0x5a>
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	4613      	mov	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4a12      	ldr	r2, [pc, #72]	; (80083c4 <vTaskSwitchContext+0xb0>)
 800837c:	4413      	add	r3, r2
 800837e:	613b      	str	r3, [r7, #16]
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	685a      	ldr	r2, [r3, #4]
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	605a      	str	r2, [r3, #4]
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	3308      	adds	r3, #8
 8008392:	429a      	cmp	r2, r3
 8008394:	d104      	bne.n	80083a0 <vTaskSwitchContext+0x8c>
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	605a      	str	r2, [r3, #4]
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	4a08      	ldr	r2, [pc, #32]	; (80083c8 <vTaskSwitchContext+0xb4>)
 80083a8:	6013      	str	r3, [r2, #0]
}
 80083aa:	bf00      	nop
 80083ac:	371c      	adds	r7, #28
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	20000ccc 	.word	0x20000ccc
 80083bc:	20000cb8 	.word	0x20000cb8
 80083c0:	20000cac 	.word	0x20000cac
 80083c4:	20000ba8 	.word	0x20000ba8
 80083c8:	20000ba4 	.word	0x20000ba4

080083cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10a      	bne.n	80083f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	60fb      	str	r3, [r7, #12]
}
 80083ee:	bf00      	nop
 80083f0:	e7fe      	b.n	80083f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083f2:	4b07      	ldr	r3, [pc, #28]	; (8008410 <vTaskPlaceOnEventList+0x44>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3318      	adds	r3, #24
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7fe fd40 	bl	8006e80 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008400:	2101      	movs	r1, #1
 8008402:	6838      	ldr	r0, [r7, #0]
 8008404:	f000 fbaa 	bl	8008b5c <prvAddCurrentTaskToDelayedList>
}
 8008408:	bf00      	nop
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	20000ba4 	.word	0x20000ba4

08008414 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10a      	bne.n	800843c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	617b      	str	r3, [r7, #20]
}
 8008438:	bf00      	nop
 800843a:	e7fe      	b.n	800843a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800843c:	4b0a      	ldr	r3, [pc, #40]	; (8008468 <vTaskPlaceOnEventListRestricted+0x54>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3318      	adds	r3, #24
 8008442:	4619      	mov	r1, r3
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f7fe fcf7 	bl	8006e38 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008450:	f04f 33ff 	mov.w	r3, #4294967295
 8008454:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008456:	6879      	ldr	r1, [r7, #4]
 8008458:	68b8      	ldr	r0, [r7, #8]
 800845a:	f000 fb7f 	bl	8008b5c <prvAddCurrentTaskToDelayedList>
	}
 800845e:	bf00      	nop
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	20000ba4 	.word	0x20000ba4

0800846c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10a      	bne.n	8008498 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	60fb      	str	r3, [r7, #12]
}
 8008494:	bf00      	nop
 8008496:	e7fe      	b.n	8008496 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	3318      	adds	r3, #24
 800849c:	4618      	mov	r0, r3
 800849e:	f7fe fd28 	bl	8006ef2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084a2:	4b1d      	ldr	r3, [pc, #116]	; (8008518 <xTaskRemoveFromEventList+0xac>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d11c      	bne.n	80084e4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	3304      	adds	r3, #4
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe fd1f 	bl	8006ef2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b8:	2201      	movs	r2, #1
 80084ba:	409a      	lsls	r2, r3
 80084bc:	4b17      	ldr	r3, [pc, #92]	; (800851c <xTaskRemoveFromEventList+0xb0>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	4a16      	ldr	r2, [pc, #88]	; (800851c <xTaskRemoveFromEventList+0xb0>)
 80084c4:	6013      	str	r3, [r2, #0]
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ca:	4613      	mov	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4a13      	ldr	r2, [pc, #76]	; (8008520 <xTaskRemoveFromEventList+0xb4>)
 80084d4:	441a      	add	r2, r3
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	3304      	adds	r3, #4
 80084da:	4619      	mov	r1, r3
 80084dc:	4610      	mov	r0, r2
 80084de:	f7fe fcab 	bl	8006e38 <vListInsertEnd>
 80084e2:	e005      	b.n	80084f0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	3318      	adds	r3, #24
 80084e8:	4619      	mov	r1, r3
 80084ea:	480e      	ldr	r0, [pc, #56]	; (8008524 <xTaskRemoveFromEventList+0xb8>)
 80084ec:	f7fe fca4 	bl	8006e38 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f4:	4b0c      	ldr	r3, [pc, #48]	; (8008528 <xTaskRemoveFromEventList+0xbc>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d905      	bls.n	800850a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80084fe:	2301      	movs	r3, #1
 8008500:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008502:	4b0a      	ldr	r3, [pc, #40]	; (800852c <xTaskRemoveFromEventList+0xc0>)
 8008504:	2201      	movs	r2, #1
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	e001      	b.n	800850e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800850a:	2300      	movs	r3, #0
 800850c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800850e:	697b      	ldr	r3, [r7, #20]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	20000ccc 	.word	0x20000ccc
 800851c:	20000cac 	.word	0x20000cac
 8008520:	20000ba8 	.word	0x20000ba8
 8008524:	20000c64 	.word	0x20000c64
 8008528:	20000ba4 	.word	0x20000ba4
 800852c:	20000cb8 	.word	0x20000cb8

08008530 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008538:	4b06      	ldr	r3, [pc, #24]	; (8008554 <vTaskInternalSetTimeOutState+0x24>)
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008540:	4b05      	ldr	r3, [pc, #20]	; (8008558 <vTaskInternalSetTimeOutState+0x28>)
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	605a      	str	r2, [r3, #4]
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	20000cbc 	.word	0x20000cbc
 8008558:	20000ca8 	.word	0x20000ca8

0800855c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10a      	bne.n	8008582 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	613b      	str	r3, [r7, #16]
}
 800857e:	bf00      	nop
 8008580:	e7fe      	b.n	8008580 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10a      	bne.n	800859e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	60fb      	str	r3, [r7, #12]
}
 800859a:	bf00      	nop
 800859c:	e7fe      	b.n	800859c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800859e:	f000 ffa1 	bl	80094e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085a2:	4b1d      	ldr	r3, [pc, #116]	; (8008618 <xTaskCheckForTimeOut+0xbc>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	69ba      	ldr	r2, [r7, #24]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ba:	d102      	bne.n	80085c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80085bc:	2300      	movs	r3, #0
 80085be:	61fb      	str	r3, [r7, #28]
 80085c0:	e023      	b.n	800860a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	4b15      	ldr	r3, [pc, #84]	; (800861c <xTaskCheckForTimeOut+0xc0>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d007      	beq.n	80085de <xTaskCheckForTimeOut+0x82>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	69ba      	ldr	r2, [r7, #24]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d302      	bcc.n	80085de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80085d8:	2301      	movs	r3, #1
 80085da:	61fb      	str	r3, [r7, #28]
 80085dc:	e015      	b.n	800860a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d20b      	bcs.n	8008600 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	1ad2      	subs	r2, r2, r3
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7ff ff9b 	bl	8008530 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80085fa:	2300      	movs	r3, #0
 80085fc:	61fb      	str	r3, [r7, #28]
 80085fe:	e004      	b.n	800860a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008606:	2301      	movs	r3, #1
 8008608:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800860a:	f000 ff9b 	bl	8009544 <vPortExitCritical>

	return xReturn;
 800860e:	69fb      	ldr	r3, [r7, #28]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3720      	adds	r7, #32
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	20000ca8 	.word	0x20000ca8
 800861c:	20000cbc 	.word	0x20000cbc

08008620 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008620:	b480      	push	{r7}
 8008622:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008624:	4b03      	ldr	r3, [pc, #12]	; (8008634 <vTaskMissedYield+0x14>)
 8008626:	2201      	movs	r2, #1
 8008628:	601a      	str	r2, [r3, #0]
}
 800862a:	bf00      	nop
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	20000cb8 	.word	0x20000cb8

08008638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008640:	f000 f852 	bl	80086e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008644:	4b06      	ldr	r3, [pc, #24]	; (8008660 <prvIdleTask+0x28>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d9f9      	bls.n	8008640 <prvIdleTask+0x8>
			{
				taskYIELD();
 800864c:	4b05      	ldr	r3, [pc, #20]	; (8008664 <prvIdleTask+0x2c>)
 800864e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800865c:	e7f0      	b.n	8008640 <prvIdleTask+0x8>
 800865e:	bf00      	nop
 8008660:	20000ba8 	.word	0x20000ba8
 8008664:	e000ed04 	.word	0xe000ed04

08008668 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800866e:	2300      	movs	r3, #0
 8008670:	607b      	str	r3, [r7, #4]
 8008672:	e00c      	b.n	800868e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	4613      	mov	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4a12      	ldr	r2, [pc, #72]	; (80086c8 <prvInitialiseTaskLists+0x60>)
 8008680:	4413      	add	r3, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe fbab 	bl	8006dde <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	3301      	adds	r3, #1
 800868c:	607b      	str	r3, [r7, #4]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b06      	cmp	r3, #6
 8008692:	d9ef      	bls.n	8008674 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008694:	480d      	ldr	r0, [pc, #52]	; (80086cc <prvInitialiseTaskLists+0x64>)
 8008696:	f7fe fba2 	bl	8006dde <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800869a:	480d      	ldr	r0, [pc, #52]	; (80086d0 <prvInitialiseTaskLists+0x68>)
 800869c:	f7fe fb9f 	bl	8006dde <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086a0:	480c      	ldr	r0, [pc, #48]	; (80086d4 <prvInitialiseTaskLists+0x6c>)
 80086a2:	f7fe fb9c 	bl	8006dde <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086a6:	480c      	ldr	r0, [pc, #48]	; (80086d8 <prvInitialiseTaskLists+0x70>)
 80086a8:	f7fe fb99 	bl	8006dde <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086ac:	480b      	ldr	r0, [pc, #44]	; (80086dc <prvInitialiseTaskLists+0x74>)
 80086ae:	f7fe fb96 	bl	8006dde <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086b2:	4b0b      	ldr	r3, [pc, #44]	; (80086e0 <prvInitialiseTaskLists+0x78>)
 80086b4:	4a05      	ldr	r2, [pc, #20]	; (80086cc <prvInitialiseTaskLists+0x64>)
 80086b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086b8:	4b0a      	ldr	r3, [pc, #40]	; (80086e4 <prvInitialiseTaskLists+0x7c>)
 80086ba:	4a05      	ldr	r2, [pc, #20]	; (80086d0 <prvInitialiseTaskLists+0x68>)
 80086bc:	601a      	str	r2, [r3, #0]
}
 80086be:	bf00      	nop
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20000ba8 	.word	0x20000ba8
 80086cc:	20000c34 	.word	0x20000c34
 80086d0:	20000c48 	.word	0x20000c48
 80086d4:	20000c64 	.word	0x20000c64
 80086d8:	20000c78 	.word	0x20000c78
 80086dc:	20000c90 	.word	0x20000c90
 80086e0:	20000c5c 	.word	0x20000c5c
 80086e4:	20000c60 	.word	0x20000c60

080086e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086ee:	e019      	b.n	8008724 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80086f0:	f000 fef8 	bl	80094e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086f4:	4b10      	ldr	r3, [pc, #64]	; (8008738 <prvCheckTasksWaitingTermination+0x50>)
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	3304      	adds	r3, #4
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe fbf6 	bl	8006ef2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008706:	4b0d      	ldr	r3, [pc, #52]	; (800873c <prvCheckTasksWaitingTermination+0x54>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3b01      	subs	r3, #1
 800870c:	4a0b      	ldr	r2, [pc, #44]	; (800873c <prvCheckTasksWaitingTermination+0x54>)
 800870e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008710:	4b0b      	ldr	r3, [pc, #44]	; (8008740 <prvCheckTasksWaitingTermination+0x58>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	3b01      	subs	r3, #1
 8008716:	4a0a      	ldr	r2, [pc, #40]	; (8008740 <prvCheckTasksWaitingTermination+0x58>)
 8008718:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800871a:	f000 ff13 	bl	8009544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f810 	bl	8008744 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008724:	4b06      	ldr	r3, [pc, #24]	; (8008740 <prvCheckTasksWaitingTermination+0x58>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e1      	bne.n	80086f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800872c:	bf00      	nop
 800872e:	bf00      	nop
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	20000c78 	.word	0x20000c78
 800873c:	20000ca4 	.word	0x20000ca4
 8008740:	20000c8c 	.word	0x20000c8c

08008744 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008752:	2b00      	cmp	r3, #0
 8008754:	d108      	bne.n	8008768 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875a:	4618      	mov	r0, r3
 800875c:	f001 f8b0 	bl	80098c0 <vPortFree>
				vPortFree( pxTCB );
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f001 f8ad 	bl	80098c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008766:	e018      	b.n	800879a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800876e:	2b01      	cmp	r3, #1
 8008770:	d103      	bne.n	800877a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f001 f8a4 	bl	80098c0 <vPortFree>
	}
 8008778:	e00f      	b.n	800879a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008780:	2b02      	cmp	r3, #2
 8008782:	d00a      	beq.n	800879a <prvDeleteTCB+0x56>
	__asm volatile
 8008784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	60fb      	str	r3, [r7, #12]
}
 8008796:	bf00      	nop
 8008798:	e7fe      	b.n	8008798 <prvDeleteTCB+0x54>
	}
 800879a:	bf00      	nop
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
	...

080087a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087aa:	4b0c      	ldr	r3, [pc, #48]	; (80087dc <prvResetNextTaskUnblockTime+0x38>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d104      	bne.n	80087be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80087b4:	4b0a      	ldr	r3, [pc, #40]	; (80087e0 <prvResetNextTaskUnblockTime+0x3c>)
 80087b6:	f04f 32ff 	mov.w	r2, #4294967295
 80087ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087bc:	e008      	b.n	80087d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087be:	4b07      	ldr	r3, [pc, #28]	; (80087dc <prvResetNextTaskUnblockTime+0x38>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	4a04      	ldr	r2, [pc, #16]	; (80087e0 <prvResetNextTaskUnblockTime+0x3c>)
 80087ce:	6013      	str	r3, [r2, #0]
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	20000c5c 	.word	0x20000c5c
 80087e0:	20000cc4 	.word	0x20000cc4

080087e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80087ea:	4b0b      	ldr	r3, [pc, #44]	; (8008818 <xTaskGetSchedulerState+0x34>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d102      	bne.n	80087f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80087f2:	2301      	movs	r3, #1
 80087f4:	607b      	str	r3, [r7, #4]
 80087f6:	e008      	b.n	800880a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087f8:	4b08      	ldr	r3, [pc, #32]	; (800881c <xTaskGetSchedulerState+0x38>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d102      	bne.n	8008806 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008800:	2302      	movs	r3, #2
 8008802:	607b      	str	r3, [r7, #4]
 8008804:	e001      	b.n	800880a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008806:	2300      	movs	r3, #0
 8008808:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800880a:	687b      	ldr	r3, [r7, #4]
	}
 800880c:	4618      	mov	r0, r3
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	20000cb0 	.word	0x20000cb0
 800881c:	20000ccc 	.word	0x20000ccc

08008820 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800882c:	2300      	movs	r3, #0
 800882e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d05e      	beq.n	80088f4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800883a:	4b31      	ldr	r3, [pc, #196]	; (8008900 <xTaskPriorityInherit+0xe0>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	429a      	cmp	r2, r3
 8008842:	d24e      	bcs.n	80088e2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	2b00      	cmp	r3, #0
 800884a:	db06      	blt.n	800885a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800884c:	4b2c      	ldr	r3, [pc, #176]	; (8008900 <xTaskPriorityInherit+0xe0>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008852:	f1c3 0207 	rsb	r2, r3, #7
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	6959      	ldr	r1, [r3, #20]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008862:	4613      	mov	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4a26      	ldr	r2, [pc, #152]	; (8008904 <xTaskPriorityInherit+0xe4>)
 800886c:	4413      	add	r3, r2
 800886e:	4299      	cmp	r1, r3
 8008870:	d12f      	bne.n	80088d2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	3304      	adds	r3, #4
 8008876:	4618      	mov	r0, r3
 8008878:	f7fe fb3b 	bl	8006ef2 <uxListRemove>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10a      	bne.n	8008898 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008886:	2201      	movs	r2, #1
 8008888:	fa02 f303 	lsl.w	r3, r2, r3
 800888c:	43da      	mvns	r2, r3
 800888e:	4b1e      	ldr	r3, [pc, #120]	; (8008908 <xTaskPriorityInherit+0xe8>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4013      	ands	r3, r2
 8008894:	4a1c      	ldr	r2, [pc, #112]	; (8008908 <xTaskPriorityInherit+0xe8>)
 8008896:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008898:	4b19      	ldr	r3, [pc, #100]	; (8008900 <xTaskPriorityInherit+0xe0>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a6:	2201      	movs	r2, #1
 80088a8:	409a      	lsls	r2, r3
 80088aa:	4b17      	ldr	r3, [pc, #92]	; (8008908 <xTaskPriorityInherit+0xe8>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	4a15      	ldr	r2, [pc, #84]	; (8008908 <xTaskPriorityInherit+0xe8>)
 80088b2:	6013      	str	r3, [r2, #0]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b8:	4613      	mov	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4a10      	ldr	r2, [pc, #64]	; (8008904 <xTaskPriorityInherit+0xe4>)
 80088c2:	441a      	add	r2, r3
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	3304      	adds	r3, #4
 80088c8:	4619      	mov	r1, r3
 80088ca:	4610      	mov	r0, r2
 80088cc:	f7fe fab4 	bl	8006e38 <vListInsertEnd>
 80088d0:	e004      	b.n	80088dc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088d2:	4b0b      	ldr	r3, [pc, #44]	; (8008900 <xTaskPriorityInherit+0xe0>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80088dc:	2301      	movs	r3, #1
 80088de:	60fb      	str	r3, [r7, #12]
 80088e0:	e008      	b.n	80088f4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088e6:	4b06      	ldr	r3, [pc, #24]	; (8008900 <xTaskPriorityInherit+0xe0>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d201      	bcs.n	80088f4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80088f0:	2301      	movs	r3, #1
 80088f2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088f4:	68fb      	ldr	r3, [r7, #12]
	}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	20000ba4 	.word	0x20000ba4
 8008904:	20000ba8 	.word	0x20000ba8
 8008908:	20000cac 	.word	0x20000cac

0800890c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008918:	2300      	movs	r3, #0
 800891a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d06e      	beq.n	8008a00 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008922:	4b3a      	ldr	r3, [pc, #232]	; (8008a0c <xTaskPriorityDisinherit+0x100>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	429a      	cmp	r2, r3
 800892a:	d00a      	beq.n	8008942 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	60fb      	str	r3, [r7, #12]
}
 800893e:	bf00      	nop
 8008940:	e7fe      	b.n	8008940 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10a      	bne.n	8008960 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	60bb      	str	r3, [r7, #8]
}
 800895c:	bf00      	nop
 800895e:	e7fe      	b.n	800895e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008964:	1e5a      	subs	r2, r3, #1
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008972:	429a      	cmp	r2, r3
 8008974:	d044      	beq.n	8008a00 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800897a:	2b00      	cmp	r3, #0
 800897c:	d140      	bne.n	8008a00 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	3304      	adds	r3, #4
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe fab5 	bl	8006ef2 <uxListRemove>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d115      	bne.n	80089ba <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008992:	491f      	ldr	r1, [pc, #124]	; (8008a10 <xTaskPriorityDisinherit+0x104>)
 8008994:	4613      	mov	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4413      	add	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	440b      	add	r3, r1
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10a      	bne.n	80089ba <xTaskPriorityDisinherit+0xae>
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a8:	2201      	movs	r2, #1
 80089aa:	fa02 f303 	lsl.w	r3, r2, r3
 80089ae:	43da      	mvns	r2, r3
 80089b0:	4b18      	ldr	r3, [pc, #96]	; (8008a14 <xTaskPriorityDisinherit+0x108>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4013      	ands	r3, r2
 80089b6:	4a17      	ldr	r2, [pc, #92]	; (8008a14 <xTaskPriorityDisinherit+0x108>)
 80089b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c6:	f1c3 0207 	rsb	r2, r3, #7
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d2:	2201      	movs	r2, #1
 80089d4:	409a      	lsls	r2, r3
 80089d6:	4b0f      	ldr	r3, [pc, #60]	; (8008a14 <xTaskPriorityDisinherit+0x108>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4313      	orrs	r3, r2
 80089dc:	4a0d      	ldr	r2, [pc, #52]	; (8008a14 <xTaskPriorityDisinherit+0x108>)
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e4:	4613      	mov	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4a08      	ldr	r2, [pc, #32]	; (8008a10 <xTaskPriorityDisinherit+0x104>)
 80089ee:	441a      	add	r2, r3
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	3304      	adds	r3, #4
 80089f4:	4619      	mov	r1, r3
 80089f6:	4610      	mov	r0, r2
 80089f8:	f7fe fa1e 	bl	8006e38 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80089fc:	2301      	movs	r3, #1
 80089fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a00:	697b      	ldr	r3, [r7, #20]
	}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20000ba4 	.word	0x20000ba4
 8008a10:	20000ba8 	.word	0x20000ba8
 8008a14:	20000cac 	.word	0x20000cac

08008a18 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b088      	sub	sp, #32
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a26:	2301      	movs	r3, #1
 8008a28:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d077      	beq.n	8008b20 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10a      	bne.n	8008a4e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	60fb      	str	r3, [r7, #12]
}
 8008a4a:	bf00      	nop
 8008a4c:	e7fe      	b.n	8008a4c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d902      	bls.n	8008a5e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	61fb      	str	r3, [r7, #28]
 8008a5c:	e002      	b.n	8008a64 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a62:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a68:	69fa      	ldr	r2, [r7, #28]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d058      	beq.n	8008b20 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d153      	bne.n	8008b20 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008a78:	4b2b      	ldr	r3, [pc, #172]	; (8008b28 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d10a      	bne.n	8008a98 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	60bb      	str	r3, [r7, #8]
}
 8008a94:	bf00      	nop
 8008a96:	e7fe      	b.n	8008a96 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	69fa      	ldr	r2, [r7, #28]
 8008aa2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	db04      	blt.n	8008ab6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	f1c3 0207 	rsb	r2, r3, #7
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	6959      	ldr	r1, [r3, #20]
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	4613      	mov	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4413      	add	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4a19      	ldr	r2, [pc, #100]	; (8008b2c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008ac6:	4413      	add	r3, r2
 8008ac8:	4299      	cmp	r1, r3
 8008aca:	d129      	bne.n	8008b20 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	3304      	adds	r3, #4
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fe fa0e 	bl	8006ef2 <uxListRemove>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10a      	bne.n	8008af2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae6:	43da      	mvns	r2, r3
 8008ae8:	4b11      	ldr	r3, [pc, #68]	; (8008b30 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4013      	ands	r3, r2
 8008aee:	4a10      	ldr	r2, [pc, #64]	; (8008b30 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008af0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af6:	2201      	movs	r2, #1
 8008af8:	409a      	lsls	r2, r3
 8008afa:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	4a0b      	ldr	r2, [pc, #44]	; (8008b30 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008b02:	6013      	str	r3, [r2, #0]
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b08:	4613      	mov	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4a06      	ldr	r2, [pc, #24]	; (8008b2c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008b12:	441a      	add	r2, r3
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	3304      	adds	r3, #4
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	f7fe f98c 	bl	8006e38 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b20:	bf00      	nop
 8008b22:	3720      	adds	r7, #32
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	20000ba4 	.word	0x20000ba4
 8008b2c:	20000ba8 	.word	0x20000ba8
 8008b30:	20000cac 	.word	0x20000cac

08008b34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b34:	b480      	push	{r7}
 8008b36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b38:	4b07      	ldr	r3, [pc, #28]	; (8008b58 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d004      	beq.n	8008b4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008b40:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b46:	3201      	adds	r2, #1
 8008b48:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008b4a:	4b03      	ldr	r3, [pc, #12]	; (8008b58 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
	}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	20000ba4 	.word	0x20000ba4

08008b5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b66:	4b29      	ldr	r3, [pc, #164]	; (8008c0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b6c:	4b28      	ldr	r3, [pc, #160]	; (8008c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	3304      	adds	r3, #4
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fe f9bd 	bl	8006ef2 <uxListRemove>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10b      	bne.n	8008b96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008b7e:	4b24      	ldr	r3, [pc, #144]	; (8008c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b84:	2201      	movs	r2, #1
 8008b86:	fa02 f303 	lsl.w	r3, r2, r3
 8008b8a:	43da      	mvns	r2, r3
 8008b8c:	4b21      	ldr	r3, [pc, #132]	; (8008c14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4013      	ands	r3, r2
 8008b92:	4a20      	ldr	r2, [pc, #128]	; (8008c14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9c:	d10a      	bne.n	8008bb4 <prvAddCurrentTaskToDelayedList+0x58>
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d007      	beq.n	8008bb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ba4:	4b1a      	ldr	r3, [pc, #104]	; (8008c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	4619      	mov	r1, r3
 8008bac:	481a      	ldr	r0, [pc, #104]	; (8008c18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008bae:	f7fe f943 	bl	8006e38 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008bb2:	e026      	b.n	8008c02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4413      	add	r3, r2
 8008bba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bbc:	4b14      	ldr	r3, [pc, #80]	; (8008c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d209      	bcs.n	8008be0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bcc:	4b13      	ldr	r3, [pc, #76]	; (8008c1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	4b0f      	ldr	r3, [pc, #60]	; (8008c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	4610      	mov	r0, r2
 8008bda:	f7fe f951 	bl	8006e80 <vListInsert>
}
 8008bde:	e010      	b.n	8008c02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008be0:	4b0f      	ldr	r3, [pc, #60]	; (8008c20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	4b0a      	ldr	r3, [pc, #40]	; (8008c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	3304      	adds	r3, #4
 8008bea:	4619      	mov	r1, r3
 8008bec:	4610      	mov	r0, r2
 8008bee:	f7fe f947 	bl	8006e80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bf2:	4b0c      	ldr	r3, [pc, #48]	; (8008c24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d202      	bcs.n	8008c02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008bfc:	4a09      	ldr	r2, [pc, #36]	; (8008c24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	6013      	str	r3, [r2, #0]
}
 8008c02:	bf00      	nop
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	20000ca8 	.word	0x20000ca8
 8008c10:	20000ba4 	.word	0x20000ba4
 8008c14:	20000cac 	.word	0x20000cac
 8008c18:	20000c90 	.word	0x20000c90
 8008c1c:	20000c60 	.word	0x20000c60
 8008c20:	20000c5c 	.word	0x20000c5c
 8008c24:	20000cc4 	.word	0x20000cc4

08008c28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08a      	sub	sp, #40	; 0x28
 8008c2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c32:	f000 faeb 	bl	800920c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c36:	4b1c      	ldr	r3, [pc, #112]	; (8008ca8 <xTimerCreateTimerTask+0x80>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d021      	beq.n	8008c82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c42:	2300      	movs	r3, #0
 8008c44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c46:	1d3a      	adds	r2, r7, #4
 8008c48:	f107 0108 	add.w	r1, r7, #8
 8008c4c:	f107 030c 	add.w	r3, r7, #12
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7f9 fa15 	bl	8002080 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	9202      	str	r2, [sp, #8]
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	2302      	movs	r3, #2
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	2300      	movs	r3, #0
 8008c66:	460a      	mov	r2, r1
 8008c68:	4910      	ldr	r1, [pc, #64]	; (8008cac <xTimerCreateTimerTask+0x84>)
 8008c6a:	4811      	ldr	r0, [pc, #68]	; (8008cb0 <xTimerCreateTimerTask+0x88>)
 8008c6c:	f7fe ffb2 	bl	8007bd4 <xTaskCreateStatic>
 8008c70:	4603      	mov	r3, r0
 8008c72:	4a10      	ldr	r2, [pc, #64]	; (8008cb4 <xTimerCreateTimerTask+0x8c>)
 8008c74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c76:	4b0f      	ldr	r3, [pc, #60]	; (8008cb4 <xTimerCreateTimerTask+0x8c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d001      	beq.n	8008c82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10a      	bne.n	8008c9e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	613b      	str	r3, [r7, #16]
}
 8008c9a:	bf00      	nop
 8008c9c:	e7fe      	b.n	8008c9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c9e:	697b      	ldr	r3, [r7, #20]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3718      	adds	r7, #24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	20000d00 	.word	0x20000d00
 8008cac:	0800cab4 	.word	0x0800cab4
 8008cb0:	08008ded 	.word	0x08008ded
 8008cb4:	20000d04 	.word	0x20000d04

08008cb8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08a      	sub	sp, #40	; 0x28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
 8008cc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10a      	bne.n	8008ce6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	623b      	str	r3, [r7, #32]
}
 8008ce2:	bf00      	nop
 8008ce4:	e7fe      	b.n	8008ce4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ce6:	4b1a      	ldr	r3, [pc, #104]	; (8008d50 <xTimerGenericCommand+0x98>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d02a      	beq.n	8008d44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2b05      	cmp	r3, #5
 8008cfe:	dc18      	bgt.n	8008d32 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d00:	f7ff fd70 	bl	80087e4 <xTaskGetSchedulerState>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d109      	bne.n	8008d1e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d0a:	4b11      	ldr	r3, [pc, #68]	; (8008d50 <xTimerGenericCommand+0x98>)
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	f107 0114 	add.w	r1, r7, #20
 8008d12:	2300      	movs	r3, #0
 8008d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d16:	f7fe fa51 	bl	80071bc <xQueueGenericSend>
 8008d1a:	6278      	str	r0, [r7, #36]	; 0x24
 8008d1c:	e012      	b.n	8008d44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d1e:	4b0c      	ldr	r3, [pc, #48]	; (8008d50 <xTimerGenericCommand+0x98>)
 8008d20:	6818      	ldr	r0, [r3, #0]
 8008d22:	f107 0114 	add.w	r1, r7, #20
 8008d26:	2300      	movs	r3, #0
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f7fe fa47 	bl	80071bc <xQueueGenericSend>
 8008d2e:	6278      	str	r0, [r7, #36]	; 0x24
 8008d30:	e008      	b.n	8008d44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d32:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <xTimerGenericCommand+0x98>)
 8008d34:	6818      	ldr	r0, [r3, #0]
 8008d36:	f107 0114 	add.w	r1, r7, #20
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	f7fe fb3b 	bl	80073b8 <xQueueGenericSendFromISR>
 8008d42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3728      	adds	r7, #40	; 0x28
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	20000d00 	.word	0x20000d00

08008d54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af02      	add	r7, sp, #8
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d5e:	4b22      	ldr	r3, [pc, #136]	; (8008de8 <prvProcessExpiredTimer+0x94>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fe f8c0 	bl	8006ef2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d022      	beq.n	8008dc6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	699a      	ldr	r2, [r3, #24]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	18d1      	adds	r1, r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	6978      	ldr	r0, [r7, #20]
 8008d8e:	f000 f8d1 	bl	8008f34 <prvInsertTimerInActiveList>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d01f      	beq.n	8008dd8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d98:	2300      	movs	r3, #0
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	2100      	movs	r1, #0
 8008da2:	6978      	ldr	r0, [r7, #20]
 8008da4:	f7ff ff88 	bl	8008cb8 <xTimerGenericCommand>
 8008da8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d113      	bne.n	8008dd8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	60fb      	str	r3, [r7, #12]
}
 8008dc2:	bf00      	nop
 8008dc4:	e7fe      	b.n	8008dc4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008dcc:	f023 0301 	bic.w	r3, r3, #1
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	6a1b      	ldr	r3, [r3, #32]
 8008ddc:	6978      	ldr	r0, [r7, #20]
 8008dde:	4798      	blx	r3
}
 8008de0:	bf00      	nop
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	20000cf8 	.word	0x20000cf8

08008dec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008df4:	f107 0308 	add.w	r3, r7, #8
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 f857 	bl	8008eac <prvGetNextExpireTime>
 8008dfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	4619      	mov	r1, r3
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f000 f803 	bl	8008e10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008e0a:	f000 f8d5 	bl	8008fb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e0e:	e7f1      	b.n	8008df4 <prvTimerTask+0x8>

08008e10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e1a:	f7ff f909 	bl	8008030 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e1e:	f107 0308 	add.w	r3, r7, #8
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 f866 	bl	8008ef4 <prvSampleTimeNow>
 8008e28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d130      	bne.n	8008e92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10a      	bne.n	8008e4c <prvProcessTimerOrBlockTask+0x3c>
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d806      	bhi.n	8008e4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e3e:	f7ff f905 	bl	800804c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e42:	68f9      	ldr	r1, [r7, #12]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7ff ff85 	bl	8008d54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e4a:	e024      	b.n	8008e96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d008      	beq.n	8008e64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e52:	4b13      	ldr	r3, [pc, #76]	; (8008ea0 <prvProcessTimerOrBlockTask+0x90>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <prvProcessTimerOrBlockTask+0x50>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e000      	b.n	8008e62 <prvProcessTimerOrBlockTask+0x52>
 8008e60:	2300      	movs	r3, #0
 8008e62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e64:	4b0f      	ldr	r3, [pc, #60]	; (8008ea4 <prvProcessTimerOrBlockTask+0x94>)
 8008e66:	6818      	ldr	r0, [r3, #0]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	4619      	mov	r1, r3
 8008e72:	f7fe fe7b 	bl	8007b6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e76:	f7ff f8e9 	bl	800804c <xTaskResumeAll>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10a      	bne.n	8008e96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e80:	4b09      	ldr	r3, [pc, #36]	; (8008ea8 <prvProcessTimerOrBlockTask+0x98>)
 8008e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e86:	601a      	str	r2, [r3, #0]
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	f3bf 8f6f 	isb	sy
}
 8008e90:	e001      	b.n	8008e96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e92:	f7ff f8db 	bl	800804c <xTaskResumeAll>
}
 8008e96:	bf00      	nop
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20000cfc 	.word	0x20000cfc
 8008ea4:	20000d00 	.word	0x20000d00
 8008ea8:	e000ed04 	.word	0xe000ed04

08008eac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008eb4:	4b0e      	ldr	r3, [pc, #56]	; (8008ef0 <prvGetNextExpireTime+0x44>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d101      	bne.n	8008ec2 <prvGetNextExpireTime+0x16>
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	e000      	b.n	8008ec4 <prvGetNextExpireTime+0x18>
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d105      	bne.n	8008edc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ed0:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <prvGetNextExpireTime+0x44>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	60fb      	str	r3, [r7, #12]
 8008eda:	e001      	b.n	8008ee0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008edc:	2300      	movs	r3, #0
 8008ede:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	20000cf8 	.word	0x20000cf8

08008ef4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008efc:	f7ff f942 	bl	8008184 <xTaskGetTickCount>
 8008f00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008f02:	4b0b      	ldr	r3, [pc, #44]	; (8008f30 <prvSampleTimeNow+0x3c>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d205      	bcs.n	8008f18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f0c:	f000 f91a 	bl	8009144 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	e002      	b.n	8008f1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f1e:	4a04      	ldr	r2, [pc, #16]	; (8008f30 <prvSampleTimeNow+0x3c>)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f24:	68fb      	ldr	r3, [r7, #12]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	20000d08 	.word	0x20000d08

08008f34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
 8008f40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f42:	2300      	movs	r3, #0
 8008f44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d812      	bhi.n	8008f80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	1ad2      	subs	r2, r2, r3
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d302      	bcc.n	8008f6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	617b      	str	r3, [r7, #20]
 8008f6c:	e01b      	b.n	8008fa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f6e:	4b10      	ldr	r3, [pc, #64]	; (8008fb0 <prvInsertTimerInActiveList+0x7c>)
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	3304      	adds	r3, #4
 8008f76:	4619      	mov	r1, r3
 8008f78:	4610      	mov	r0, r2
 8008f7a:	f7fd ff81 	bl	8006e80 <vListInsert>
 8008f7e:	e012      	b.n	8008fa6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d206      	bcs.n	8008f96 <prvInsertTimerInActiveList+0x62>
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d302      	bcc.n	8008f96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f90:	2301      	movs	r3, #1
 8008f92:	617b      	str	r3, [r7, #20]
 8008f94:	e007      	b.n	8008fa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f96:	4b07      	ldr	r3, [pc, #28]	; (8008fb4 <prvInsertTimerInActiveList+0x80>)
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	3304      	adds	r3, #4
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	f7fd ff6d 	bl	8006e80 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008fa6:	697b      	ldr	r3, [r7, #20]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3718      	adds	r7, #24
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	20000cfc 	.word	0x20000cfc
 8008fb4:	20000cf8 	.word	0x20000cf8

08008fb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08c      	sub	sp, #48	; 0x30
 8008fbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fbe:	e0ae      	b.n	800911e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f2c0 80aa 	blt.w	800911c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d004      	beq.n	8008fde <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fd ff8a 	bl	8006ef2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fde:	1d3b      	adds	r3, r7, #4
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7ff ff87 	bl	8008ef4 <prvSampleTimeNow>
 8008fe6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2b09      	cmp	r3, #9
 8008fec:	f200 8097 	bhi.w	800911e <prvProcessReceivedCommands+0x166>
 8008ff0:	a201      	add	r2, pc, #4	; (adr r2, 8008ff8 <prvProcessReceivedCommands+0x40>)
 8008ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff6:	bf00      	nop
 8008ff8:	08009021 	.word	0x08009021
 8008ffc:	08009021 	.word	0x08009021
 8009000:	08009021 	.word	0x08009021
 8009004:	08009095 	.word	0x08009095
 8009008:	080090a9 	.word	0x080090a9
 800900c:	080090f3 	.word	0x080090f3
 8009010:	08009021 	.word	0x08009021
 8009014:	08009021 	.word	0x08009021
 8009018:	08009095 	.word	0x08009095
 800901c:	080090a9 	.word	0x080090a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009026:	f043 0301 	orr.w	r3, r3, #1
 800902a:	b2da      	uxtb	r2, r3
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	699b      	ldr	r3, [r3, #24]
 8009038:	18d1      	adds	r1, r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6a3a      	ldr	r2, [r7, #32]
 800903e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009040:	f7ff ff78 	bl	8008f34 <prvInsertTimerInActiveList>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d069      	beq.n	800911e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009050:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009058:	f003 0304 	and.w	r3, r3, #4
 800905c:	2b00      	cmp	r3, #0
 800905e:	d05e      	beq.n	800911e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	441a      	add	r2, r3
 8009068:	2300      	movs	r3, #0
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	2300      	movs	r3, #0
 800906e:	2100      	movs	r1, #0
 8009070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009072:	f7ff fe21 	bl	8008cb8 <xTimerGenericCommand>
 8009076:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d14f      	bne.n	800911e <prvProcessReceivedCommands+0x166>
	__asm volatile
 800907e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009082:	f383 8811 	msr	BASEPRI, r3
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	61bb      	str	r3, [r7, #24]
}
 8009090:	bf00      	nop
 8009092:	e7fe      	b.n	8009092 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009096:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800909a:	f023 0301 	bic.w	r3, r3, #1
 800909e:	b2da      	uxtb	r2, r3
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80090a6:	e03a      	b.n	800911e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80090ae:	f043 0301 	orr.w	r3, r3, #1
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10a      	bne.n	80090de <prvProcessReceivedCommands+0x126>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	617b      	str	r3, [r7, #20]
}
 80090da:	bf00      	nop
 80090dc:	e7fe      	b.n	80090dc <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80090de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e0:	699a      	ldr	r2, [r3, #24]
 80090e2:	6a3b      	ldr	r3, [r7, #32]
 80090e4:	18d1      	adds	r1, r2, r3
 80090e6:	6a3b      	ldr	r3, [r7, #32]
 80090e8:	6a3a      	ldr	r2, [r7, #32]
 80090ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090ec:	f7ff ff22 	bl	8008f34 <prvInsertTimerInActiveList>
					break;
 80090f0:	e015      	b.n	800911e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80090f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80090f8:	f003 0302 	and.w	r3, r3, #2
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d103      	bne.n	8009108 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8009100:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009102:	f000 fbdd 	bl	80098c0 <vPortFree>
 8009106:	e00a      	b.n	800911e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800910e:	f023 0301 	bic.w	r3, r3, #1
 8009112:	b2da      	uxtb	r2, r3
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800911a:	e000      	b.n	800911e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800911c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800911e:	4b08      	ldr	r3, [pc, #32]	; (8009140 <prvProcessReceivedCommands+0x188>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f107 0108 	add.w	r1, r7, #8
 8009126:	2200      	movs	r2, #0
 8009128:	4618      	mov	r0, r3
 800912a:	f7fe f9e1 	bl	80074f0 <xQueueReceive>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	f47f af45 	bne.w	8008fc0 <prvProcessReceivedCommands+0x8>
	}
}
 8009136:	bf00      	nop
 8009138:	bf00      	nop
 800913a:	3728      	adds	r7, #40	; 0x28
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	20000d00 	.word	0x20000d00

08009144 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b088      	sub	sp, #32
 8009148:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800914a:	e048      	b.n	80091de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800914c:	4b2d      	ldr	r3, [pc, #180]	; (8009204 <prvSwitchTimerLists+0xc0>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009156:	4b2b      	ldr	r3, [pc, #172]	; (8009204 <prvSwitchTimerLists+0xc0>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	3304      	adds	r3, #4
 8009164:	4618      	mov	r0, r3
 8009166:	f7fd fec4 	bl	8006ef2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6a1b      	ldr	r3, [r3, #32]
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	d02e      	beq.n	80091de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	4413      	add	r3, r2
 8009188:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	429a      	cmp	r2, r3
 8009190:	d90e      	bls.n	80091b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800919e:	4b19      	ldr	r3, [pc, #100]	; (8009204 <prvSwitchTimerLists+0xc0>)
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3304      	adds	r3, #4
 80091a6:	4619      	mov	r1, r3
 80091a8:	4610      	mov	r0, r2
 80091aa:	f7fd fe69 	bl	8006e80 <vListInsert>
 80091ae:	e016      	b.n	80091de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091b0:	2300      	movs	r3, #0
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	2300      	movs	r3, #0
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	2100      	movs	r1, #0
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f7ff fd7c 	bl	8008cb8 <xTimerGenericCommand>
 80091c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10a      	bne.n	80091de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80091c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	603b      	str	r3, [r7, #0]
}
 80091da:	bf00      	nop
 80091dc:	e7fe      	b.n	80091dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091de:	4b09      	ldr	r3, [pc, #36]	; (8009204 <prvSwitchTimerLists+0xc0>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1b1      	bne.n	800914c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80091e8:	4b06      	ldr	r3, [pc, #24]	; (8009204 <prvSwitchTimerLists+0xc0>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80091ee:	4b06      	ldr	r3, [pc, #24]	; (8009208 <prvSwitchTimerLists+0xc4>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a04      	ldr	r2, [pc, #16]	; (8009204 <prvSwitchTimerLists+0xc0>)
 80091f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80091f6:	4a04      	ldr	r2, [pc, #16]	; (8009208 <prvSwitchTimerLists+0xc4>)
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	6013      	str	r3, [r2, #0]
}
 80091fc:	bf00      	nop
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	20000cf8 	.word	0x20000cf8
 8009208:	20000cfc 	.word	0x20000cfc

0800920c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009212:	f000 f967 	bl	80094e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009216:	4b15      	ldr	r3, [pc, #84]	; (800926c <prvCheckForValidListAndQueue+0x60>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d120      	bne.n	8009260 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800921e:	4814      	ldr	r0, [pc, #80]	; (8009270 <prvCheckForValidListAndQueue+0x64>)
 8009220:	f7fd fddd 	bl	8006dde <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009224:	4813      	ldr	r0, [pc, #76]	; (8009274 <prvCheckForValidListAndQueue+0x68>)
 8009226:	f7fd fdda 	bl	8006dde <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800922a:	4b13      	ldr	r3, [pc, #76]	; (8009278 <prvCheckForValidListAndQueue+0x6c>)
 800922c:	4a10      	ldr	r2, [pc, #64]	; (8009270 <prvCheckForValidListAndQueue+0x64>)
 800922e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009230:	4b12      	ldr	r3, [pc, #72]	; (800927c <prvCheckForValidListAndQueue+0x70>)
 8009232:	4a10      	ldr	r2, [pc, #64]	; (8009274 <prvCheckForValidListAndQueue+0x68>)
 8009234:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009236:	2300      	movs	r3, #0
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	4b11      	ldr	r3, [pc, #68]	; (8009280 <prvCheckForValidListAndQueue+0x74>)
 800923c:	4a11      	ldr	r2, [pc, #68]	; (8009284 <prvCheckForValidListAndQueue+0x78>)
 800923e:	210c      	movs	r1, #12
 8009240:	200a      	movs	r0, #10
 8009242:	f7fd fee9 	bl	8007018 <xQueueGenericCreateStatic>
 8009246:	4603      	mov	r3, r0
 8009248:	4a08      	ldr	r2, [pc, #32]	; (800926c <prvCheckForValidListAndQueue+0x60>)
 800924a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800924c:	4b07      	ldr	r3, [pc, #28]	; (800926c <prvCheckForValidListAndQueue+0x60>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d005      	beq.n	8009260 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009254:	4b05      	ldr	r3, [pc, #20]	; (800926c <prvCheckForValidListAndQueue+0x60>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	490b      	ldr	r1, [pc, #44]	; (8009288 <prvCheckForValidListAndQueue+0x7c>)
 800925a:	4618      	mov	r0, r3
 800925c:	f7fe fc5c 	bl	8007b18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009260:	f000 f970 	bl	8009544 <vPortExitCritical>
}
 8009264:	bf00      	nop
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	20000d00 	.word	0x20000d00
 8009270:	20000cd0 	.word	0x20000cd0
 8009274:	20000ce4 	.word	0x20000ce4
 8009278:	20000cf8 	.word	0x20000cf8
 800927c:	20000cfc 	.word	0x20000cfc
 8009280:	20000d84 	.word	0x20000d84
 8009284:	20000d0c 	.word	0x20000d0c
 8009288:	0800cabc 	.word	0x0800cabc

0800928c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3b04      	subs	r3, #4
 800929c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	3b04      	subs	r3, #4
 80092aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	f023 0201 	bic.w	r2, r3, #1
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	3b04      	subs	r3, #4
 80092ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092bc:	4a0c      	ldr	r2, [pc, #48]	; (80092f0 <pxPortInitialiseStack+0x64>)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3b14      	subs	r3, #20
 80092c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	3b04      	subs	r3, #4
 80092d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f06f 0202 	mvn.w	r2, #2
 80092da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	3b20      	subs	r3, #32
 80092e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092e2:	68fb      	ldr	r3, [r7, #12]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	080092f5 	.word	0x080092f5

080092f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80092fa:	2300      	movs	r3, #0
 80092fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092fe:	4b12      	ldr	r3, [pc, #72]	; (8009348 <prvTaskExitError+0x54>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009306:	d00a      	beq.n	800931e <prvTaskExitError+0x2a>
	__asm volatile
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	60fb      	str	r3, [r7, #12]
}
 800931a:	bf00      	nop
 800931c:	e7fe      	b.n	800931c <prvTaskExitError+0x28>
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	60bb      	str	r3, [r7, #8]
}
 8009330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009332:	bf00      	nop
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0fc      	beq.n	8009334 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800933a:	bf00      	nop
 800933c:	bf00      	nop
 800933e:	3714      	adds	r7, #20
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	2000000c 	.word	0x2000000c
 800934c:	00000000 	.word	0x00000000

08009350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009350:	4b07      	ldr	r3, [pc, #28]	; (8009370 <pxCurrentTCBConst2>)
 8009352:	6819      	ldr	r1, [r3, #0]
 8009354:	6808      	ldr	r0, [r1, #0]
 8009356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935a:	f380 8809 	msr	PSP, r0
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f04f 0000 	mov.w	r0, #0
 8009366:	f380 8811 	msr	BASEPRI, r0
 800936a:	4770      	bx	lr
 800936c:	f3af 8000 	nop.w

08009370 <pxCurrentTCBConst2>:
 8009370:	20000ba4 	.word	0x20000ba4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009374:	bf00      	nop
 8009376:	bf00      	nop

08009378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009378:	4808      	ldr	r0, [pc, #32]	; (800939c <prvPortStartFirstTask+0x24>)
 800937a:	6800      	ldr	r0, [r0, #0]
 800937c:	6800      	ldr	r0, [r0, #0]
 800937e:	f380 8808 	msr	MSP, r0
 8009382:	f04f 0000 	mov.w	r0, #0
 8009386:	f380 8814 	msr	CONTROL, r0
 800938a:	b662      	cpsie	i
 800938c:	b661      	cpsie	f
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	df00      	svc	0
 8009398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800939a:	bf00      	nop
 800939c:	e000ed08 	.word	0xe000ed08

080093a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80093a6:	4b46      	ldr	r3, [pc, #280]	; (80094c0 <xPortStartScheduler+0x120>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a46      	ldr	r2, [pc, #280]	; (80094c4 <xPortStartScheduler+0x124>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d10a      	bne.n	80093c6 <xPortStartScheduler+0x26>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	613b      	str	r3, [r7, #16]
}
 80093c2:	bf00      	nop
 80093c4:	e7fe      	b.n	80093c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80093c6:	4b3e      	ldr	r3, [pc, #248]	; (80094c0 <xPortStartScheduler+0x120>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a3f      	ldr	r2, [pc, #252]	; (80094c8 <xPortStartScheduler+0x128>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d10a      	bne.n	80093e6 <xPortStartScheduler+0x46>
	__asm volatile
 80093d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	60fb      	str	r3, [r7, #12]
}
 80093e2:	bf00      	nop
 80093e4:	e7fe      	b.n	80093e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093e6:	4b39      	ldr	r3, [pc, #228]	; (80094cc <xPortStartScheduler+0x12c>)
 80093e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	22ff      	movs	r2, #255	; 0xff
 80093f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	b2db      	uxtb	r3, r3
 8009404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009408:	b2da      	uxtb	r2, r3
 800940a:	4b31      	ldr	r3, [pc, #196]	; (80094d0 <xPortStartScheduler+0x130>)
 800940c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800940e:	4b31      	ldr	r3, [pc, #196]	; (80094d4 <xPortStartScheduler+0x134>)
 8009410:	2207      	movs	r2, #7
 8009412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009414:	e009      	b.n	800942a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009416:	4b2f      	ldr	r3, [pc, #188]	; (80094d4 <xPortStartScheduler+0x134>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3b01      	subs	r3, #1
 800941c:	4a2d      	ldr	r2, [pc, #180]	; (80094d4 <xPortStartScheduler+0x134>)
 800941e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009420:	78fb      	ldrb	r3, [r7, #3]
 8009422:	b2db      	uxtb	r3, r3
 8009424:	005b      	lsls	r3, r3, #1
 8009426:	b2db      	uxtb	r3, r3
 8009428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800942a:	78fb      	ldrb	r3, [r7, #3]
 800942c:	b2db      	uxtb	r3, r3
 800942e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009432:	2b80      	cmp	r3, #128	; 0x80
 8009434:	d0ef      	beq.n	8009416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009436:	4b27      	ldr	r3, [pc, #156]	; (80094d4 <xPortStartScheduler+0x134>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f1c3 0307 	rsb	r3, r3, #7
 800943e:	2b04      	cmp	r3, #4
 8009440:	d00a      	beq.n	8009458 <xPortStartScheduler+0xb8>
	__asm volatile
 8009442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009446:	f383 8811 	msr	BASEPRI, r3
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	f3bf 8f4f 	dsb	sy
 8009452:	60bb      	str	r3, [r7, #8]
}
 8009454:	bf00      	nop
 8009456:	e7fe      	b.n	8009456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009458:	4b1e      	ldr	r3, [pc, #120]	; (80094d4 <xPortStartScheduler+0x134>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	021b      	lsls	r3, r3, #8
 800945e:	4a1d      	ldr	r2, [pc, #116]	; (80094d4 <xPortStartScheduler+0x134>)
 8009460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009462:	4b1c      	ldr	r3, [pc, #112]	; (80094d4 <xPortStartScheduler+0x134>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800946a:	4a1a      	ldr	r2, [pc, #104]	; (80094d4 <xPortStartScheduler+0x134>)
 800946c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	b2da      	uxtb	r2, r3
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009476:	4b18      	ldr	r3, [pc, #96]	; (80094d8 <xPortStartScheduler+0x138>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a17      	ldr	r2, [pc, #92]	; (80094d8 <xPortStartScheduler+0x138>)
 800947c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009482:	4b15      	ldr	r3, [pc, #84]	; (80094d8 <xPortStartScheduler+0x138>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a14      	ldr	r2, [pc, #80]	; (80094d8 <xPortStartScheduler+0x138>)
 8009488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800948c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800948e:	f000 f8dd 	bl	800964c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009492:	4b12      	ldr	r3, [pc, #72]	; (80094dc <xPortStartScheduler+0x13c>)
 8009494:	2200      	movs	r2, #0
 8009496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009498:	f000 f8fc 	bl	8009694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800949c:	4b10      	ldr	r3, [pc, #64]	; (80094e0 <xPortStartScheduler+0x140>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a0f      	ldr	r2, [pc, #60]	; (80094e0 <xPortStartScheduler+0x140>)
 80094a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80094a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80094a8:	f7ff ff66 	bl	8009378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80094ac:	f7fe ff32 	bl	8008314 <vTaskSwitchContext>
	prvTaskExitError();
 80094b0:	f7ff ff20 	bl	80092f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3718      	adds	r7, #24
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	e000ed00 	.word	0xe000ed00
 80094c4:	410fc271 	.word	0x410fc271
 80094c8:	410fc270 	.word	0x410fc270
 80094cc:	e000e400 	.word	0xe000e400
 80094d0:	20000dcc 	.word	0x20000dcc
 80094d4:	20000dd0 	.word	0x20000dd0
 80094d8:	e000ed20 	.word	0xe000ed20
 80094dc:	2000000c 	.word	0x2000000c
 80094e0:	e000ef34 	.word	0xe000ef34

080094e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	607b      	str	r3, [r7, #4]
}
 80094fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094fe:	4b0f      	ldr	r3, [pc, #60]	; (800953c <vPortEnterCritical+0x58>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3301      	adds	r3, #1
 8009504:	4a0d      	ldr	r2, [pc, #52]	; (800953c <vPortEnterCritical+0x58>)
 8009506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009508:	4b0c      	ldr	r3, [pc, #48]	; (800953c <vPortEnterCritical+0x58>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d10f      	bne.n	8009530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009510:	4b0b      	ldr	r3, [pc, #44]	; (8009540 <vPortEnterCritical+0x5c>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	b2db      	uxtb	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00a      	beq.n	8009530 <vPortEnterCritical+0x4c>
	__asm volatile
 800951a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951e:	f383 8811 	msr	BASEPRI, r3
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	603b      	str	r3, [r7, #0]
}
 800952c:	bf00      	nop
 800952e:	e7fe      	b.n	800952e <vPortEnterCritical+0x4a>
	}
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	2000000c 	.word	0x2000000c
 8009540:	e000ed04 	.word	0xe000ed04

08009544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800954a:	4b12      	ldr	r3, [pc, #72]	; (8009594 <vPortExitCritical+0x50>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10a      	bne.n	8009568 <vPortExitCritical+0x24>
	__asm volatile
 8009552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009556:	f383 8811 	msr	BASEPRI, r3
 800955a:	f3bf 8f6f 	isb	sy
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	607b      	str	r3, [r7, #4]
}
 8009564:	bf00      	nop
 8009566:	e7fe      	b.n	8009566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009568:	4b0a      	ldr	r3, [pc, #40]	; (8009594 <vPortExitCritical+0x50>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3b01      	subs	r3, #1
 800956e:	4a09      	ldr	r2, [pc, #36]	; (8009594 <vPortExitCritical+0x50>)
 8009570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009572:	4b08      	ldr	r3, [pc, #32]	; (8009594 <vPortExitCritical+0x50>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d105      	bne.n	8009586 <vPortExitCritical+0x42>
 800957a:	2300      	movs	r3, #0
 800957c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	f383 8811 	msr	BASEPRI, r3
}
 8009584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	2000000c 	.word	0x2000000c
	...

080095a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095a0:	f3ef 8009 	mrs	r0, PSP
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	4b15      	ldr	r3, [pc, #84]	; (8009600 <pxCurrentTCBConst>)
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	f01e 0f10 	tst.w	lr, #16
 80095b0:	bf08      	it	eq
 80095b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80095b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ba:	6010      	str	r0, [r2, #0]
 80095bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80095c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80095c4:	f380 8811 	msr	BASEPRI, r0
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f7fe fea0 	bl	8008314 <vTaskSwitchContext>
 80095d4:	f04f 0000 	mov.w	r0, #0
 80095d8:	f380 8811 	msr	BASEPRI, r0
 80095dc:	bc09      	pop	{r0, r3}
 80095de:	6819      	ldr	r1, [r3, #0]
 80095e0:	6808      	ldr	r0, [r1, #0]
 80095e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e6:	f01e 0f10 	tst.w	lr, #16
 80095ea:	bf08      	it	eq
 80095ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095f0:	f380 8809 	msr	PSP, r0
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	f3af 8000 	nop.w

08009600 <pxCurrentTCBConst>:
 8009600:	20000ba4 	.word	0x20000ba4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009604:	bf00      	nop
 8009606:	bf00      	nop

08009608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	607b      	str	r3, [r7, #4]
}
 8009620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009622:	f7fe fdbf 	bl	80081a4 <xTaskIncrementTick>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d003      	beq.n	8009634 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800962c:	4b06      	ldr	r3, [pc, #24]	; (8009648 <SysTick_Handler+0x40>)
 800962e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	2300      	movs	r3, #0
 8009636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	f383 8811 	msr	BASEPRI, r3
}
 800963e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	e000ed04 	.word	0xe000ed04

0800964c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800964c:	b480      	push	{r7}
 800964e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009650:	4b0b      	ldr	r3, [pc, #44]	; (8009680 <vPortSetupTimerInterrupt+0x34>)
 8009652:	2200      	movs	r2, #0
 8009654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009656:	4b0b      	ldr	r3, [pc, #44]	; (8009684 <vPortSetupTimerInterrupt+0x38>)
 8009658:	2200      	movs	r2, #0
 800965a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800965c:	4b0a      	ldr	r3, [pc, #40]	; (8009688 <vPortSetupTimerInterrupt+0x3c>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a0a      	ldr	r2, [pc, #40]	; (800968c <vPortSetupTimerInterrupt+0x40>)
 8009662:	fba2 2303 	umull	r2, r3, r2, r3
 8009666:	099b      	lsrs	r3, r3, #6
 8009668:	4a09      	ldr	r2, [pc, #36]	; (8009690 <vPortSetupTimerInterrupt+0x44>)
 800966a:	3b01      	subs	r3, #1
 800966c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800966e:	4b04      	ldr	r3, [pc, #16]	; (8009680 <vPortSetupTimerInterrupt+0x34>)
 8009670:	2207      	movs	r2, #7
 8009672:	601a      	str	r2, [r3, #0]
}
 8009674:	bf00      	nop
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	e000e010 	.word	0xe000e010
 8009684:	e000e018 	.word	0xe000e018
 8009688:	20000000 	.word	0x20000000
 800968c:	10624dd3 	.word	0x10624dd3
 8009690:	e000e014 	.word	0xe000e014

08009694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80096a4 <vPortEnableVFP+0x10>
 8009698:	6801      	ldr	r1, [r0, #0]
 800969a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800969e:	6001      	str	r1, [r0, #0]
 80096a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80096a2:	bf00      	nop
 80096a4:	e000ed88 	.word	0xe000ed88

080096a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80096ae:	f3ef 8305 	mrs	r3, IPSR
 80096b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b0f      	cmp	r3, #15
 80096b8:	d914      	bls.n	80096e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80096ba:	4a17      	ldr	r2, [pc, #92]	; (8009718 <vPortValidateInterruptPriority+0x70>)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4413      	add	r3, r2
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80096c4:	4b15      	ldr	r3, [pc, #84]	; (800971c <vPortValidateInterruptPriority+0x74>)
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	7afa      	ldrb	r2, [r7, #11]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d20a      	bcs.n	80096e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80096ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	607b      	str	r3, [r7, #4]
}
 80096e0:	bf00      	nop
 80096e2:	e7fe      	b.n	80096e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096e4:	4b0e      	ldr	r3, [pc, #56]	; (8009720 <vPortValidateInterruptPriority+0x78>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096ec:	4b0d      	ldr	r3, [pc, #52]	; (8009724 <vPortValidateInterruptPriority+0x7c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d90a      	bls.n	800970a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80096f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	603b      	str	r3, [r7, #0]
}
 8009706:	bf00      	nop
 8009708:	e7fe      	b.n	8009708 <vPortValidateInterruptPriority+0x60>
	}
 800970a:	bf00      	nop
 800970c:	3714      	adds	r7, #20
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	e000e3f0 	.word	0xe000e3f0
 800971c:	20000dcc 	.word	0x20000dcc
 8009720:	e000ed0c 	.word	0xe000ed0c
 8009724:	20000dd0 	.word	0x20000dd0

08009728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b08a      	sub	sp, #40	; 0x28
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009730:	2300      	movs	r3, #0
 8009732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009734:	f7fe fc7c 	bl	8008030 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009738:	4b5b      	ldr	r3, [pc, #364]	; (80098a8 <pvPortMalloc+0x180>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009740:	f000 f920 	bl	8009984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009744:	4b59      	ldr	r3, [pc, #356]	; (80098ac <pvPortMalloc+0x184>)
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4013      	ands	r3, r2
 800974c:	2b00      	cmp	r3, #0
 800974e:	f040 8093 	bne.w	8009878 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d01d      	beq.n	8009794 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009758:	2208      	movs	r2, #8
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4413      	add	r3, r2
 800975e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f003 0307 	and.w	r3, r3, #7
 8009766:	2b00      	cmp	r3, #0
 8009768:	d014      	beq.n	8009794 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f023 0307 	bic.w	r3, r3, #7
 8009770:	3308      	adds	r3, #8
 8009772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00a      	beq.n	8009794 <pvPortMalloc+0x6c>
	__asm volatile
 800977e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009782:	f383 8811 	msr	BASEPRI, r3
 8009786:	f3bf 8f6f 	isb	sy
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	617b      	str	r3, [r7, #20]
}
 8009790:	bf00      	nop
 8009792:	e7fe      	b.n	8009792 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d06e      	beq.n	8009878 <pvPortMalloc+0x150>
 800979a:	4b45      	ldr	r3, [pc, #276]	; (80098b0 <pvPortMalloc+0x188>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d869      	bhi.n	8009878 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80097a4:	4b43      	ldr	r3, [pc, #268]	; (80098b4 <pvPortMalloc+0x18c>)
 80097a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80097a8:	4b42      	ldr	r3, [pc, #264]	; (80098b4 <pvPortMalloc+0x18c>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097ae:	e004      	b.n	80097ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d903      	bls.n	80097cc <pvPortMalloc+0xa4>
 80097c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1f1      	bne.n	80097b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097cc:	4b36      	ldr	r3, [pc, #216]	; (80098a8 <pvPortMalloc+0x180>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d050      	beq.n	8009878 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097d6:	6a3b      	ldr	r3, [r7, #32]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2208      	movs	r2, #8
 80097dc:	4413      	add	r3, r2
 80097de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	1ad2      	subs	r2, r2, r3
 80097f0:	2308      	movs	r3, #8
 80097f2:	005b      	lsls	r3, r3, #1
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d91f      	bls.n	8009838 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4413      	add	r3, r2
 80097fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	f003 0307 	and.w	r3, r3, #7
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00a      	beq.n	8009820 <pvPortMalloc+0xf8>
	__asm volatile
 800980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	613b      	str	r3, [r7, #16]
}
 800981c:	bf00      	nop
 800981e:	e7fe      	b.n	800981e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	1ad2      	subs	r2, r2, r3
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009832:	69b8      	ldr	r0, [r7, #24]
 8009834:	f000 f908 	bl	8009a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009838:	4b1d      	ldr	r3, [pc, #116]	; (80098b0 <pvPortMalloc+0x188>)
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	4a1b      	ldr	r2, [pc, #108]	; (80098b0 <pvPortMalloc+0x188>)
 8009844:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009846:	4b1a      	ldr	r3, [pc, #104]	; (80098b0 <pvPortMalloc+0x188>)
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	4b1b      	ldr	r3, [pc, #108]	; (80098b8 <pvPortMalloc+0x190>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	429a      	cmp	r2, r3
 8009850:	d203      	bcs.n	800985a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009852:	4b17      	ldr	r3, [pc, #92]	; (80098b0 <pvPortMalloc+0x188>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a18      	ldr	r2, [pc, #96]	; (80098b8 <pvPortMalloc+0x190>)
 8009858:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	4b13      	ldr	r3, [pc, #76]	; (80098ac <pvPortMalloc+0x184>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	431a      	orrs	r2, r3
 8009864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009866:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986a:	2200      	movs	r2, #0
 800986c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800986e:	4b13      	ldr	r3, [pc, #76]	; (80098bc <pvPortMalloc+0x194>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	3301      	adds	r3, #1
 8009874:	4a11      	ldr	r2, [pc, #68]	; (80098bc <pvPortMalloc+0x194>)
 8009876:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009878:	f7fe fbe8 	bl	800804c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	f003 0307 	and.w	r3, r3, #7
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00a      	beq.n	800989c <pvPortMalloc+0x174>
	__asm volatile
 8009886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	60fb      	str	r3, [r7, #12]
}
 8009898:	bf00      	nop
 800989a:	e7fe      	b.n	800989a <pvPortMalloc+0x172>
	return pvReturn;
 800989c:	69fb      	ldr	r3, [r7, #28]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3728      	adds	r7, #40	; 0x28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	200049dc 	.word	0x200049dc
 80098ac:	200049f0 	.word	0x200049f0
 80098b0:	200049e0 	.word	0x200049e0
 80098b4:	200049d4 	.word	0x200049d4
 80098b8:	200049e4 	.word	0x200049e4
 80098bc:	200049e8 	.word	0x200049e8

080098c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d04d      	beq.n	800996e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098d2:	2308      	movs	r3, #8
 80098d4:	425b      	negs	r3, r3
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	4413      	add	r3, r2
 80098da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	4b24      	ldr	r3, [pc, #144]	; (8009978 <vPortFree+0xb8>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4013      	ands	r3, r2
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10a      	bne.n	8009904 <vPortFree+0x44>
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	60fb      	str	r3, [r7, #12]
}
 8009900:	bf00      	nop
 8009902:	e7fe      	b.n	8009902 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00a      	beq.n	8009922 <vPortFree+0x62>
	__asm volatile
 800990c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009910:	f383 8811 	msr	BASEPRI, r3
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	60bb      	str	r3, [r7, #8]
}
 800991e:	bf00      	nop
 8009920:	e7fe      	b.n	8009920 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	685a      	ldr	r2, [r3, #4]
 8009926:	4b14      	ldr	r3, [pc, #80]	; (8009978 <vPortFree+0xb8>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4013      	ands	r3, r2
 800992c:	2b00      	cmp	r3, #0
 800992e:	d01e      	beq.n	800996e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d11a      	bne.n	800996e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	4b0e      	ldr	r3, [pc, #56]	; (8009978 <vPortFree+0xb8>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	43db      	mvns	r3, r3
 8009942:	401a      	ands	r2, r3
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009948:	f7fe fb72 	bl	8008030 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	4b0a      	ldr	r3, [pc, #40]	; (800997c <vPortFree+0xbc>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4413      	add	r3, r2
 8009956:	4a09      	ldr	r2, [pc, #36]	; (800997c <vPortFree+0xbc>)
 8009958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800995a:	6938      	ldr	r0, [r7, #16]
 800995c:	f000 f874 	bl	8009a48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009960:	4b07      	ldr	r3, [pc, #28]	; (8009980 <vPortFree+0xc0>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3301      	adds	r3, #1
 8009966:	4a06      	ldr	r2, [pc, #24]	; (8009980 <vPortFree+0xc0>)
 8009968:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800996a:	f7fe fb6f 	bl	800804c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800996e:	bf00      	nop
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	200049f0 	.word	0x200049f0
 800997c:	200049e0 	.word	0x200049e0
 8009980:	200049ec 	.word	0x200049ec

08009984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800998a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800998e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009990:	4b27      	ldr	r3, [pc, #156]	; (8009a30 <prvHeapInit+0xac>)
 8009992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f003 0307 	and.w	r3, r3, #7
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00c      	beq.n	80099b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3307      	adds	r3, #7
 80099a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f023 0307 	bic.w	r3, r3, #7
 80099aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	4a1f      	ldr	r2, [pc, #124]	; (8009a30 <prvHeapInit+0xac>)
 80099b4:	4413      	add	r3, r2
 80099b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80099bc:	4a1d      	ldr	r2, [pc, #116]	; (8009a34 <prvHeapInit+0xb0>)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099c2:	4b1c      	ldr	r3, [pc, #112]	; (8009a34 <prvHeapInit+0xb0>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	4413      	add	r3, r2
 80099ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099d0:	2208      	movs	r2, #8
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	1a9b      	subs	r3, r3, r2
 80099d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f023 0307 	bic.w	r3, r3, #7
 80099de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	4a15      	ldr	r2, [pc, #84]	; (8009a38 <prvHeapInit+0xb4>)
 80099e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099e6:	4b14      	ldr	r3, [pc, #80]	; (8009a38 <prvHeapInit+0xb4>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2200      	movs	r2, #0
 80099ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099ee:	4b12      	ldr	r3, [pc, #72]	; (8009a38 <prvHeapInit+0xb4>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2200      	movs	r2, #0
 80099f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	1ad2      	subs	r2, r2, r3
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a04:	4b0c      	ldr	r3, [pc, #48]	; (8009a38 <prvHeapInit+0xb4>)
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	4a0a      	ldr	r2, [pc, #40]	; (8009a3c <prvHeapInit+0xb8>)
 8009a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	4a09      	ldr	r2, [pc, #36]	; (8009a40 <prvHeapInit+0xbc>)
 8009a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a1c:	4b09      	ldr	r3, [pc, #36]	; (8009a44 <prvHeapInit+0xc0>)
 8009a1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a22:	601a      	str	r2, [r3, #0]
}
 8009a24:	bf00      	nop
 8009a26:	3714      	adds	r7, #20
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr
 8009a30:	20000dd4 	.word	0x20000dd4
 8009a34:	200049d4 	.word	0x200049d4
 8009a38:	200049dc 	.word	0x200049dc
 8009a3c:	200049e4 	.word	0x200049e4
 8009a40:	200049e0 	.word	0x200049e0
 8009a44:	200049f0 	.word	0x200049f0

08009a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a50:	4b28      	ldr	r3, [pc, #160]	; (8009af4 <prvInsertBlockIntoFreeList+0xac>)
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	e002      	b.n	8009a5c <prvInsertBlockIntoFreeList+0x14>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d8f7      	bhi.n	8009a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	4413      	add	r3, r2
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d108      	bne.n	8009a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	441a      	add	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	441a      	add	r2, r3
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d118      	bne.n	8009ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	4b15      	ldr	r3, [pc, #84]	; (8009af8 <prvInsertBlockIntoFreeList+0xb0>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d00d      	beq.n	8009ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685a      	ldr	r2, [r3, #4]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	441a      	add	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	e008      	b.n	8009ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ac6:	4b0c      	ldr	r3, [pc, #48]	; (8009af8 <prvInsertBlockIntoFreeList+0xb0>)
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	601a      	str	r2, [r3, #0]
 8009ace:	e003      	b.n	8009ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d002      	beq.n	8009ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ae6:	bf00      	nop
 8009ae8:	3714      	adds	r7, #20
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	200049d4 	.word	0x200049d4
 8009af8:	200049dc 	.word	0x200049dc

08009afc <__errno>:
 8009afc:	4b01      	ldr	r3, [pc, #4]	; (8009b04 <__errno+0x8>)
 8009afe:	6818      	ldr	r0, [r3, #0]
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	20000010 	.word	0x20000010

08009b08 <__libc_init_array>:
 8009b08:	b570      	push	{r4, r5, r6, lr}
 8009b0a:	4d0d      	ldr	r5, [pc, #52]	; (8009b40 <__libc_init_array+0x38>)
 8009b0c:	4c0d      	ldr	r4, [pc, #52]	; (8009b44 <__libc_init_array+0x3c>)
 8009b0e:	1b64      	subs	r4, r4, r5
 8009b10:	10a4      	asrs	r4, r4, #2
 8009b12:	2600      	movs	r6, #0
 8009b14:	42a6      	cmp	r6, r4
 8009b16:	d109      	bne.n	8009b2c <__libc_init_array+0x24>
 8009b18:	4d0b      	ldr	r5, [pc, #44]	; (8009b48 <__libc_init_array+0x40>)
 8009b1a:	4c0c      	ldr	r4, [pc, #48]	; (8009b4c <__libc_init_array+0x44>)
 8009b1c:	f002 ff02 	bl	800c924 <_init>
 8009b20:	1b64      	subs	r4, r4, r5
 8009b22:	10a4      	asrs	r4, r4, #2
 8009b24:	2600      	movs	r6, #0
 8009b26:	42a6      	cmp	r6, r4
 8009b28:	d105      	bne.n	8009b36 <__libc_init_array+0x2e>
 8009b2a:	bd70      	pop	{r4, r5, r6, pc}
 8009b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b30:	4798      	blx	r3
 8009b32:	3601      	adds	r6, #1
 8009b34:	e7ee      	b.n	8009b14 <__libc_init_array+0xc>
 8009b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b3a:	4798      	blx	r3
 8009b3c:	3601      	adds	r6, #1
 8009b3e:	e7f2      	b.n	8009b26 <__libc_init_array+0x1e>
 8009b40:	0800cec4 	.word	0x0800cec4
 8009b44:	0800cec4 	.word	0x0800cec4
 8009b48:	0800cec4 	.word	0x0800cec4
 8009b4c:	0800cec8 	.word	0x0800cec8

08009b50 <memcpy>:
 8009b50:	440a      	add	r2, r1
 8009b52:	4291      	cmp	r1, r2
 8009b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b58:	d100      	bne.n	8009b5c <memcpy+0xc>
 8009b5a:	4770      	bx	lr
 8009b5c:	b510      	push	{r4, lr}
 8009b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b66:	4291      	cmp	r1, r2
 8009b68:	d1f9      	bne.n	8009b5e <memcpy+0xe>
 8009b6a:	bd10      	pop	{r4, pc}

08009b6c <memset>:
 8009b6c:	4402      	add	r2, r0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d100      	bne.n	8009b76 <memset+0xa>
 8009b74:	4770      	bx	lr
 8009b76:	f803 1b01 	strb.w	r1, [r3], #1
 8009b7a:	e7f9      	b.n	8009b70 <memset+0x4>

08009b7c <__cvt>:
 8009b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b80:	ec55 4b10 	vmov	r4, r5, d0
 8009b84:	2d00      	cmp	r5, #0
 8009b86:	460e      	mov	r6, r1
 8009b88:	4619      	mov	r1, r3
 8009b8a:	462b      	mov	r3, r5
 8009b8c:	bfbb      	ittet	lt
 8009b8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b92:	461d      	movlt	r5, r3
 8009b94:	2300      	movge	r3, #0
 8009b96:	232d      	movlt	r3, #45	; 0x2d
 8009b98:	700b      	strb	r3, [r1, #0]
 8009b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ba0:	4691      	mov	r9, r2
 8009ba2:	f023 0820 	bic.w	r8, r3, #32
 8009ba6:	bfbc      	itt	lt
 8009ba8:	4622      	movlt	r2, r4
 8009baa:	4614      	movlt	r4, r2
 8009bac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bb0:	d005      	beq.n	8009bbe <__cvt+0x42>
 8009bb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009bb6:	d100      	bne.n	8009bba <__cvt+0x3e>
 8009bb8:	3601      	adds	r6, #1
 8009bba:	2102      	movs	r1, #2
 8009bbc:	e000      	b.n	8009bc0 <__cvt+0x44>
 8009bbe:	2103      	movs	r1, #3
 8009bc0:	ab03      	add	r3, sp, #12
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	ab02      	add	r3, sp, #8
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	ec45 4b10 	vmov	d0, r4, r5
 8009bcc:	4653      	mov	r3, sl
 8009bce:	4632      	mov	r2, r6
 8009bd0:	f000 fcea 	bl	800a5a8 <_dtoa_r>
 8009bd4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009bd8:	4607      	mov	r7, r0
 8009bda:	d102      	bne.n	8009be2 <__cvt+0x66>
 8009bdc:	f019 0f01 	tst.w	r9, #1
 8009be0:	d022      	beq.n	8009c28 <__cvt+0xac>
 8009be2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009be6:	eb07 0906 	add.w	r9, r7, r6
 8009bea:	d110      	bne.n	8009c0e <__cvt+0x92>
 8009bec:	783b      	ldrb	r3, [r7, #0]
 8009bee:	2b30      	cmp	r3, #48	; 0x30
 8009bf0:	d10a      	bne.n	8009c08 <__cvt+0x8c>
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	f7f6 ff6d 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bfe:	b918      	cbnz	r0, 8009c08 <__cvt+0x8c>
 8009c00:	f1c6 0601 	rsb	r6, r6, #1
 8009c04:	f8ca 6000 	str.w	r6, [sl]
 8009c08:	f8da 3000 	ldr.w	r3, [sl]
 8009c0c:	4499      	add	r9, r3
 8009c0e:	2200      	movs	r2, #0
 8009c10:	2300      	movs	r3, #0
 8009c12:	4620      	mov	r0, r4
 8009c14:	4629      	mov	r1, r5
 8009c16:	f7f6 ff5f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c1a:	b108      	cbz	r0, 8009c20 <__cvt+0xa4>
 8009c1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c20:	2230      	movs	r2, #48	; 0x30
 8009c22:	9b03      	ldr	r3, [sp, #12]
 8009c24:	454b      	cmp	r3, r9
 8009c26:	d307      	bcc.n	8009c38 <__cvt+0xbc>
 8009c28:	9b03      	ldr	r3, [sp, #12]
 8009c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c2c:	1bdb      	subs	r3, r3, r7
 8009c2e:	4638      	mov	r0, r7
 8009c30:	6013      	str	r3, [r2, #0]
 8009c32:	b004      	add	sp, #16
 8009c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c38:	1c59      	adds	r1, r3, #1
 8009c3a:	9103      	str	r1, [sp, #12]
 8009c3c:	701a      	strb	r2, [r3, #0]
 8009c3e:	e7f0      	b.n	8009c22 <__cvt+0xa6>

08009c40 <__exponent>:
 8009c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c42:	4603      	mov	r3, r0
 8009c44:	2900      	cmp	r1, #0
 8009c46:	bfb8      	it	lt
 8009c48:	4249      	neglt	r1, r1
 8009c4a:	f803 2b02 	strb.w	r2, [r3], #2
 8009c4e:	bfb4      	ite	lt
 8009c50:	222d      	movlt	r2, #45	; 0x2d
 8009c52:	222b      	movge	r2, #43	; 0x2b
 8009c54:	2909      	cmp	r1, #9
 8009c56:	7042      	strb	r2, [r0, #1]
 8009c58:	dd2a      	ble.n	8009cb0 <__exponent+0x70>
 8009c5a:	f10d 0407 	add.w	r4, sp, #7
 8009c5e:	46a4      	mov	ip, r4
 8009c60:	270a      	movs	r7, #10
 8009c62:	46a6      	mov	lr, r4
 8009c64:	460a      	mov	r2, r1
 8009c66:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c6a:	fb07 1516 	mls	r5, r7, r6, r1
 8009c6e:	3530      	adds	r5, #48	; 0x30
 8009c70:	2a63      	cmp	r2, #99	; 0x63
 8009c72:	f104 34ff 	add.w	r4, r4, #4294967295
 8009c76:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	dcf1      	bgt.n	8009c62 <__exponent+0x22>
 8009c7e:	3130      	adds	r1, #48	; 0x30
 8009c80:	f1ae 0502 	sub.w	r5, lr, #2
 8009c84:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c88:	1c44      	adds	r4, r0, #1
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	4561      	cmp	r1, ip
 8009c8e:	d30a      	bcc.n	8009ca6 <__exponent+0x66>
 8009c90:	f10d 0209 	add.w	r2, sp, #9
 8009c94:	eba2 020e 	sub.w	r2, r2, lr
 8009c98:	4565      	cmp	r5, ip
 8009c9a:	bf88      	it	hi
 8009c9c:	2200      	movhi	r2, #0
 8009c9e:	4413      	add	r3, r2
 8009ca0:	1a18      	subs	r0, r3, r0
 8009ca2:	b003      	add	sp, #12
 8009ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009caa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009cae:	e7ed      	b.n	8009c8c <__exponent+0x4c>
 8009cb0:	2330      	movs	r3, #48	; 0x30
 8009cb2:	3130      	adds	r1, #48	; 0x30
 8009cb4:	7083      	strb	r3, [r0, #2]
 8009cb6:	70c1      	strb	r1, [r0, #3]
 8009cb8:	1d03      	adds	r3, r0, #4
 8009cba:	e7f1      	b.n	8009ca0 <__exponent+0x60>

08009cbc <_printf_float>:
 8009cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	ed2d 8b02 	vpush	{d8}
 8009cc4:	b08d      	sub	sp, #52	; 0x34
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009ccc:	4616      	mov	r6, r2
 8009cce:	461f      	mov	r7, r3
 8009cd0:	4605      	mov	r5, r0
 8009cd2:	f001 fa57 	bl	800b184 <_localeconv_r>
 8009cd6:	f8d0 a000 	ldr.w	sl, [r0]
 8009cda:	4650      	mov	r0, sl
 8009cdc:	f7f6 fa80 	bl	80001e0 <strlen>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	9305      	str	r3, [sp, #20]
 8009ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8009cec:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009cf0:	3307      	adds	r3, #7
 8009cf2:	f023 0307 	bic.w	r3, r3, #7
 8009cf6:	f103 0208 	add.w	r2, r3, #8
 8009cfa:	f8c8 2000 	str.w	r2, [r8]
 8009cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d02:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d06:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009d0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d0e:	9307      	str	r3, [sp, #28]
 8009d10:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d14:	ee08 0a10 	vmov	s16, r0
 8009d18:	4b9f      	ldr	r3, [pc, #636]	; (8009f98 <_printf_float+0x2dc>)
 8009d1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d22:	f7f6 ff0b 	bl	8000b3c <__aeabi_dcmpun>
 8009d26:	bb88      	cbnz	r0, 8009d8c <_printf_float+0xd0>
 8009d28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d2c:	4b9a      	ldr	r3, [pc, #616]	; (8009f98 <_printf_float+0x2dc>)
 8009d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d32:	f7f6 fee5 	bl	8000b00 <__aeabi_dcmple>
 8009d36:	bb48      	cbnz	r0, 8009d8c <_printf_float+0xd0>
 8009d38:	2200      	movs	r2, #0
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	4640      	mov	r0, r8
 8009d3e:	4649      	mov	r1, r9
 8009d40:	f7f6 fed4 	bl	8000aec <__aeabi_dcmplt>
 8009d44:	b110      	cbz	r0, 8009d4c <_printf_float+0x90>
 8009d46:	232d      	movs	r3, #45	; 0x2d
 8009d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d4c:	4b93      	ldr	r3, [pc, #588]	; (8009f9c <_printf_float+0x2e0>)
 8009d4e:	4894      	ldr	r0, [pc, #592]	; (8009fa0 <_printf_float+0x2e4>)
 8009d50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d54:	bf94      	ite	ls
 8009d56:	4698      	movls	r8, r3
 8009d58:	4680      	movhi	r8, r0
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	6123      	str	r3, [r4, #16]
 8009d5e:	9b05      	ldr	r3, [sp, #20]
 8009d60:	f023 0204 	bic.w	r2, r3, #4
 8009d64:	6022      	str	r2, [r4, #0]
 8009d66:	f04f 0900 	mov.w	r9, #0
 8009d6a:	9700      	str	r7, [sp, #0]
 8009d6c:	4633      	mov	r3, r6
 8009d6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d70:	4621      	mov	r1, r4
 8009d72:	4628      	mov	r0, r5
 8009d74:	f000 f9d8 	bl	800a128 <_printf_common>
 8009d78:	3001      	adds	r0, #1
 8009d7a:	f040 8090 	bne.w	8009e9e <_printf_float+0x1e2>
 8009d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d82:	b00d      	add	sp, #52	; 0x34
 8009d84:	ecbd 8b02 	vpop	{d8}
 8009d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8c:	4642      	mov	r2, r8
 8009d8e:	464b      	mov	r3, r9
 8009d90:	4640      	mov	r0, r8
 8009d92:	4649      	mov	r1, r9
 8009d94:	f7f6 fed2 	bl	8000b3c <__aeabi_dcmpun>
 8009d98:	b140      	cbz	r0, 8009dac <_printf_float+0xf0>
 8009d9a:	464b      	mov	r3, r9
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	bfbc      	itt	lt
 8009da0:	232d      	movlt	r3, #45	; 0x2d
 8009da2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009da6:	487f      	ldr	r0, [pc, #508]	; (8009fa4 <_printf_float+0x2e8>)
 8009da8:	4b7f      	ldr	r3, [pc, #508]	; (8009fa8 <_printf_float+0x2ec>)
 8009daa:	e7d1      	b.n	8009d50 <_printf_float+0x94>
 8009dac:	6863      	ldr	r3, [r4, #4]
 8009dae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009db2:	9206      	str	r2, [sp, #24]
 8009db4:	1c5a      	adds	r2, r3, #1
 8009db6:	d13f      	bne.n	8009e38 <_printf_float+0x17c>
 8009db8:	2306      	movs	r3, #6
 8009dba:	6063      	str	r3, [r4, #4]
 8009dbc:	9b05      	ldr	r3, [sp, #20]
 8009dbe:	6861      	ldr	r1, [r4, #4]
 8009dc0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	9303      	str	r3, [sp, #12]
 8009dc8:	ab0a      	add	r3, sp, #40	; 0x28
 8009dca:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009dce:	ab09      	add	r3, sp, #36	; 0x24
 8009dd0:	ec49 8b10 	vmov	d0, r8, r9
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	6022      	str	r2, [r4, #0]
 8009dd8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ddc:	4628      	mov	r0, r5
 8009dde:	f7ff fecd 	bl	8009b7c <__cvt>
 8009de2:	9b06      	ldr	r3, [sp, #24]
 8009de4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009de6:	2b47      	cmp	r3, #71	; 0x47
 8009de8:	4680      	mov	r8, r0
 8009dea:	d108      	bne.n	8009dfe <_printf_float+0x142>
 8009dec:	1cc8      	adds	r0, r1, #3
 8009dee:	db02      	blt.n	8009df6 <_printf_float+0x13a>
 8009df0:	6863      	ldr	r3, [r4, #4]
 8009df2:	4299      	cmp	r1, r3
 8009df4:	dd41      	ble.n	8009e7a <_printf_float+0x1be>
 8009df6:	f1ab 0b02 	sub.w	fp, fp, #2
 8009dfa:	fa5f fb8b 	uxtb.w	fp, fp
 8009dfe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e02:	d820      	bhi.n	8009e46 <_printf_float+0x18a>
 8009e04:	3901      	subs	r1, #1
 8009e06:	465a      	mov	r2, fp
 8009e08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e0c:	9109      	str	r1, [sp, #36]	; 0x24
 8009e0e:	f7ff ff17 	bl	8009c40 <__exponent>
 8009e12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e14:	1813      	adds	r3, r2, r0
 8009e16:	2a01      	cmp	r2, #1
 8009e18:	4681      	mov	r9, r0
 8009e1a:	6123      	str	r3, [r4, #16]
 8009e1c:	dc02      	bgt.n	8009e24 <_printf_float+0x168>
 8009e1e:	6822      	ldr	r2, [r4, #0]
 8009e20:	07d2      	lsls	r2, r2, #31
 8009e22:	d501      	bpl.n	8009e28 <_printf_float+0x16c>
 8009e24:	3301      	adds	r3, #1
 8009e26:	6123      	str	r3, [r4, #16]
 8009e28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d09c      	beq.n	8009d6a <_printf_float+0xae>
 8009e30:	232d      	movs	r3, #45	; 0x2d
 8009e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e36:	e798      	b.n	8009d6a <_printf_float+0xae>
 8009e38:	9a06      	ldr	r2, [sp, #24]
 8009e3a:	2a47      	cmp	r2, #71	; 0x47
 8009e3c:	d1be      	bne.n	8009dbc <_printf_float+0x100>
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1bc      	bne.n	8009dbc <_printf_float+0x100>
 8009e42:	2301      	movs	r3, #1
 8009e44:	e7b9      	b.n	8009dba <_printf_float+0xfe>
 8009e46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e4a:	d118      	bne.n	8009e7e <_printf_float+0x1c2>
 8009e4c:	2900      	cmp	r1, #0
 8009e4e:	6863      	ldr	r3, [r4, #4]
 8009e50:	dd0b      	ble.n	8009e6a <_printf_float+0x1ae>
 8009e52:	6121      	str	r1, [r4, #16]
 8009e54:	b913      	cbnz	r3, 8009e5c <_printf_float+0x1a0>
 8009e56:	6822      	ldr	r2, [r4, #0]
 8009e58:	07d0      	lsls	r0, r2, #31
 8009e5a:	d502      	bpl.n	8009e62 <_printf_float+0x1a6>
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	440b      	add	r3, r1
 8009e60:	6123      	str	r3, [r4, #16]
 8009e62:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e64:	f04f 0900 	mov.w	r9, #0
 8009e68:	e7de      	b.n	8009e28 <_printf_float+0x16c>
 8009e6a:	b913      	cbnz	r3, 8009e72 <_printf_float+0x1b6>
 8009e6c:	6822      	ldr	r2, [r4, #0]
 8009e6e:	07d2      	lsls	r2, r2, #31
 8009e70:	d501      	bpl.n	8009e76 <_printf_float+0x1ba>
 8009e72:	3302      	adds	r3, #2
 8009e74:	e7f4      	b.n	8009e60 <_printf_float+0x1a4>
 8009e76:	2301      	movs	r3, #1
 8009e78:	e7f2      	b.n	8009e60 <_printf_float+0x1a4>
 8009e7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e80:	4299      	cmp	r1, r3
 8009e82:	db05      	blt.n	8009e90 <_printf_float+0x1d4>
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	6121      	str	r1, [r4, #16]
 8009e88:	07d8      	lsls	r0, r3, #31
 8009e8a:	d5ea      	bpl.n	8009e62 <_printf_float+0x1a6>
 8009e8c:	1c4b      	adds	r3, r1, #1
 8009e8e:	e7e7      	b.n	8009e60 <_printf_float+0x1a4>
 8009e90:	2900      	cmp	r1, #0
 8009e92:	bfd4      	ite	le
 8009e94:	f1c1 0202 	rsble	r2, r1, #2
 8009e98:	2201      	movgt	r2, #1
 8009e9a:	4413      	add	r3, r2
 8009e9c:	e7e0      	b.n	8009e60 <_printf_float+0x1a4>
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	055a      	lsls	r2, r3, #21
 8009ea2:	d407      	bmi.n	8009eb4 <_printf_float+0x1f8>
 8009ea4:	6923      	ldr	r3, [r4, #16]
 8009ea6:	4642      	mov	r2, r8
 8009ea8:	4631      	mov	r1, r6
 8009eaa:	4628      	mov	r0, r5
 8009eac:	47b8      	blx	r7
 8009eae:	3001      	adds	r0, #1
 8009eb0:	d12c      	bne.n	8009f0c <_printf_float+0x250>
 8009eb2:	e764      	b.n	8009d7e <_printf_float+0xc2>
 8009eb4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009eb8:	f240 80e0 	bls.w	800a07c <_printf_float+0x3c0>
 8009ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	f7f6 fe08 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d034      	beq.n	8009f36 <_printf_float+0x27a>
 8009ecc:	4a37      	ldr	r2, [pc, #220]	; (8009fac <_printf_float+0x2f0>)
 8009ece:	2301      	movs	r3, #1
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	47b8      	blx	r7
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	f43f af51 	beq.w	8009d7e <_printf_float+0xc2>
 8009edc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	db02      	blt.n	8009eea <_printf_float+0x22e>
 8009ee4:	6823      	ldr	r3, [r4, #0]
 8009ee6:	07d8      	lsls	r0, r3, #31
 8009ee8:	d510      	bpl.n	8009f0c <_printf_float+0x250>
 8009eea:	ee18 3a10 	vmov	r3, s16
 8009eee:	4652      	mov	r2, sl
 8009ef0:	4631      	mov	r1, r6
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	47b8      	blx	r7
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	f43f af41 	beq.w	8009d7e <_printf_float+0xc2>
 8009efc:	f04f 0800 	mov.w	r8, #0
 8009f00:	f104 091a 	add.w	r9, r4, #26
 8009f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f06:	3b01      	subs	r3, #1
 8009f08:	4543      	cmp	r3, r8
 8009f0a:	dc09      	bgt.n	8009f20 <_printf_float+0x264>
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	079b      	lsls	r3, r3, #30
 8009f10:	f100 8105 	bmi.w	800a11e <_printf_float+0x462>
 8009f14:	68e0      	ldr	r0, [r4, #12]
 8009f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f18:	4298      	cmp	r0, r3
 8009f1a:	bfb8      	it	lt
 8009f1c:	4618      	movlt	r0, r3
 8009f1e:	e730      	b.n	8009d82 <_printf_float+0xc6>
 8009f20:	2301      	movs	r3, #1
 8009f22:	464a      	mov	r2, r9
 8009f24:	4631      	mov	r1, r6
 8009f26:	4628      	mov	r0, r5
 8009f28:	47b8      	blx	r7
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	f43f af27 	beq.w	8009d7e <_printf_float+0xc2>
 8009f30:	f108 0801 	add.w	r8, r8, #1
 8009f34:	e7e6      	b.n	8009f04 <_printf_float+0x248>
 8009f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	dc39      	bgt.n	8009fb0 <_printf_float+0x2f4>
 8009f3c:	4a1b      	ldr	r2, [pc, #108]	; (8009fac <_printf_float+0x2f0>)
 8009f3e:	2301      	movs	r3, #1
 8009f40:	4631      	mov	r1, r6
 8009f42:	4628      	mov	r0, r5
 8009f44:	47b8      	blx	r7
 8009f46:	3001      	adds	r0, #1
 8009f48:	f43f af19 	beq.w	8009d7e <_printf_float+0xc2>
 8009f4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f50:	4313      	orrs	r3, r2
 8009f52:	d102      	bne.n	8009f5a <_printf_float+0x29e>
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	07d9      	lsls	r1, r3, #31
 8009f58:	d5d8      	bpl.n	8009f0c <_printf_float+0x250>
 8009f5a:	ee18 3a10 	vmov	r3, s16
 8009f5e:	4652      	mov	r2, sl
 8009f60:	4631      	mov	r1, r6
 8009f62:	4628      	mov	r0, r5
 8009f64:	47b8      	blx	r7
 8009f66:	3001      	adds	r0, #1
 8009f68:	f43f af09 	beq.w	8009d7e <_printf_float+0xc2>
 8009f6c:	f04f 0900 	mov.w	r9, #0
 8009f70:	f104 0a1a 	add.w	sl, r4, #26
 8009f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f76:	425b      	negs	r3, r3
 8009f78:	454b      	cmp	r3, r9
 8009f7a:	dc01      	bgt.n	8009f80 <_printf_float+0x2c4>
 8009f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f7e:	e792      	b.n	8009ea6 <_printf_float+0x1ea>
 8009f80:	2301      	movs	r3, #1
 8009f82:	4652      	mov	r2, sl
 8009f84:	4631      	mov	r1, r6
 8009f86:	4628      	mov	r0, r5
 8009f88:	47b8      	blx	r7
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	f43f aef7 	beq.w	8009d7e <_printf_float+0xc2>
 8009f90:	f109 0901 	add.w	r9, r9, #1
 8009f94:	e7ee      	b.n	8009f74 <_printf_float+0x2b8>
 8009f96:	bf00      	nop
 8009f98:	7fefffff 	.word	0x7fefffff
 8009f9c:	0800cae8 	.word	0x0800cae8
 8009fa0:	0800caec 	.word	0x0800caec
 8009fa4:	0800caf4 	.word	0x0800caf4
 8009fa8:	0800caf0 	.word	0x0800caf0
 8009fac:	0800caf8 	.word	0x0800caf8
 8009fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	bfa8      	it	ge
 8009fb8:	461a      	movge	r2, r3
 8009fba:	2a00      	cmp	r2, #0
 8009fbc:	4691      	mov	r9, r2
 8009fbe:	dc37      	bgt.n	800a030 <_printf_float+0x374>
 8009fc0:	f04f 0b00 	mov.w	fp, #0
 8009fc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fc8:	f104 021a 	add.w	r2, r4, #26
 8009fcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fce:	9305      	str	r3, [sp, #20]
 8009fd0:	eba3 0309 	sub.w	r3, r3, r9
 8009fd4:	455b      	cmp	r3, fp
 8009fd6:	dc33      	bgt.n	800a040 <_printf_float+0x384>
 8009fd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	db3b      	blt.n	800a058 <_printf_float+0x39c>
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	07da      	lsls	r2, r3, #31
 8009fe4:	d438      	bmi.n	800a058 <_printf_float+0x39c>
 8009fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fe8:	9a05      	ldr	r2, [sp, #20]
 8009fea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fec:	1a9a      	subs	r2, r3, r2
 8009fee:	eba3 0901 	sub.w	r9, r3, r1
 8009ff2:	4591      	cmp	r9, r2
 8009ff4:	bfa8      	it	ge
 8009ff6:	4691      	movge	r9, r2
 8009ff8:	f1b9 0f00 	cmp.w	r9, #0
 8009ffc:	dc35      	bgt.n	800a06a <_printf_float+0x3ae>
 8009ffe:	f04f 0800 	mov.w	r8, #0
 800a002:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a006:	f104 0a1a 	add.w	sl, r4, #26
 800a00a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a00e:	1a9b      	subs	r3, r3, r2
 800a010:	eba3 0309 	sub.w	r3, r3, r9
 800a014:	4543      	cmp	r3, r8
 800a016:	f77f af79 	ble.w	8009f0c <_printf_float+0x250>
 800a01a:	2301      	movs	r3, #1
 800a01c:	4652      	mov	r2, sl
 800a01e:	4631      	mov	r1, r6
 800a020:	4628      	mov	r0, r5
 800a022:	47b8      	blx	r7
 800a024:	3001      	adds	r0, #1
 800a026:	f43f aeaa 	beq.w	8009d7e <_printf_float+0xc2>
 800a02a:	f108 0801 	add.w	r8, r8, #1
 800a02e:	e7ec      	b.n	800a00a <_printf_float+0x34e>
 800a030:	4613      	mov	r3, r2
 800a032:	4631      	mov	r1, r6
 800a034:	4642      	mov	r2, r8
 800a036:	4628      	mov	r0, r5
 800a038:	47b8      	blx	r7
 800a03a:	3001      	adds	r0, #1
 800a03c:	d1c0      	bne.n	8009fc0 <_printf_float+0x304>
 800a03e:	e69e      	b.n	8009d7e <_printf_float+0xc2>
 800a040:	2301      	movs	r3, #1
 800a042:	4631      	mov	r1, r6
 800a044:	4628      	mov	r0, r5
 800a046:	9205      	str	r2, [sp, #20]
 800a048:	47b8      	blx	r7
 800a04a:	3001      	adds	r0, #1
 800a04c:	f43f ae97 	beq.w	8009d7e <_printf_float+0xc2>
 800a050:	9a05      	ldr	r2, [sp, #20]
 800a052:	f10b 0b01 	add.w	fp, fp, #1
 800a056:	e7b9      	b.n	8009fcc <_printf_float+0x310>
 800a058:	ee18 3a10 	vmov	r3, s16
 800a05c:	4652      	mov	r2, sl
 800a05e:	4631      	mov	r1, r6
 800a060:	4628      	mov	r0, r5
 800a062:	47b8      	blx	r7
 800a064:	3001      	adds	r0, #1
 800a066:	d1be      	bne.n	8009fe6 <_printf_float+0x32a>
 800a068:	e689      	b.n	8009d7e <_printf_float+0xc2>
 800a06a:	9a05      	ldr	r2, [sp, #20]
 800a06c:	464b      	mov	r3, r9
 800a06e:	4442      	add	r2, r8
 800a070:	4631      	mov	r1, r6
 800a072:	4628      	mov	r0, r5
 800a074:	47b8      	blx	r7
 800a076:	3001      	adds	r0, #1
 800a078:	d1c1      	bne.n	8009ffe <_printf_float+0x342>
 800a07a:	e680      	b.n	8009d7e <_printf_float+0xc2>
 800a07c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a07e:	2a01      	cmp	r2, #1
 800a080:	dc01      	bgt.n	800a086 <_printf_float+0x3ca>
 800a082:	07db      	lsls	r3, r3, #31
 800a084:	d538      	bpl.n	800a0f8 <_printf_float+0x43c>
 800a086:	2301      	movs	r3, #1
 800a088:	4642      	mov	r2, r8
 800a08a:	4631      	mov	r1, r6
 800a08c:	4628      	mov	r0, r5
 800a08e:	47b8      	blx	r7
 800a090:	3001      	adds	r0, #1
 800a092:	f43f ae74 	beq.w	8009d7e <_printf_float+0xc2>
 800a096:	ee18 3a10 	vmov	r3, s16
 800a09a:	4652      	mov	r2, sl
 800a09c:	4631      	mov	r1, r6
 800a09e:	4628      	mov	r0, r5
 800a0a0:	47b8      	blx	r7
 800a0a2:	3001      	adds	r0, #1
 800a0a4:	f43f ae6b 	beq.w	8009d7e <_printf_float+0xc2>
 800a0a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	f7f6 fd12 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0b4:	b9d8      	cbnz	r0, 800a0ee <_printf_float+0x432>
 800a0b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0b8:	f108 0201 	add.w	r2, r8, #1
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	4631      	mov	r1, r6
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	47b8      	blx	r7
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	d10e      	bne.n	800a0e6 <_printf_float+0x42a>
 800a0c8:	e659      	b.n	8009d7e <_printf_float+0xc2>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	4652      	mov	r2, sl
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	47b8      	blx	r7
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	f43f ae52 	beq.w	8009d7e <_printf_float+0xc2>
 800a0da:	f108 0801 	add.w	r8, r8, #1
 800a0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	4543      	cmp	r3, r8
 800a0e4:	dcf1      	bgt.n	800a0ca <_printf_float+0x40e>
 800a0e6:	464b      	mov	r3, r9
 800a0e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0ec:	e6dc      	b.n	8009ea8 <_printf_float+0x1ec>
 800a0ee:	f04f 0800 	mov.w	r8, #0
 800a0f2:	f104 0a1a 	add.w	sl, r4, #26
 800a0f6:	e7f2      	b.n	800a0de <_printf_float+0x422>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	4642      	mov	r2, r8
 800a0fc:	e7df      	b.n	800a0be <_printf_float+0x402>
 800a0fe:	2301      	movs	r3, #1
 800a100:	464a      	mov	r2, r9
 800a102:	4631      	mov	r1, r6
 800a104:	4628      	mov	r0, r5
 800a106:	47b8      	blx	r7
 800a108:	3001      	adds	r0, #1
 800a10a:	f43f ae38 	beq.w	8009d7e <_printf_float+0xc2>
 800a10e:	f108 0801 	add.w	r8, r8, #1
 800a112:	68e3      	ldr	r3, [r4, #12]
 800a114:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a116:	1a5b      	subs	r3, r3, r1
 800a118:	4543      	cmp	r3, r8
 800a11a:	dcf0      	bgt.n	800a0fe <_printf_float+0x442>
 800a11c:	e6fa      	b.n	8009f14 <_printf_float+0x258>
 800a11e:	f04f 0800 	mov.w	r8, #0
 800a122:	f104 0919 	add.w	r9, r4, #25
 800a126:	e7f4      	b.n	800a112 <_printf_float+0x456>

0800a128 <_printf_common>:
 800a128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a12c:	4616      	mov	r6, r2
 800a12e:	4699      	mov	r9, r3
 800a130:	688a      	ldr	r2, [r1, #8]
 800a132:	690b      	ldr	r3, [r1, #16]
 800a134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a138:	4293      	cmp	r3, r2
 800a13a:	bfb8      	it	lt
 800a13c:	4613      	movlt	r3, r2
 800a13e:	6033      	str	r3, [r6, #0]
 800a140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a144:	4607      	mov	r7, r0
 800a146:	460c      	mov	r4, r1
 800a148:	b10a      	cbz	r2, 800a14e <_printf_common+0x26>
 800a14a:	3301      	adds	r3, #1
 800a14c:	6033      	str	r3, [r6, #0]
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	0699      	lsls	r1, r3, #26
 800a152:	bf42      	ittt	mi
 800a154:	6833      	ldrmi	r3, [r6, #0]
 800a156:	3302      	addmi	r3, #2
 800a158:	6033      	strmi	r3, [r6, #0]
 800a15a:	6825      	ldr	r5, [r4, #0]
 800a15c:	f015 0506 	ands.w	r5, r5, #6
 800a160:	d106      	bne.n	800a170 <_printf_common+0x48>
 800a162:	f104 0a19 	add.w	sl, r4, #25
 800a166:	68e3      	ldr	r3, [r4, #12]
 800a168:	6832      	ldr	r2, [r6, #0]
 800a16a:	1a9b      	subs	r3, r3, r2
 800a16c:	42ab      	cmp	r3, r5
 800a16e:	dc26      	bgt.n	800a1be <_printf_common+0x96>
 800a170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a174:	1e13      	subs	r3, r2, #0
 800a176:	6822      	ldr	r2, [r4, #0]
 800a178:	bf18      	it	ne
 800a17a:	2301      	movne	r3, #1
 800a17c:	0692      	lsls	r2, r2, #26
 800a17e:	d42b      	bmi.n	800a1d8 <_printf_common+0xb0>
 800a180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a184:	4649      	mov	r1, r9
 800a186:	4638      	mov	r0, r7
 800a188:	47c0      	blx	r8
 800a18a:	3001      	adds	r0, #1
 800a18c:	d01e      	beq.n	800a1cc <_printf_common+0xa4>
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	68e5      	ldr	r5, [r4, #12]
 800a192:	6832      	ldr	r2, [r6, #0]
 800a194:	f003 0306 	and.w	r3, r3, #6
 800a198:	2b04      	cmp	r3, #4
 800a19a:	bf08      	it	eq
 800a19c:	1aad      	subeq	r5, r5, r2
 800a19e:	68a3      	ldr	r3, [r4, #8]
 800a1a0:	6922      	ldr	r2, [r4, #16]
 800a1a2:	bf0c      	ite	eq
 800a1a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1a8:	2500      	movne	r5, #0
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	bfc4      	itt	gt
 800a1ae:	1a9b      	subgt	r3, r3, r2
 800a1b0:	18ed      	addgt	r5, r5, r3
 800a1b2:	2600      	movs	r6, #0
 800a1b4:	341a      	adds	r4, #26
 800a1b6:	42b5      	cmp	r5, r6
 800a1b8:	d11a      	bne.n	800a1f0 <_printf_common+0xc8>
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	e008      	b.n	800a1d0 <_printf_common+0xa8>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	4652      	mov	r2, sl
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	4638      	mov	r0, r7
 800a1c6:	47c0      	blx	r8
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d103      	bne.n	800a1d4 <_printf_common+0xac>
 800a1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d4:	3501      	adds	r5, #1
 800a1d6:	e7c6      	b.n	800a166 <_printf_common+0x3e>
 800a1d8:	18e1      	adds	r1, r4, r3
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	2030      	movs	r0, #48	; 0x30
 800a1de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1e2:	4422      	add	r2, r4
 800a1e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1ec:	3302      	adds	r3, #2
 800a1ee:	e7c7      	b.n	800a180 <_printf_common+0x58>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	4622      	mov	r2, r4
 800a1f4:	4649      	mov	r1, r9
 800a1f6:	4638      	mov	r0, r7
 800a1f8:	47c0      	blx	r8
 800a1fa:	3001      	adds	r0, #1
 800a1fc:	d0e6      	beq.n	800a1cc <_printf_common+0xa4>
 800a1fe:	3601      	adds	r6, #1
 800a200:	e7d9      	b.n	800a1b6 <_printf_common+0x8e>
	...

0800a204 <_printf_i>:
 800a204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a208:	7e0f      	ldrb	r7, [r1, #24]
 800a20a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a20c:	2f78      	cmp	r7, #120	; 0x78
 800a20e:	4691      	mov	r9, r2
 800a210:	4680      	mov	r8, r0
 800a212:	460c      	mov	r4, r1
 800a214:	469a      	mov	sl, r3
 800a216:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a21a:	d807      	bhi.n	800a22c <_printf_i+0x28>
 800a21c:	2f62      	cmp	r7, #98	; 0x62
 800a21e:	d80a      	bhi.n	800a236 <_printf_i+0x32>
 800a220:	2f00      	cmp	r7, #0
 800a222:	f000 80d8 	beq.w	800a3d6 <_printf_i+0x1d2>
 800a226:	2f58      	cmp	r7, #88	; 0x58
 800a228:	f000 80a3 	beq.w	800a372 <_printf_i+0x16e>
 800a22c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a234:	e03a      	b.n	800a2ac <_printf_i+0xa8>
 800a236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a23a:	2b15      	cmp	r3, #21
 800a23c:	d8f6      	bhi.n	800a22c <_printf_i+0x28>
 800a23e:	a101      	add	r1, pc, #4	; (adr r1, 800a244 <_printf_i+0x40>)
 800a240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a244:	0800a29d 	.word	0x0800a29d
 800a248:	0800a2b1 	.word	0x0800a2b1
 800a24c:	0800a22d 	.word	0x0800a22d
 800a250:	0800a22d 	.word	0x0800a22d
 800a254:	0800a22d 	.word	0x0800a22d
 800a258:	0800a22d 	.word	0x0800a22d
 800a25c:	0800a2b1 	.word	0x0800a2b1
 800a260:	0800a22d 	.word	0x0800a22d
 800a264:	0800a22d 	.word	0x0800a22d
 800a268:	0800a22d 	.word	0x0800a22d
 800a26c:	0800a22d 	.word	0x0800a22d
 800a270:	0800a3bd 	.word	0x0800a3bd
 800a274:	0800a2e1 	.word	0x0800a2e1
 800a278:	0800a39f 	.word	0x0800a39f
 800a27c:	0800a22d 	.word	0x0800a22d
 800a280:	0800a22d 	.word	0x0800a22d
 800a284:	0800a3df 	.word	0x0800a3df
 800a288:	0800a22d 	.word	0x0800a22d
 800a28c:	0800a2e1 	.word	0x0800a2e1
 800a290:	0800a22d 	.word	0x0800a22d
 800a294:	0800a22d 	.word	0x0800a22d
 800a298:	0800a3a7 	.word	0x0800a3a7
 800a29c:	682b      	ldr	r3, [r5, #0]
 800a29e:	1d1a      	adds	r2, r3, #4
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	602a      	str	r2, [r5, #0]
 800a2a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e0a3      	b.n	800a3f8 <_printf_i+0x1f4>
 800a2b0:	6820      	ldr	r0, [r4, #0]
 800a2b2:	6829      	ldr	r1, [r5, #0]
 800a2b4:	0606      	lsls	r6, r0, #24
 800a2b6:	f101 0304 	add.w	r3, r1, #4
 800a2ba:	d50a      	bpl.n	800a2d2 <_printf_i+0xce>
 800a2bc:	680e      	ldr	r6, [r1, #0]
 800a2be:	602b      	str	r3, [r5, #0]
 800a2c0:	2e00      	cmp	r6, #0
 800a2c2:	da03      	bge.n	800a2cc <_printf_i+0xc8>
 800a2c4:	232d      	movs	r3, #45	; 0x2d
 800a2c6:	4276      	negs	r6, r6
 800a2c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2cc:	485e      	ldr	r0, [pc, #376]	; (800a448 <_printf_i+0x244>)
 800a2ce:	230a      	movs	r3, #10
 800a2d0:	e019      	b.n	800a306 <_printf_i+0x102>
 800a2d2:	680e      	ldr	r6, [r1, #0]
 800a2d4:	602b      	str	r3, [r5, #0]
 800a2d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2da:	bf18      	it	ne
 800a2dc:	b236      	sxthne	r6, r6
 800a2de:	e7ef      	b.n	800a2c0 <_printf_i+0xbc>
 800a2e0:	682b      	ldr	r3, [r5, #0]
 800a2e2:	6820      	ldr	r0, [r4, #0]
 800a2e4:	1d19      	adds	r1, r3, #4
 800a2e6:	6029      	str	r1, [r5, #0]
 800a2e8:	0601      	lsls	r1, r0, #24
 800a2ea:	d501      	bpl.n	800a2f0 <_printf_i+0xec>
 800a2ec:	681e      	ldr	r6, [r3, #0]
 800a2ee:	e002      	b.n	800a2f6 <_printf_i+0xf2>
 800a2f0:	0646      	lsls	r6, r0, #25
 800a2f2:	d5fb      	bpl.n	800a2ec <_printf_i+0xe8>
 800a2f4:	881e      	ldrh	r6, [r3, #0]
 800a2f6:	4854      	ldr	r0, [pc, #336]	; (800a448 <_printf_i+0x244>)
 800a2f8:	2f6f      	cmp	r7, #111	; 0x6f
 800a2fa:	bf0c      	ite	eq
 800a2fc:	2308      	moveq	r3, #8
 800a2fe:	230a      	movne	r3, #10
 800a300:	2100      	movs	r1, #0
 800a302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a306:	6865      	ldr	r5, [r4, #4]
 800a308:	60a5      	str	r5, [r4, #8]
 800a30a:	2d00      	cmp	r5, #0
 800a30c:	bfa2      	ittt	ge
 800a30e:	6821      	ldrge	r1, [r4, #0]
 800a310:	f021 0104 	bicge.w	r1, r1, #4
 800a314:	6021      	strge	r1, [r4, #0]
 800a316:	b90e      	cbnz	r6, 800a31c <_printf_i+0x118>
 800a318:	2d00      	cmp	r5, #0
 800a31a:	d04d      	beq.n	800a3b8 <_printf_i+0x1b4>
 800a31c:	4615      	mov	r5, r2
 800a31e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a322:	fb03 6711 	mls	r7, r3, r1, r6
 800a326:	5dc7      	ldrb	r7, [r0, r7]
 800a328:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a32c:	4637      	mov	r7, r6
 800a32e:	42bb      	cmp	r3, r7
 800a330:	460e      	mov	r6, r1
 800a332:	d9f4      	bls.n	800a31e <_printf_i+0x11a>
 800a334:	2b08      	cmp	r3, #8
 800a336:	d10b      	bne.n	800a350 <_printf_i+0x14c>
 800a338:	6823      	ldr	r3, [r4, #0]
 800a33a:	07de      	lsls	r6, r3, #31
 800a33c:	d508      	bpl.n	800a350 <_printf_i+0x14c>
 800a33e:	6923      	ldr	r3, [r4, #16]
 800a340:	6861      	ldr	r1, [r4, #4]
 800a342:	4299      	cmp	r1, r3
 800a344:	bfde      	ittt	le
 800a346:	2330      	movle	r3, #48	; 0x30
 800a348:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a34c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a350:	1b52      	subs	r2, r2, r5
 800a352:	6122      	str	r2, [r4, #16]
 800a354:	f8cd a000 	str.w	sl, [sp]
 800a358:	464b      	mov	r3, r9
 800a35a:	aa03      	add	r2, sp, #12
 800a35c:	4621      	mov	r1, r4
 800a35e:	4640      	mov	r0, r8
 800a360:	f7ff fee2 	bl	800a128 <_printf_common>
 800a364:	3001      	adds	r0, #1
 800a366:	d14c      	bne.n	800a402 <_printf_i+0x1fe>
 800a368:	f04f 30ff 	mov.w	r0, #4294967295
 800a36c:	b004      	add	sp, #16
 800a36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a372:	4835      	ldr	r0, [pc, #212]	; (800a448 <_printf_i+0x244>)
 800a374:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a378:	6829      	ldr	r1, [r5, #0]
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a380:	6029      	str	r1, [r5, #0]
 800a382:	061d      	lsls	r5, r3, #24
 800a384:	d514      	bpl.n	800a3b0 <_printf_i+0x1ac>
 800a386:	07df      	lsls	r7, r3, #31
 800a388:	bf44      	itt	mi
 800a38a:	f043 0320 	orrmi.w	r3, r3, #32
 800a38e:	6023      	strmi	r3, [r4, #0]
 800a390:	b91e      	cbnz	r6, 800a39a <_printf_i+0x196>
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	f023 0320 	bic.w	r3, r3, #32
 800a398:	6023      	str	r3, [r4, #0]
 800a39a:	2310      	movs	r3, #16
 800a39c:	e7b0      	b.n	800a300 <_printf_i+0xfc>
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	f043 0320 	orr.w	r3, r3, #32
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	2378      	movs	r3, #120	; 0x78
 800a3a8:	4828      	ldr	r0, [pc, #160]	; (800a44c <_printf_i+0x248>)
 800a3aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3ae:	e7e3      	b.n	800a378 <_printf_i+0x174>
 800a3b0:	0659      	lsls	r1, r3, #25
 800a3b2:	bf48      	it	mi
 800a3b4:	b2b6      	uxthmi	r6, r6
 800a3b6:	e7e6      	b.n	800a386 <_printf_i+0x182>
 800a3b8:	4615      	mov	r5, r2
 800a3ba:	e7bb      	b.n	800a334 <_printf_i+0x130>
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	6826      	ldr	r6, [r4, #0]
 800a3c0:	6961      	ldr	r1, [r4, #20]
 800a3c2:	1d18      	adds	r0, r3, #4
 800a3c4:	6028      	str	r0, [r5, #0]
 800a3c6:	0635      	lsls	r5, r6, #24
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	d501      	bpl.n	800a3d0 <_printf_i+0x1cc>
 800a3cc:	6019      	str	r1, [r3, #0]
 800a3ce:	e002      	b.n	800a3d6 <_printf_i+0x1d2>
 800a3d0:	0670      	lsls	r0, r6, #25
 800a3d2:	d5fb      	bpl.n	800a3cc <_printf_i+0x1c8>
 800a3d4:	8019      	strh	r1, [r3, #0]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	6123      	str	r3, [r4, #16]
 800a3da:	4615      	mov	r5, r2
 800a3dc:	e7ba      	b.n	800a354 <_printf_i+0x150>
 800a3de:	682b      	ldr	r3, [r5, #0]
 800a3e0:	1d1a      	adds	r2, r3, #4
 800a3e2:	602a      	str	r2, [r5, #0]
 800a3e4:	681d      	ldr	r5, [r3, #0]
 800a3e6:	6862      	ldr	r2, [r4, #4]
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	f7f5 ff00 	bl	80001f0 <memchr>
 800a3f0:	b108      	cbz	r0, 800a3f6 <_printf_i+0x1f2>
 800a3f2:	1b40      	subs	r0, r0, r5
 800a3f4:	6060      	str	r0, [r4, #4]
 800a3f6:	6863      	ldr	r3, [r4, #4]
 800a3f8:	6123      	str	r3, [r4, #16]
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a400:	e7a8      	b.n	800a354 <_printf_i+0x150>
 800a402:	6923      	ldr	r3, [r4, #16]
 800a404:	462a      	mov	r2, r5
 800a406:	4649      	mov	r1, r9
 800a408:	4640      	mov	r0, r8
 800a40a:	47d0      	blx	sl
 800a40c:	3001      	adds	r0, #1
 800a40e:	d0ab      	beq.n	800a368 <_printf_i+0x164>
 800a410:	6823      	ldr	r3, [r4, #0]
 800a412:	079b      	lsls	r3, r3, #30
 800a414:	d413      	bmi.n	800a43e <_printf_i+0x23a>
 800a416:	68e0      	ldr	r0, [r4, #12]
 800a418:	9b03      	ldr	r3, [sp, #12]
 800a41a:	4298      	cmp	r0, r3
 800a41c:	bfb8      	it	lt
 800a41e:	4618      	movlt	r0, r3
 800a420:	e7a4      	b.n	800a36c <_printf_i+0x168>
 800a422:	2301      	movs	r3, #1
 800a424:	4632      	mov	r2, r6
 800a426:	4649      	mov	r1, r9
 800a428:	4640      	mov	r0, r8
 800a42a:	47d0      	blx	sl
 800a42c:	3001      	adds	r0, #1
 800a42e:	d09b      	beq.n	800a368 <_printf_i+0x164>
 800a430:	3501      	adds	r5, #1
 800a432:	68e3      	ldr	r3, [r4, #12]
 800a434:	9903      	ldr	r1, [sp, #12]
 800a436:	1a5b      	subs	r3, r3, r1
 800a438:	42ab      	cmp	r3, r5
 800a43a:	dcf2      	bgt.n	800a422 <_printf_i+0x21e>
 800a43c:	e7eb      	b.n	800a416 <_printf_i+0x212>
 800a43e:	2500      	movs	r5, #0
 800a440:	f104 0619 	add.w	r6, r4, #25
 800a444:	e7f5      	b.n	800a432 <_printf_i+0x22e>
 800a446:	bf00      	nop
 800a448:	0800cafa 	.word	0x0800cafa
 800a44c:	0800cb0b 	.word	0x0800cb0b

0800a450 <siprintf>:
 800a450:	b40e      	push	{r1, r2, r3}
 800a452:	b500      	push	{lr}
 800a454:	b09c      	sub	sp, #112	; 0x70
 800a456:	ab1d      	add	r3, sp, #116	; 0x74
 800a458:	9002      	str	r0, [sp, #8]
 800a45a:	9006      	str	r0, [sp, #24]
 800a45c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a460:	4809      	ldr	r0, [pc, #36]	; (800a488 <siprintf+0x38>)
 800a462:	9107      	str	r1, [sp, #28]
 800a464:	9104      	str	r1, [sp, #16]
 800a466:	4909      	ldr	r1, [pc, #36]	; (800a48c <siprintf+0x3c>)
 800a468:	f853 2b04 	ldr.w	r2, [r3], #4
 800a46c:	9105      	str	r1, [sp, #20]
 800a46e:	6800      	ldr	r0, [r0, #0]
 800a470:	9301      	str	r3, [sp, #4]
 800a472:	a902      	add	r1, sp, #8
 800a474:	f001 fb68 	bl	800bb48 <_svfiprintf_r>
 800a478:	9b02      	ldr	r3, [sp, #8]
 800a47a:	2200      	movs	r2, #0
 800a47c:	701a      	strb	r2, [r3, #0]
 800a47e:	b01c      	add	sp, #112	; 0x70
 800a480:	f85d eb04 	ldr.w	lr, [sp], #4
 800a484:	b003      	add	sp, #12
 800a486:	4770      	bx	lr
 800a488:	20000010 	.word	0x20000010
 800a48c:	ffff0208 	.word	0xffff0208

0800a490 <quorem>:
 800a490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a494:	6903      	ldr	r3, [r0, #16]
 800a496:	690c      	ldr	r4, [r1, #16]
 800a498:	42a3      	cmp	r3, r4
 800a49a:	4607      	mov	r7, r0
 800a49c:	f2c0 8081 	blt.w	800a5a2 <quorem+0x112>
 800a4a0:	3c01      	subs	r4, #1
 800a4a2:	f101 0814 	add.w	r8, r1, #20
 800a4a6:	f100 0514 	add.w	r5, r0, #20
 800a4aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4ae:	9301      	str	r3, [sp, #4]
 800a4b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4c8:	d331      	bcc.n	800a52e <quorem+0x9e>
 800a4ca:	f04f 0e00 	mov.w	lr, #0
 800a4ce:	4640      	mov	r0, r8
 800a4d0:	46ac      	mov	ip, r5
 800a4d2:	46f2      	mov	sl, lr
 800a4d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4d8:	b293      	uxth	r3, r2
 800a4da:	fb06 e303 	mla	r3, r6, r3, lr
 800a4de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	ebaa 0303 	sub.w	r3, sl, r3
 800a4e8:	f8dc a000 	ldr.w	sl, [ip]
 800a4ec:	0c12      	lsrs	r2, r2, #16
 800a4ee:	fa13 f38a 	uxtah	r3, r3, sl
 800a4f2:	fb06 e202 	mla	r2, r6, r2, lr
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	9b00      	ldr	r3, [sp, #0]
 800a4fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4fe:	b292      	uxth	r2, r2
 800a500:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a504:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a508:	f8bd 3000 	ldrh.w	r3, [sp]
 800a50c:	4581      	cmp	r9, r0
 800a50e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a512:	f84c 3b04 	str.w	r3, [ip], #4
 800a516:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a51a:	d2db      	bcs.n	800a4d4 <quorem+0x44>
 800a51c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a520:	b92b      	cbnz	r3, 800a52e <quorem+0x9e>
 800a522:	9b01      	ldr	r3, [sp, #4]
 800a524:	3b04      	subs	r3, #4
 800a526:	429d      	cmp	r5, r3
 800a528:	461a      	mov	r2, r3
 800a52a:	d32e      	bcc.n	800a58a <quorem+0xfa>
 800a52c:	613c      	str	r4, [r7, #16]
 800a52e:	4638      	mov	r0, r7
 800a530:	f001 f8b6 	bl	800b6a0 <__mcmp>
 800a534:	2800      	cmp	r0, #0
 800a536:	db24      	blt.n	800a582 <quorem+0xf2>
 800a538:	3601      	adds	r6, #1
 800a53a:	4628      	mov	r0, r5
 800a53c:	f04f 0c00 	mov.w	ip, #0
 800a540:	f858 2b04 	ldr.w	r2, [r8], #4
 800a544:	f8d0 e000 	ldr.w	lr, [r0]
 800a548:	b293      	uxth	r3, r2
 800a54a:	ebac 0303 	sub.w	r3, ip, r3
 800a54e:	0c12      	lsrs	r2, r2, #16
 800a550:	fa13 f38e 	uxtah	r3, r3, lr
 800a554:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a558:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a562:	45c1      	cmp	r9, r8
 800a564:	f840 3b04 	str.w	r3, [r0], #4
 800a568:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a56c:	d2e8      	bcs.n	800a540 <quorem+0xb0>
 800a56e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a572:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a576:	b922      	cbnz	r2, 800a582 <quorem+0xf2>
 800a578:	3b04      	subs	r3, #4
 800a57a:	429d      	cmp	r5, r3
 800a57c:	461a      	mov	r2, r3
 800a57e:	d30a      	bcc.n	800a596 <quorem+0x106>
 800a580:	613c      	str	r4, [r7, #16]
 800a582:	4630      	mov	r0, r6
 800a584:	b003      	add	sp, #12
 800a586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a58a:	6812      	ldr	r2, [r2, #0]
 800a58c:	3b04      	subs	r3, #4
 800a58e:	2a00      	cmp	r2, #0
 800a590:	d1cc      	bne.n	800a52c <quorem+0x9c>
 800a592:	3c01      	subs	r4, #1
 800a594:	e7c7      	b.n	800a526 <quorem+0x96>
 800a596:	6812      	ldr	r2, [r2, #0]
 800a598:	3b04      	subs	r3, #4
 800a59a:	2a00      	cmp	r2, #0
 800a59c:	d1f0      	bne.n	800a580 <quorem+0xf0>
 800a59e:	3c01      	subs	r4, #1
 800a5a0:	e7eb      	b.n	800a57a <quorem+0xea>
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	e7ee      	b.n	800a584 <quorem+0xf4>
	...

0800a5a8 <_dtoa_r>:
 800a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	ed2d 8b04 	vpush	{d8-d9}
 800a5b0:	ec57 6b10 	vmov	r6, r7, d0
 800a5b4:	b093      	sub	sp, #76	; 0x4c
 800a5b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a5b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a5bc:	9106      	str	r1, [sp, #24]
 800a5be:	ee10 aa10 	vmov	sl, s0
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5c6:	930c      	str	r3, [sp, #48]	; 0x30
 800a5c8:	46bb      	mov	fp, r7
 800a5ca:	b975      	cbnz	r5, 800a5ea <_dtoa_r+0x42>
 800a5cc:	2010      	movs	r0, #16
 800a5ce:	f000 fddd 	bl	800b18c <malloc>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	6260      	str	r0, [r4, #36]	; 0x24
 800a5d6:	b920      	cbnz	r0, 800a5e2 <_dtoa_r+0x3a>
 800a5d8:	4ba7      	ldr	r3, [pc, #668]	; (800a878 <_dtoa_r+0x2d0>)
 800a5da:	21ea      	movs	r1, #234	; 0xea
 800a5dc:	48a7      	ldr	r0, [pc, #668]	; (800a87c <_dtoa_r+0x2d4>)
 800a5de:	f001 fbc3 	bl	800bd68 <__assert_func>
 800a5e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a5e6:	6005      	str	r5, [r0, #0]
 800a5e8:	60c5      	str	r5, [r0, #12]
 800a5ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5ec:	6819      	ldr	r1, [r3, #0]
 800a5ee:	b151      	cbz	r1, 800a606 <_dtoa_r+0x5e>
 800a5f0:	685a      	ldr	r2, [r3, #4]
 800a5f2:	604a      	str	r2, [r1, #4]
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	4093      	lsls	r3, r2
 800a5f8:	608b      	str	r3, [r1, #8]
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f000 fe0e 	bl	800b21c <_Bfree>
 800a600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	1e3b      	subs	r3, r7, #0
 800a608:	bfaa      	itet	ge
 800a60a:	2300      	movge	r3, #0
 800a60c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a610:	f8c8 3000 	strge.w	r3, [r8]
 800a614:	4b9a      	ldr	r3, [pc, #616]	; (800a880 <_dtoa_r+0x2d8>)
 800a616:	bfbc      	itt	lt
 800a618:	2201      	movlt	r2, #1
 800a61a:	f8c8 2000 	strlt.w	r2, [r8]
 800a61e:	ea33 030b 	bics.w	r3, r3, fp
 800a622:	d11b      	bne.n	800a65c <_dtoa_r+0xb4>
 800a624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a626:	f242 730f 	movw	r3, #9999	; 0x270f
 800a62a:	6013      	str	r3, [r2, #0]
 800a62c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a630:	4333      	orrs	r3, r6
 800a632:	f000 8592 	beq.w	800b15a <_dtoa_r+0xbb2>
 800a636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a638:	b963      	cbnz	r3, 800a654 <_dtoa_r+0xac>
 800a63a:	4b92      	ldr	r3, [pc, #584]	; (800a884 <_dtoa_r+0x2dc>)
 800a63c:	e022      	b.n	800a684 <_dtoa_r+0xdc>
 800a63e:	4b92      	ldr	r3, [pc, #584]	; (800a888 <_dtoa_r+0x2e0>)
 800a640:	9301      	str	r3, [sp, #4]
 800a642:	3308      	adds	r3, #8
 800a644:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	9801      	ldr	r0, [sp, #4]
 800a64a:	b013      	add	sp, #76	; 0x4c
 800a64c:	ecbd 8b04 	vpop	{d8-d9}
 800a650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a654:	4b8b      	ldr	r3, [pc, #556]	; (800a884 <_dtoa_r+0x2dc>)
 800a656:	9301      	str	r3, [sp, #4]
 800a658:	3303      	adds	r3, #3
 800a65a:	e7f3      	b.n	800a644 <_dtoa_r+0x9c>
 800a65c:	2200      	movs	r2, #0
 800a65e:	2300      	movs	r3, #0
 800a660:	4650      	mov	r0, sl
 800a662:	4659      	mov	r1, fp
 800a664:	f7f6 fa38 	bl	8000ad8 <__aeabi_dcmpeq>
 800a668:	ec4b ab19 	vmov	d9, sl, fp
 800a66c:	4680      	mov	r8, r0
 800a66e:	b158      	cbz	r0, 800a688 <_dtoa_r+0xe0>
 800a670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a672:	2301      	movs	r3, #1
 800a674:	6013      	str	r3, [r2, #0]
 800a676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f000 856b 	beq.w	800b154 <_dtoa_r+0xbac>
 800a67e:	4883      	ldr	r0, [pc, #524]	; (800a88c <_dtoa_r+0x2e4>)
 800a680:	6018      	str	r0, [r3, #0]
 800a682:	1e43      	subs	r3, r0, #1
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	e7df      	b.n	800a648 <_dtoa_r+0xa0>
 800a688:	ec4b ab10 	vmov	d0, sl, fp
 800a68c:	aa10      	add	r2, sp, #64	; 0x40
 800a68e:	a911      	add	r1, sp, #68	; 0x44
 800a690:	4620      	mov	r0, r4
 800a692:	f001 f8ab 	bl	800b7ec <__d2b>
 800a696:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a69a:	ee08 0a10 	vmov	s16, r0
 800a69e:	2d00      	cmp	r5, #0
 800a6a0:	f000 8084 	beq.w	800a7ac <_dtoa_r+0x204>
 800a6a4:	ee19 3a90 	vmov	r3, s19
 800a6a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a6b0:	4656      	mov	r6, sl
 800a6b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a6b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a6ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a6be:	4b74      	ldr	r3, [pc, #464]	; (800a890 <_dtoa_r+0x2e8>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	f7f5 fde7 	bl	8000298 <__aeabi_dsub>
 800a6ca:	a365      	add	r3, pc, #404	; (adr r3, 800a860 <_dtoa_r+0x2b8>)
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	f7f5 ff9a 	bl	8000608 <__aeabi_dmul>
 800a6d4:	a364      	add	r3, pc, #400	; (adr r3, 800a868 <_dtoa_r+0x2c0>)
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	f7f5 fddf 	bl	800029c <__adddf3>
 800a6de:	4606      	mov	r6, r0
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	460f      	mov	r7, r1
 800a6e4:	f7f5 ff26 	bl	8000534 <__aeabi_i2d>
 800a6e8:	a361      	add	r3, pc, #388	; (adr r3, 800a870 <_dtoa_r+0x2c8>)
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	f7f5 ff8b 	bl	8000608 <__aeabi_dmul>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	4639      	mov	r1, r7
 800a6fa:	f7f5 fdcf 	bl	800029c <__adddf3>
 800a6fe:	4606      	mov	r6, r0
 800a700:	460f      	mov	r7, r1
 800a702:	f7f6 fa31 	bl	8000b68 <__aeabi_d2iz>
 800a706:	2200      	movs	r2, #0
 800a708:	9000      	str	r0, [sp, #0]
 800a70a:	2300      	movs	r3, #0
 800a70c:	4630      	mov	r0, r6
 800a70e:	4639      	mov	r1, r7
 800a710:	f7f6 f9ec 	bl	8000aec <__aeabi_dcmplt>
 800a714:	b150      	cbz	r0, 800a72c <_dtoa_r+0x184>
 800a716:	9800      	ldr	r0, [sp, #0]
 800a718:	f7f5 ff0c 	bl	8000534 <__aeabi_i2d>
 800a71c:	4632      	mov	r2, r6
 800a71e:	463b      	mov	r3, r7
 800a720:	f7f6 f9da 	bl	8000ad8 <__aeabi_dcmpeq>
 800a724:	b910      	cbnz	r0, 800a72c <_dtoa_r+0x184>
 800a726:	9b00      	ldr	r3, [sp, #0]
 800a728:	3b01      	subs	r3, #1
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	9b00      	ldr	r3, [sp, #0]
 800a72e:	2b16      	cmp	r3, #22
 800a730:	d85a      	bhi.n	800a7e8 <_dtoa_r+0x240>
 800a732:	9a00      	ldr	r2, [sp, #0]
 800a734:	4b57      	ldr	r3, [pc, #348]	; (800a894 <_dtoa_r+0x2ec>)
 800a736:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73e:	ec51 0b19 	vmov	r0, r1, d9
 800a742:	f7f6 f9d3 	bl	8000aec <__aeabi_dcmplt>
 800a746:	2800      	cmp	r0, #0
 800a748:	d050      	beq.n	800a7ec <_dtoa_r+0x244>
 800a74a:	9b00      	ldr	r3, [sp, #0]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	2300      	movs	r3, #0
 800a752:	930b      	str	r3, [sp, #44]	; 0x2c
 800a754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a756:	1b5d      	subs	r5, r3, r5
 800a758:	1e6b      	subs	r3, r5, #1
 800a75a:	9305      	str	r3, [sp, #20]
 800a75c:	bf45      	ittet	mi
 800a75e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a762:	9304      	strmi	r3, [sp, #16]
 800a764:	2300      	movpl	r3, #0
 800a766:	2300      	movmi	r3, #0
 800a768:	bf4c      	ite	mi
 800a76a:	9305      	strmi	r3, [sp, #20]
 800a76c:	9304      	strpl	r3, [sp, #16]
 800a76e:	9b00      	ldr	r3, [sp, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	db3d      	blt.n	800a7f0 <_dtoa_r+0x248>
 800a774:	9b05      	ldr	r3, [sp, #20]
 800a776:	9a00      	ldr	r2, [sp, #0]
 800a778:	920a      	str	r2, [sp, #40]	; 0x28
 800a77a:	4413      	add	r3, r2
 800a77c:	9305      	str	r3, [sp, #20]
 800a77e:	2300      	movs	r3, #0
 800a780:	9307      	str	r3, [sp, #28]
 800a782:	9b06      	ldr	r3, [sp, #24]
 800a784:	2b09      	cmp	r3, #9
 800a786:	f200 8089 	bhi.w	800a89c <_dtoa_r+0x2f4>
 800a78a:	2b05      	cmp	r3, #5
 800a78c:	bfc4      	itt	gt
 800a78e:	3b04      	subgt	r3, #4
 800a790:	9306      	strgt	r3, [sp, #24]
 800a792:	9b06      	ldr	r3, [sp, #24]
 800a794:	f1a3 0302 	sub.w	r3, r3, #2
 800a798:	bfcc      	ite	gt
 800a79a:	2500      	movgt	r5, #0
 800a79c:	2501      	movle	r5, #1
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	f200 8087 	bhi.w	800a8b2 <_dtoa_r+0x30a>
 800a7a4:	e8df f003 	tbb	[pc, r3]
 800a7a8:	59383a2d 	.word	0x59383a2d
 800a7ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a7b0:	441d      	add	r5, r3
 800a7b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a7b6:	2b20      	cmp	r3, #32
 800a7b8:	bfc1      	itttt	gt
 800a7ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a7be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a7c2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a7c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a7ca:	bfda      	itte	le
 800a7cc:	f1c3 0320 	rsble	r3, r3, #32
 800a7d0:	fa06 f003 	lslle.w	r0, r6, r3
 800a7d4:	4318      	orrgt	r0, r3
 800a7d6:	f7f5 fe9d 	bl	8000514 <__aeabi_ui2d>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	4606      	mov	r6, r0
 800a7de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a7e2:	3d01      	subs	r5, #1
 800a7e4:	930e      	str	r3, [sp, #56]	; 0x38
 800a7e6:	e76a      	b.n	800a6be <_dtoa_r+0x116>
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e7b2      	b.n	800a752 <_dtoa_r+0x1aa>
 800a7ec:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7ee:	e7b1      	b.n	800a754 <_dtoa_r+0x1ac>
 800a7f0:	9b04      	ldr	r3, [sp, #16]
 800a7f2:	9a00      	ldr	r2, [sp, #0]
 800a7f4:	1a9b      	subs	r3, r3, r2
 800a7f6:	9304      	str	r3, [sp, #16]
 800a7f8:	4253      	negs	r3, r2
 800a7fa:	9307      	str	r3, [sp, #28]
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a800:	e7bf      	b.n	800a782 <_dtoa_r+0x1da>
 800a802:	2300      	movs	r3, #0
 800a804:	9308      	str	r3, [sp, #32]
 800a806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a808:	2b00      	cmp	r3, #0
 800a80a:	dc55      	bgt.n	800a8b8 <_dtoa_r+0x310>
 800a80c:	2301      	movs	r3, #1
 800a80e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a812:	461a      	mov	r2, r3
 800a814:	9209      	str	r2, [sp, #36]	; 0x24
 800a816:	e00c      	b.n	800a832 <_dtoa_r+0x28a>
 800a818:	2301      	movs	r3, #1
 800a81a:	e7f3      	b.n	800a804 <_dtoa_r+0x25c>
 800a81c:	2300      	movs	r3, #0
 800a81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a820:	9308      	str	r3, [sp, #32]
 800a822:	9b00      	ldr	r3, [sp, #0]
 800a824:	4413      	add	r3, r2
 800a826:	9302      	str	r3, [sp, #8]
 800a828:	3301      	adds	r3, #1
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	9303      	str	r3, [sp, #12]
 800a82e:	bfb8      	it	lt
 800a830:	2301      	movlt	r3, #1
 800a832:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a834:	2200      	movs	r2, #0
 800a836:	6042      	str	r2, [r0, #4]
 800a838:	2204      	movs	r2, #4
 800a83a:	f102 0614 	add.w	r6, r2, #20
 800a83e:	429e      	cmp	r6, r3
 800a840:	6841      	ldr	r1, [r0, #4]
 800a842:	d93d      	bls.n	800a8c0 <_dtoa_r+0x318>
 800a844:	4620      	mov	r0, r4
 800a846:	f000 fca9 	bl	800b19c <_Balloc>
 800a84a:	9001      	str	r0, [sp, #4]
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d13b      	bne.n	800a8c8 <_dtoa_r+0x320>
 800a850:	4b11      	ldr	r3, [pc, #68]	; (800a898 <_dtoa_r+0x2f0>)
 800a852:	4602      	mov	r2, r0
 800a854:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a858:	e6c0      	b.n	800a5dc <_dtoa_r+0x34>
 800a85a:	2301      	movs	r3, #1
 800a85c:	e7df      	b.n	800a81e <_dtoa_r+0x276>
 800a85e:	bf00      	nop
 800a860:	636f4361 	.word	0x636f4361
 800a864:	3fd287a7 	.word	0x3fd287a7
 800a868:	8b60c8b3 	.word	0x8b60c8b3
 800a86c:	3fc68a28 	.word	0x3fc68a28
 800a870:	509f79fb 	.word	0x509f79fb
 800a874:	3fd34413 	.word	0x3fd34413
 800a878:	0800cb29 	.word	0x0800cb29
 800a87c:	0800cb40 	.word	0x0800cb40
 800a880:	7ff00000 	.word	0x7ff00000
 800a884:	0800cb25 	.word	0x0800cb25
 800a888:	0800cb1c 	.word	0x0800cb1c
 800a88c:	0800caf9 	.word	0x0800caf9
 800a890:	3ff80000 	.word	0x3ff80000
 800a894:	0800cc30 	.word	0x0800cc30
 800a898:	0800cb9b 	.word	0x0800cb9b
 800a89c:	2501      	movs	r5, #1
 800a89e:	2300      	movs	r3, #0
 800a8a0:	9306      	str	r3, [sp, #24]
 800a8a2:	9508      	str	r5, [sp, #32]
 800a8a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	2312      	movs	r3, #18
 800a8b0:	e7b0      	b.n	800a814 <_dtoa_r+0x26c>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	9308      	str	r3, [sp, #32]
 800a8b6:	e7f5      	b.n	800a8a4 <_dtoa_r+0x2fc>
 800a8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8be:	e7b8      	b.n	800a832 <_dtoa_r+0x28a>
 800a8c0:	3101      	adds	r1, #1
 800a8c2:	6041      	str	r1, [r0, #4]
 800a8c4:	0052      	lsls	r2, r2, #1
 800a8c6:	e7b8      	b.n	800a83a <_dtoa_r+0x292>
 800a8c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8ca:	9a01      	ldr	r2, [sp, #4]
 800a8cc:	601a      	str	r2, [r3, #0]
 800a8ce:	9b03      	ldr	r3, [sp, #12]
 800a8d0:	2b0e      	cmp	r3, #14
 800a8d2:	f200 809d 	bhi.w	800aa10 <_dtoa_r+0x468>
 800a8d6:	2d00      	cmp	r5, #0
 800a8d8:	f000 809a 	beq.w	800aa10 <_dtoa_r+0x468>
 800a8dc:	9b00      	ldr	r3, [sp, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	dd32      	ble.n	800a948 <_dtoa_r+0x3a0>
 800a8e2:	4ab7      	ldr	r2, [pc, #732]	; (800abc0 <_dtoa_r+0x618>)
 800a8e4:	f003 030f 	and.w	r3, r3, #15
 800a8e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8f0:	9b00      	ldr	r3, [sp, #0]
 800a8f2:	05d8      	lsls	r0, r3, #23
 800a8f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a8f8:	d516      	bpl.n	800a928 <_dtoa_r+0x380>
 800a8fa:	4bb2      	ldr	r3, [pc, #712]	; (800abc4 <_dtoa_r+0x61c>)
 800a8fc:	ec51 0b19 	vmov	r0, r1, d9
 800a900:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a904:	f7f5 ffaa 	bl	800085c <__aeabi_ddiv>
 800a908:	f007 070f 	and.w	r7, r7, #15
 800a90c:	4682      	mov	sl, r0
 800a90e:	468b      	mov	fp, r1
 800a910:	2503      	movs	r5, #3
 800a912:	4eac      	ldr	r6, [pc, #688]	; (800abc4 <_dtoa_r+0x61c>)
 800a914:	b957      	cbnz	r7, 800a92c <_dtoa_r+0x384>
 800a916:	4642      	mov	r2, r8
 800a918:	464b      	mov	r3, r9
 800a91a:	4650      	mov	r0, sl
 800a91c:	4659      	mov	r1, fp
 800a91e:	f7f5 ff9d 	bl	800085c <__aeabi_ddiv>
 800a922:	4682      	mov	sl, r0
 800a924:	468b      	mov	fp, r1
 800a926:	e028      	b.n	800a97a <_dtoa_r+0x3d2>
 800a928:	2502      	movs	r5, #2
 800a92a:	e7f2      	b.n	800a912 <_dtoa_r+0x36a>
 800a92c:	07f9      	lsls	r1, r7, #31
 800a92e:	d508      	bpl.n	800a942 <_dtoa_r+0x39a>
 800a930:	4640      	mov	r0, r8
 800a932:	4649      	mov	r1, r9
 800a934:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a938:	f7f5 fe66 	bl	8000608 <__aeabi_dmul>
 800a93c:	3501      	adds	r5, #1
 800a93e:	4680      	mov	r8, r0
 800a940:	4689      	mov	r9, r1
 800a942:	107f      	asrs	r7, r7, #1
 800a944:	3608      	adds	r6, #8
 800a946:	e7e5      	b.n	800a914 <_dtoa_r+0x36c>
 800a948:	f000 809b 	beq.w	800aa82 <_dtoa_r+0x4da>
 800a94c:	9b00      	ldr	r3, [sp, #0]
 800a94e:	4f9d      	ldr	r7, [pc, #628]	; (800abc4 <_dtoa_r+0x61c>)
 800a950:	425e      	negs	r6, r3
 800a952:	4b9b      	ldr	r3, [pc, #620]	; (800abc0 <_dtoa_r+0x618>)
 800a954:	f006 020f 	and.w	r2, r6, #15
 800a958:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	ec51 0b19 	vmov	r0, r1, d9
 800a964:	f7f5 fe50 	bl	8000608 <__aeabi_dmul>
 800a968:	1136      	asrs	r6, r6, #4
 800a96a:	4682      	mov	sl, r0
 800a96c:	468b      	mov	fp, r1
 800a96e:	2300      	movs	r3, #0
 800a970:	2502      	movs	r5, #2
 800a972:	2e00      	cmp	r6, #0
 800a974:	d17a      	bne.n	800aa6c <_dtoa_r+0x4c4>
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1d3      	bne.n	800a922 <_dtoa_r+0x37a>
 800a97a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f000 8082 	beq.w	800aa86 <_dtoa_r+0x4de>
 800a982:	4b91      	ldr	r3, [pc, #580]	; (800abc8 <_dtoa_r+0x620>)
 800a984:	2200      	movs	r2, #0
 800a986:	4650      	mov	r0, sl
 800a988:	4659      	mov	r1, fp
 800a98a:	f7f6 f8af 	bl	8000aec <__aeabi_dcmplt>
 800a98e:	2800      	cmp	r0, #0
 800a990:	d079      	beq.n	800aa86 <_dtoa_r+0x4de>
 800a992:	9b03      	ldr	r3, [sp, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d076      	beq.n	800aa86 <_dtoa_r+0x4de>
 800a998:	9b02      	ldr	r3, [sp, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	dd36      	ble.n	800aa0c <_dtoa_r+0x464>
 800a99e:	9b00      	ldr	r3, [sp, #0]
 800a9a0:	4650      	mov	r0, sl
 800a9a2:	4659      	mov	r1, fp
 800a9a4:	1e5f      	subs	r7, r3, #1
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	4b88      	ldr	r3, [pc, #544]	; (800abcc <_dtoa_r+0x624>)
 800a9aa:	f7f5 fe2d 	bl	8000608 <__aeabi_dmul>
 800a9ae:	9e02      	ldr	r6, [sp, #8]
 800a9b0:	4682      	mov	sl, r0
 800a9b2:	468b      	mov	fp, r1
 800a9b4:	3501      	adds	r5, #1
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f7f5 fdbc 	bl	8000534 <__aeabi_i2d>
 800a9bc:	4652      	mov	r2, sl
 800a9be:	465b      	mov	r3, fp
 800a9c0:	f7f5 fe22 	bl	8000608 <__aeabi_dmul>
 800a9c4:	4b82      	ldr	r3, [pc, #520]	; (800abd0 <_dtoa_r+0x628>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f7f5 fc68 	bl	800029c <__adddf3>
 800a9cc:	46d0      	mov	r8, sl
 800a9ce:	46d9      	mov	r9, fp
 800a9d0:	4682      	mov	sl, r0
 800a9d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a9d6:	2e00      	cmp	r6, #0
 800a9d8:	d158      	bne.n	800aa8c <_dtoa_r+0x4e4>
 800a9da:	4b7e      	ldr	r3, [pc, #504]	; (800abd4 <_dtoa_r+0x62c>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	4640      	mov	r0, r8
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	f7f5 fc59 	bl	8000298 <__aeabi_dsub>
 800a9e6:	4652      	mov	r2, sl
 800a9e8:	465b      	mov	r3, fp
 800a9ea:	4680      	mov	r8, r0
 800a9ec:	4689      	mov	r9, r1
 800a9ee:	f7f6 f89b 	bl	8000b28 <__aeabi_dcmpgt>
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	f040 8295 	bne.w	800af22 <_dtoa_r+0x97a>
 800a9f8:	4652      	mov	r2, sl
 800a9fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a9fe:	4640      	mov	r0, r8
 800aa00:	4649      	mov	r1, r9
 800aa02:	f7f6 f873 	bl	8000aec <__aeabi_dcmplt>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	f040 8289 	bne.w	800af1e <_dtoa_r+0x976>
 800aa0c:	ec5b ab19 	vmov	sl, fp, d9
 800aa10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f2c0 8148 	blt.w	800aca8 <_dtoa_r+0x700>
 800aa18:	9a00      	ldr	r2, [sp, #0]
 800aa1a:	2a0e      	cmp	r2, #14
 800aa1c:	f300 8144 	bgt.w	800aca8 <_dtoa_r+0x700>
 800aa20:	4b67      	ldr	r3, [pc, #412]	; (800abc0 <_dtoa_r+0x618>)
 800aa22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa26:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f280 80d5 	bge.w	800abdc <_dtoa_r+0x634>
 800aa32:	9b03      	ldr	r3, [sp, #12]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f300 80d1 	bgt.w	800abdc <_dtoa_r+0x634>
 800aa3a:	f040 826f 	bne.w	800af1c <_dtoa_r+0x974>
 800aa3e:	4b65      	ldr	r3, [pc, #404]	; (800abd4 <_dtoa_r+0x62c>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	4640      	mov	r0, r8
 800aa44:	4649      	mov	r1, r9
 800aa46:	f7f5 fddf 	bl	8000608 <__aeabi_dmul>
 800aa4a:	4652      	mov	r2, sl
 800aa4c:	465b      	mov	r3, fp
 800aa4e:	f7f6 f861 	bl	8000b14 <__aeabi_dcmpge>
 800aa52:	9e03      	ldr	r6, [sp, #12]
 800aa54:	4637      	mov	r7, r6
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f040 8245 	bne.w	800aee6 <_dtoa_r+0x93e>
 800aa5c:	9d01      	ldr	r5, [sp, #4]
 800aa5e:	2331      	movs	r3, #49	; 0x31
 800aa60:	f805 3b01 	strb.w	r3, [r5], #1
 800aa64:	9b00      	ldr	r3, [sp, #0]
 800aa66:	3301      	adds	r3, #1
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	e240      	b.n	800aeee <_dtoa_r+0x946>
 800aa6c:	07f2      	lsls	r2, r6, #31
 800aa6e:	d505      	bpl.n	800aa7c <_dtoa_r+0x4d4>
 800aa70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa74:	f7f5 fdc8 	bl	8000608 <__aeabi_dmul>
 800aa78:	3501      	adds	r5, #1
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	1076      	asrs	r6, r6, #1
 800aa7e:	3708      	adds	r7, #8
 800aa80:	e777      	b.n	800a972 <_dtoa_r+0x3ca>
 800aa82:	2502      	movs	r5, #2
 800aa84:	e779      	b.n	800a97a <_dtoa_r+0x3d2>
 800aa86:	9f00      	ldr	r7, [sp, #0]
 800aa88:	9e03      	ldr	r6, [sp, #12]
 800aa8a:	e794      	b.n	800a9b6 <_dtoa_r+0x40e>
 800aa8c:	9901      	ldr	r1, [sp, #4]
 800aa8e:	4b4c      	ldr	r3, [pc, #304]	; (800abc0 <_dtoa_r+0x618>)
 800aa90:	4431      	add	r1, r6
 800aa92:	910d      	str	r1, [sp, #52]	; 0x34
 800aa94:	9908      	ldr	r1, [sp, #32]
 800aa96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa9e:	2900      	cmp	r1, #0
 800aaa0:	d043      	beq.n	800ab2a <_dtoa_r+0x582>
 800aaa2:	494d      	ldr	r1, [pc, #308]	; (800abd8 <_dtoa_r+0x630>)
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	f7f5 fed9 	bl	800085c <__aeabi_ddiv>
 800aaaa:	4652      	mov	r2, sl
 800aaac:	465b      	mov	r3, fp
 800aaae:	f7f5 fbf3 	bl	8000298 <__aeabi_dsub>
 800aab2:	9d01      	ldr	r5, [sp, #4]
 800aab4:	4682      	mov	sl, r0
 800aab6:	468b      	mov	fp, r1
 800aab8:	4649      	mov	r1, r9
 800aaba:	4640      	mov	r0, r8
 800aabc:	f7f6 f854 	bl	8000b68 <__aeabi_d2iz>
 800aac0:	4606      	mov	r6, r0
 800aac2:	f7f5 fd37 	bl	8000534 <__aeabi_i2d>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4640      	mov	r0, r8
 800aacc:	4649      	mov	r1, r9
 800aace:	f7f5 fbe3 	bl	8000298 <__aeabi_dsub>
 800aad2:	3630      	adds	r6, #48	; 0x30
 800aad4:	f805 6b01 	strb.w	r6, [r5], #1
 800aad8:	4652      	mov	r2, sl
 800aada:	465b      	mov	r3, fp
 800aadc:	4680      	mov	r8, r0
 800aade:	4689      	mov	r9, r1
 800aae0:	f7f6 f804 	bl	8000aec <__aeabi_dcmplt>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d163      	bne.n	800abb0 <_dtoa_r+0x608>
 800aae8:	4642      	mov	r2, r8
 800aaea:	464b      	mov	r3, r9
 800aaec:	4936      	ldr	r1, [pc, #216]	; (800abc8 <_dtoa_r+0x620>)
 800aaee:	2000      	movs	r0, #0
 800aaf0:	f7f5 fbd2 	bl	8000298 <__aeabi_dsub>
 800aaf4:	4652      	mov	r2, sl
 800aaf6:	465b      	mov	r3, fp
 800aaf8:	f7f5 fff8 	bl	8000aec <__aeabi_dcmplt>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	f040 80b5 	bne.w	800ac6c <_dtoa_r+0x6c4>
 800ab02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab04:	429d      	cmp	r5, r3
 800ab06:	d081      	beq.n	800aa0c <_dtoa_r+0x464>
 800ab08:	4b30      	ldr	r3, [pc, #192]	; (800abcc <_dtoa_r+0x624>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	4650      	mov	r0, sl
 800ab0e:	4659      	mov	r1, fp
 800ab10:	f7f5 fd7a 	bl	8000608 <__aeabi_dmul>
 800ab14:	4b2d      	ldr	r3, [pc, #180]	; (800abcc <_dtoa_r+0x624>)
 800ab16:	4682      	mov	sl, r0
 800ab18:	468b      	mov	fp, r1
 800ab1a:	4640      	mov	r0, r8
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f7f5 fd72 	bl	8000608 <__aeabi_dmul>
 800ab24:	4680      	mov	r8, r0
 800ab26:	4689      	mov	r9, r1
 800ab28:	e7c6      	b.n	800aab8 <_dtoa_r+0x510>
 800ab2a:	4650      	mov	r0, sl
 800ab2c:	4659      	mov	r1, fp
 800ab2e:	f7f5 fd6b 	bl	8000608 <__aeabi_dmul>
 800ab32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab34:	9d01      	ldr	r5, [sp, #4]
 800ab36:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab38:	4682      	mov	sl, r0
 800ab3a:	468b      	mov	fp, r1
 800ab3c:	4649      	mov	r1, r9
 800ab3e:	4640      	mov	r0, r8
 800ab40:	f7f6 f812 	bl	8000b68 <__aeabi_d2iz>
 800ab44:	4606      	mov	r6, r0
 800ab46:	f7f5 fcf5 	bl	8000534 <__aeabi_i2d>
 800ab4a:	3630      	adds	r6, #48	; 0x30
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	4640      	mov	r0, r8
 800ab52:	4649      	mov	r1, r9
 800ab54:	f7f5 fba0 	bl	8000298 <__aeabi_dsub>
 800ab58:	f805 6b01 	strb.w	r6, [r5], #1
 800ab5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab5e:	429d      	cmp	r5, r3
 800ab60:	4680      	mov	r8, r0
 800ab62:	4689      	mov	r9, r1
 800ab64:	f04f 0200 	mov.w	r2, #0
 800ab68:	d124      	bne.n	800abb4 <_dtoa_r+0x60c>
 800ab6a:	4b1b      	ldr	r3, [pc, #108]	; (800abd8 <_dtoa_r+0x630>)
 800ab6c:	4650      	mov	r0, sl
 800ab6e:	4659      	mov	r1, fp
 800ab70:	f7f5 fb94 	bl	800029c <__adddf3>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	4640      	mov	r0, r8
 800ab7a:	4649      	mov	r1, r9
 800ab7c:	f7f5 ffd4 	bl	8000b28 <__aeabi_dcmpgt>
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d173      	bne.n	800ac6c <_dtoa_r+0x6c4>
 800ab84:	4652      	mov	r2, sl
 800ab86:	465b      	mov	r3, fp
 800ab88:	4913      	ldr	r1, [pc, #76]	; (800abd8 <_dtoa_r+0x630>)
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	f7f5 fb84 	bl	8000298 <__aeabi_dsub>
 800ab90:	4602      	mov	r2, r0
 800ab92:	460b      	mov	r3, r1
 800ab94:	4640      	mov	r0, r8
 800ab96:	4649      	mov	r1, r9
 800ab98:	f7f5 ffa8 	bl	8000aec <__aeabi_dcmplt>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	f43f af35 	beq.w	800aa0c <_dtoa_r+0x464>
 800aba2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aba4:	1e6b      	subs	r3, r5, #1
 800aba6:	930f      	str	r3, [sp, #60]	; 0x3c
 800aba8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abac:	2b30      	cmp	r3, #48	; 0x30
 800abae:	d0f8      	beq.n	800aba2 <_dtoa_r+0x5fa>
 800abb0:	9700      	str	r7, [sp, #0]
 800abb2:	e049      	b.n	800ac48 <_dtoa_r+0x6a0>
 800abb4:	4b05      	ldr	r3, [pc, #20]	; (800abcc <_dtoa_r+0x624>)
 800abb6:	f7f5 fd27 	bl	8000608 <__aeabi_dmul>
 800abba:	4680      	mov	r8, r0
 800abbc:	4689      	mov	r9, r1
 800abbe:	e7bd      	b.n	800ab3c <_dtoa_r+0x594>
 800abc0:	0800cc30 	.word	0x0800cc30
 800abc4:	0800cc08 	.word	0x0800cc08
 800abc8:	3ff00000 	.word	0x3ff00000
 800abcc:	40240000 	.word	0x40240000
 800abd0:	401c0000 	.word	0x401c0000
 800abd4:	40140000 	.word	0x40140000
 800abd8:	3fe00000 	.word	0x3fe00000
 800abdc:	9d01      	ldr	r5, [sp, #4]
 800abde:	4656      	mov	r6, sl
 800abe0:	465f      	mov	r7, fp
 800abe2:	4642      	mov	r2, r8
 800abe4:	464b      	mov	r3, r9
 800abe6:	4630      	mov	r0, r6
 800abe8:	4639      	mov	r1, r7
 800abea:	f7f5 fe37 	bl	800085c <__aeabi_ddiv>
 800abee:	f7f5 ffbb 	bl	8000b68 <__aeabi_d2iz>
 800abf2:	4682      	mov	sl, r0
 800abf4:	f7f5 fc9e 	bl	8000534 <__aeabi_i2d>
 800abf8:	4642      	mov	r2, r8
 800abfa:	464b      	mov	r3, r9
 800abfc:	f7f5 fd04 	bl	8000608 <__aeabi_dmul>
 800ac00:	4602      	mov	r2, r0
 800ac02:	460b      	mov	r3, r1
 800ac04:	4630      	mov	r0, r6
 800ac06:	4639      	mov	r1, r7
 800ac08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ac0c:	f7f5 fb44 	bl	8000298 <__aeabi_dsub>
 800ac10:	f805 6b01 	strb.w	r6, [r5], #1
 800ac14:	9e01      	ldr	r6, [sp, #4]
 800ac16:	9f03      	ldr	r7, [sp, #12]
 800ac18:	1bae      	subs	r6, r5, r6
 800ac1a:	42b7      	cmp	r7, r6
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	d135      	bne.n	800ac8e <_dtoa_r+0x6e6>
 800ac22:	f7f5 fb3b 	bl	800029c <__adddf3>
 800ac26:	4642      	mov	r2, r8
 800ac28:	464b      	mov	r3, r9
 800ac2a:	4606      	mov	r6, r0
 800ac2c:	460f      	mov	r7, r1
 800ac2e:	f7f5 ff7b 	bl	8000b28 <__aeabi_dcmpgt>
 800ac32:	b9d0      	cbnz	r0, 800ac6a <_dtoa_r+0x6c2>
 800ac34:	4642      	mov	r2, r8
 800ac36:	464b      	mov	r3, r9
 800ac38:	4630      	mov	r0, r6
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	f7f5 ff4c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac40:	b110      	cbz	r0, 800ac48 <_dtoa_r+0x6a0>
 800ac42:	f01a 0f01 	tst.w	sl, #1
 800ac46:	d110      	bne.n	800ac6a <_dtoa_r+0x6c2>
 800ac48:	4620      	mov	r0, r4
 800ac4a:	ee18 1a10 	vmov	r1, s16
 800ac4e:	f000 fae5 	bl	800b21c <_Bfree>
 800ac52:	2300      	movs	r3, #0
 800ac54:	9800      	ldr	r0, [sp, #0]
 800ac56:	702b      	strb	r3, [r5, #0]
 800ac58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	6018      	str	r0, [r3, #0]
 800ac5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f43f acf1 	beq.w	800a648 <_dtoa_r+0xa0>
 800ac66:	601d      	str	r5, [r3, #0]
 800ac68:	e4ee      	b.n	800a648 <_dtoa_r+0xa0>
 800ac6a:	9f00      	ldr	r7, [sp, #0]
 800ac6c:	462b      	mov	r3, r5
 800ac6e:	461d      	mov	r5, r3
 800ac70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac74:	2a39      	cmp	r2, #57	; 0x39
 800ac76:	d106      	bne.n	800ac86 <_dtoa_r+0x6de>
 800ac78:	9a01      	ldr	r2, [sp, #4]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d1f7      	bne.n	800ac6e <_dtoa_r+0x6c6>
 800ac7e:	9901      	ldr	r1, [sp, #4]
 800ac80:	2230      	movs	r2, #48	; 0x30
 800ac82:	3701      	adds	r7, #1
 800ac84:	700a      	strb	r2, [r1, #0]
 800ac86:	781a      	ldrb	r2, [r3, #0]
 800ac88:	3201      	adds	r2, #1
 800ac8a:	701a      	strb	r2, [r3, #0]
 800ac8c:	e790      	b.n	800abb0 <_dtoa_r+0x608>
 800ac8e:	4ba6      	ldr	r3, [pc, #664]	; (800af28 <_dtoa_r+0x980>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	f7f5 fcb9 	bl	8000608 <__aeabi_dmul>
 800ac96:	2200      	movs	r2, #0
 800ac98:	2300      	movs	r3, #0
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	460f      	mov	r7, r1
 800ac9e:	f7f5 ff1b 	bl	8000ad8 <__aeabi_dcmpeq>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d09d      	beq.n	800abe2 <_dtoa_r+0x63a>
 800aca6:	e7cf      	b.n	800ac48 <_dtoa_r+0x6a0>
 800aca8:	9a08      	ldr	r2, [sp, #32]
 800acaa:	2a00      	cmp	r2, #0
 800acac:	f000 80d7 	beq.w	800ae5e <_dtoa_r+0x8b6>
 800acb0:	9a06      	ldr	r2, [sp, #24]
 800acb2:	2a01      	cmp	r2, #1
 800acb4:	f300 80ba 	bgt.w	800ae2c <_dtoa_r+0x884>
 800acb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acba:	2a00      	cmp	r2, #0
 800acbc:	f000 80b2 	beq.w	800ae24 <_dtoa_r+0x87c>
 800acc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800acc4:	9e07      	ldr	r6, [sp, #28]
 800acc6:	9d04      	ldr	r5, [sp, #16]
 800acc8:	9a04      	ldr	r2, [sp, #16]
 800acca:	441a      	add	r2, r3
 800accc:	9204      	str	r2, [sp, #16]
 800acce:	9a05      	ldr	r2, [sp, #20]
 800acd0:	2101      	movs	r1, #1
 800acd2:	441a      	add	r2, r3
 800acd4:	4620      	mov	r0, r4
 800acd6:	9205      	str	r2, [sp, #20]
 800acd8:	f000 fb58 	bl	800b38c <__i2b>
 800acdc:	4607      	mov	r7, r0
 800acde:	2d00      	cmp	r5, #0
 800ace0:	dd0c      	ble.n	800acfc <_dtoa_r+0x754>
 800ace2:	9b05      	ldr	r3, [sp, #20]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	dd09      	ble.n	800acfc <_dtoa_r+0x754>
 800ace8:	42ab      	cmp	r3, r5
 800acea:	9a04      	ldr	r2, [sp, #16]
 800acec:	bfa8      	it	ge
 800acee:	462b      	movge	r3, r5
 800acf0:	1ad2      	subs	r2, r2, r3
 800acf2:	9204      	str	r2, [sp, #16]
 800acf4:	9a05      	ldr	r2, [sp, #20]
 800acf6:	1aed      	subs	r5, r5, r3
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	9305      	str	r3, [sp, #20]
 800acfc:	9b07      	ldr	r3, [sp, #28]
 800acfe:	b31b      	cbz	r3, 800ad48 <_dtoa_r+0x7a0>
 800ad00:	9b08      	ldr	r3, [sp, #32]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f000 80af 	beq.w	800ae66 <_dtoa_r+0x8be>
 800ad08:	2e00      	cmp	r6, #0
 800ad0a:	dd13      	ble.n	800ad34 <_dtoa_r+0x78c>
 800ad0c:	4639      	mov	r1, r7
 800ad0e:	4632      	mov	r2, r6
 800ad10:	4620      	mov	r0, r4
 800ad12:	f000 fbfb 	bl	800b50c <__pow5mult>
 800ad16:	ee18 2a10 	vmov	r2, s16
 800ad1a:	4601      	mov	r1, r0
 800ad1c:	4607      	mov	r7, r0
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f000 fb4a 	bl	800b3b8 <__multiply>
 800ad24:	ee18 1a10 	vmov	r1, s16
 800ad28:	4680      	mov	r8, r0
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 fa76 	bl	800b21c <_Bfree>
 800ad30:	ee08 8a10 	vmov	s16, r8
 800ad34:	9b07      	ldr	r3, [sp, #28]
 800ad36:	1b9a      	subs	r2, r3, r6
 800ad38:	d006      	beq.n	800ad48 <_dtoa_r+0x7a0>
 800ad3a:	ee18 1a10 	vmov	r1, s16
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 fbe4 	bl	800b50c <__pow5mult>
 800ad44:	ee08 0a10 	vmov	s16, r0
 800ad48:	2101      	movs	r1, #1
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 fb1e 	bl	800b38c <__i2b>
 800ad50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	4606      	mov	r6, r0
 800ad56:	f340 8088 	ble.w	800ae6a <_dtoa_r+0x8c2>
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	4601      	mov	r1, r0
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f000 fbd4 	bl	800b50c <__pow5mult>
 800ad64:	9b06      	ldr	r3, [sp, #24]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	4606      	mov	r6, r0
 800ad6a:	f340 8081 	ble.w	800ae70 <_dtoa_r+0x8c8>
 800ad6e:	f04f 0800 	mov.w	r8, #0
 800ad72:	6933      	ldr	r3, [r6, #16]
 800ad74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad78:	6918      	ldr	r0, [r3, #16]
 800ad7a:	f000 fab7 	bl	800b2ec <__hi0bits>
 800ad7e:	f1c0 0020 	rsb	r0, r0, #32
 800ad82:	9b05      	ldr	r3, [sp, #20]
 800ad84:	4418      	add	r0, r3
 800ad86:	f010 001f 	ands.w	r0, r0, #31
 800ad8a:	f000 8092 	beq.w	800aeb2 <_dtoa_r+0x90a>
 800ad8e:	f1c0 0320 	rsb	r3, r0, #32
 800ad92:	2b04      	cmp	r3, #4
 800ad94:	f340 808a 	ble.w	800aeac <_dtoa_r+0x904>
 800ad98:	f1c0 001c 	rsb	r0, r0, #28
 800ad9c:	9b04      	ldr	r3, [sp, #16]
 800ad9e:	4403      	add	r3, r0
 800ada0:	9304      	str	r3, [sp, #16]
 800ada2:	9b05      	ldr	r3, [sp, #20]
 800ada4:	4403      	add	r3, r0
 800ada6:	4405      	add	r5, r0
 800ada8:	9305      	str	r3, [sp, #20]
 800adaa:	9b04      	ldr	r3, [sp, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	dd07      	ble.n	800adc0 <_dtoa_r+0x818>
 800adb0:	ee18 1a10 	vmov	r1, s16
 800adb4:	461a      	mov	r2, r3
 800adb6:	4620      	mov	r0, r4
 800adb8:	f000 fc02 	bl	800b5c0 <__lshift>
 800adbc:	ee08 0a10 	vmov	s16, r0
 800adc0:	9b05      	ldr	r3, [sp, #20]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	dd05      	ble.n	800add2 <_dtoa_r+0x82a>
 800adc6:	4631      	mov	r1, r6
 800adc8:	461a      	mov	r2, r3
 800adca:	4620      	mov	r0, r4
 800adcc:	f000 fbf8 	bl	800b5c0 <__lshift>
 800add0:	4606      	mov	r6, r0
 800add2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800add4:	2b00      	cmp	r3, #0
 800add6:	d06e      	beq.n	800aeb6 <_dtoa_r+0x90e>
 800add8:	ee18 0a10 	vmov	r0, s16
 800addc:	4631      	mov	r1, r6
 800adde:	f000 fc5f 	bl	800b6a0 <__mcmp>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	da67      	bge.n	800aeb6 <_dtoa_r+0x90e>
 800ade6:	9b00      	ldr	r3, [sp, #0]
 800ade8:	3b01      	subs	r3, #1
 800adea:	ee18 1a10 	vmov	r1, s16
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	220a      	movs	r2, #10
 800adf2:	2300      	movs	r3, #0
 800adf4:	4620      	mov	r0, r4
 800adf6:	f000 fa33 	bl	800b260 <__multadd>
 800adfa:	9b08      	ldr	r3, [sp, #32]
 800adfc:	ee08 0a10 	vmov	s16, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 81b1 	beq.w	800b168 <_dtoa_r+0xbc0>
 800ae06:	2300      	movs	r3, #0
 800ae08:	4639      	mov	r1, r7
 800ae0a:	220a      	movs	r2, #10
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	f000 fa27 	bl	800b260 <__multadd>
 800ae12:	9b02      	ldr	r3, [sp, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	4607      	mov	r7, r0
 800ae18:	f300 808e 	bgt.w	800af38 <_dtoa_r+0x990>
 800ae1c:	9b06      	ldr	r3, [sp, #24]
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	dc51      	bgt.n	800aec6 <_dtoa_r+0x91e>
 800ae22:	e089      	b.n	800af38 <_dtoa_r+0x990>
 800ae24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae2a:	e74b      	b.n	800acc4 <_dtoa_r+0x71c>
 800ae2c:	9b03      	ldr	r3, [sp, #12]
 800ae2e:	1e5e      	subs	r6, r3, #1
 800ae30:	9b07      	ldr	r3, [sp, #28]
 800ae32:	42b3      	cmp	r3, r6
 800ae34:	bfbf      	itttt	lt
 800ae36:	9b07      	ldrlt	r3, [sp, #28]
 800ae38:	9607      	strlt	r6, [sp, #28]
 800ae3a:	1af2      	sublt	r2, r6, r3
 800ae3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae3e:	bfb6      	itet	lt
 800ae40:	189b      	addlt	r3, r3, r2
 800ae42:	1b9e      	subge	r6, r3, r6
 800ae44:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ae46:	9b03      	ldr	r3, [sp, #12]
 800ae48:	bfb8      	it	lt
 800ae4a:	2600      	movlt	r6, #0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	bfb7      	itett	lt
 800ae50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ae54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ae58:	1a9d      	sublt	r5, r3, r2
 800ae5a:	2300      	movlt	r3, #0
 800ae5c:	e734      	b.n	800acc8 <_dtoa_r+0x720>
 800ae5e:	9e07      	ldr	r6, [sp, #28]
 800ae60:	9d04      	ldr	r5, [sp, #16]
 800ae62:	9f08      	ldr	r7, [sp, #32]
 800ae64:	e73b      	b.n	800acde <_dtoa_r+0x736>
 800ae66:	9a07      	ldr	r2, [sp, #28]
 800ae68:	e767      	b.n	800ad3a <_dtoa_r+0x792>
 800ae6a:	9b06      	ldr	r3, [sp, #24]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	dc18      	bgt.n	800aea2 <_dtoa_r+0x8fa>
 800ae70:	f1ba 0f00 	cmp.w	sl, #0
 800ae74:	d115      	bne.n	800aea2 <_dtoa_r+0x8fa>
 800ae76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae7a:	b993      	cbnz	r3, 800aea2 <_dtoa_r+0x8fa>
 800ae7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae80:	0d1b      	lsrs	r3, r3, #20
 800ae82:	051b      	lsls	r3, r3, #20
 800ae84:	b183      	cbz	r3, 800aea8 <_dtoa_r+0x900>
 800ae86:	9b04      	ldr	r3, [sp, #16]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	9304      	str	r3, [sp, #16]
 800ae8c:	9b05      	ldr	r3, [sp, #20]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	9305      	str	r3, [sp, #20]
 800ae92:	f04f 0801 	mov.w	r8, #1
 800ae96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f47f af6a 	bne.w	800ad72 <_dtoa_r+0x7ca>
 800ae9e:	2001      	movs	r0, #1
 800aea0:	e76f      	b.n	800ad82 <_dtoa_r+0x7da>
 800aea2:	f04f 0800 	mov.w	r8, #0
 800aea6:	e7f6      	b.n	800ae96 <_dtoa_r+0x8ee>
 800aea8:	4698      	mov	r8, r3
 800aeaa:	e7f4      	b.n	800ae96 <_dtoa_r+0x8ee>
 800aeac:	f43f af7d 	beq.w	800adaa <_dtoa_r+0x802>
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	301c      	adds	r0, #28
 800aeb4:	e772      	b.n	800ad9c <_dtoa_r+0x7f4>
 800aeb6:	9b03      	ldr	r3, [sp, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	dc37      	bgt.n	800af2c <_dtoa_r+0x984>
 800aebc:	9b06      	ldr	r3, [sp, #24]
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	dd34      	ble.n	800af2c <_dtoa_r+0x984>
 800aec2:	9b03      	ldr	r3, [sp, #12]
 800aec4:	9302      	str	r3, [sp, #8]
 800aec6:	9b02      	ldr	r3, [sp, #8]
 800aec8:	b96b      	cbnz	r3, 800aee6 <_dtoa_r+0x93e>
 800aeca:	4631      	mov	r1, r6
 800aecc:	2205      	movs	r2, #5
 800aece:	4620      	mov	r0, r4
 800aed0:	f000 f9c6 	bl	800b260 <__multadd>
 800aed4:	4601      	mov	r1, r0
 800aed6:	4606      	mov	r6, r0
 800aed8:	ee18 0a10 	vmov	r0, s16
 800aedc:	f000 fbe0 	bl	800b6a0 <__mcmp>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	f73f adbb 	bgt.w	800aa5c <_dtoa_r+0x4b4>
 800aee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee8:	9d01      	ldr	r5, [sp, #4]
 800aeea:	43db      	mvns	r3, r3
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	f04f 0800 	mov.w	r8, #0
 800aef2:	4631      	mov	r1, r6
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 f991 	bl	800b21c <_Bfree>
 800aefa:	2f00      	cmp	r7, #0
 800aefc:	f43f aea4 	beq.w	800ac48 <_dtoa_r+0x6a0>
 800af00:	f1b8 0f00 	cmp.w	r8, #0
 800af04:	d005      	beq.n	800af12 <_dtoa_r+0x96a>
 800af06:	45b8      	cmp	r8, r7
 800af08:	d003      	beq.n	800af12 <_dtoa_r+0x96a>
 800af0a:	4641      	mov	r1, r8
 800af0c:	4620      	mov	r0, r4
 800af0e:	f000 f985 	bl	800b21c <_Bfree>
 800af12:	4639      	mov	r1, r7
 800af14:	4620      	mov	r0, r4
 800af16:	f000 f981 	bl	800b21c <_Bfree>
 800af1a:	e695      	b.n	800ac48 <_dtoa_r+0x6a0>
 800af1c:	2600      	movs	r6, #0
 800af1e:	4637      	mov	r7, r6
 800af20:	e7e1      	b.n	800aee6 <_dtoa_r+0x93e>
 800af22:	9700      	str	r7, [sp, #0]
 800af24:	4637      	mov	r7, r6
 800af26:	e599      	b.n	800aa5c <_dtoa_r+0x4b4>
 800af28:	40240000 	.word	0x40240000
 800af2c:	9b08      	ldr	r3, [sp, #32]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f000 80ca 	beq.w	800b0c8 <_dtoa_r+0xb20>
 800af34:	9b03      	ldr	r3, [sp, #12]
 800af36:	9302      	str	r3, [sp, #8]
 800af38:	2d00      	cmp	r5, #0
 800af3a:	dd05      	ble.n	800af48 <_dtoa_r+0x9a0>
 800af3c:	4639      	mov	r1, r7
 800af3e:	462a      	mov	r2, r5
 800af40:	4620      	mov	r0, r4
 800af42:	f000 fb3d 	bl	800b5c0 <__lshift>
 800af46:	4607      	mov	r7, r0
 800af48:	f1b8 0f00 	cmp.w	r8, #0
 800af4c:	d05b      	beq.n	800b006 <_dtoa_r+0xa5e>
 800af4e:	6879      	ldr	r1, [r7, #4]
 800af50:	4620      	mov	r0, r4
 800af52:	f000 f923 	bl	800b19c <_Balloc>
 800af56:	4605      	mov	r5, r0
 800af58:	b928      	cbnz	r0, 800af66 <_dtoa_r+0x9be>
 800af5a:	4b87      	ldr	r3, [pc, #540]	; (800b178 <_dtoa_r+0xbd0>)
 800af5c:	4602      	mov	r2, r0
 800af5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af62:	f7ff bb3b 	b.w	800a5dc <_dtoa_r+0x34>
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	3202      	adds	r2, #2
 800af6a:	0092      	lsls	r2, r2, #2
 800af6c:	f107 010c 	add.w	r1, r7, #12
 800af70:	300c      	adds	r0, #12
 800af72:	f7fe fded 	bl	8009b50 <memcpy>
 800af76:	2201      	movs	r2, #1
 800af78:	4629      	mov	r1, r5
 800af7a:	4620      	mov	r0, r4
 800af7c:	f000 fb20 	bl	800b5c0 <__lshift>
 800af80:	9b01      	ldr	r3, [sp, #4]
 800af82:	f103 0901 	add.w	r9, r3, #1
 800af86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800af8a:	4413      	add	r3, r2
 800af8c:	9305      	str	r3, [sp, #20]
 800af8e:	f00a 0301 	and.w	r3, sl, #1
 800af92:	46b8      	mov	r8, r7
 800af94:	9304      	str	r3, [sp, #16]
 800af96:	4607      	mov	r7, r0
 800af98:	4631      	mov	r1, r6
 800af9a:	ee18 0a10 	vmov	r0, s16
 800af9e:	f7ff fa77 	bl	800a490 <quorem>
 800afa2:	4641      	mov	r1, r8
 800afa4:	9002      	str	r0, [sp, #8]
 800afa6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800afaa:	ee18 0a10 	vmov	r0, s16
 800afae:	f000 fb77 	bl	800b6a0 <__mcmp>
 800afb2:	463a      	mov	r2, r7
 800afb4:	9003      	str	r0, [sp, #12]
 800afb6:	4631      	mov	r1, r6
 800afb8:	4620      	mov	r0, r4
 800afba:	f000 fb8d 	bl	800b6d8 <__mdiff>
 800afbe:	68c2      	ldr	r2, [r0, #12]
 800afc0:	f109 3bff 	add.w	fp, r9, #4294967295
 800afc4:	4605      	mov	r5, r0
 800afc6:	bb02      	cbnz	r2, 800b00a <_dtoa_r+0xa62>
 800afc8:	4601      	mov	r1, r0
 800afca:	ee18 0a10 	vmov	r0, s16
 800afce:	f000 fb67 	bl	800b6a0 <__mcmp>
 800afd2:	4602      	mov	r2, r0
 800afd4:	4629      	mov	r1, r5
 800afd6:	4620      	mov	r0, r4
 800afd8:	9207      	str	r2, [sp, #28]
 800afda:	f000 f91f 	bl	800b21c <_Bfree>
 800afde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800afe2:	ea43 0102 	orr.w	r1, r3, r2
 800afe6:	9b04      	ldr	r3, [sp, #16]
 800afe8:	430b      	orrs	r3, r1
 800afea:	464d      	mov	r5, r9
 800afec:	d10f      	bne.n	800b00e <_dtoa_r+0xa66>
 800afee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aff2:	d02a      	beq.n	800b04a <_dtoa_r+0xaa2>
 800aff4:	9b03      	ldr	r3, [sp, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	dd02      	ble.n	800b000 <_dtoa_r+0xa58>
 800affa:	9b02      	ldr	r3, [sp, #8]
 800affc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b000:	f88b a000 	strb.w	sl, [fp]
 800b004:	e775      	b.n	800aef2 <_dtoa_r+0x94a>
 800b006:	4638      	mov	r0, r7
 800b008:	e7ba      	b.n	800af80 <_dtoa_r+0x9d8>
 800b00a:	2201      	movs	r2, #1
 800b00c:	e7e2      	b.n	800afd4 <_dtoa_r+0xa2c>
 800b00e:	9b03      	ldr	r3, [sp, #12]
 800b010:	2b00      	cmp	r3, #0
 800b012:	db04      	blt.n	800b01e <_dtoa_r+0xa76>
 800b014:	9906      	ldr	r1, [sp, #24]
 800b016:	430b      	orrs	r3, r1
 800b018:	9904      	ldr	r1, [sp, #16]
 800b01a:	430b      	orrs	r3, r1
 800b01c:	d122      	bne.n	800b064 <_dtoa_r+0xabc>
 800b01e:	2a00      	cmp	r2, #0
 800b020:	ddee      	ble.n	800b000 <_dtoa_r+0xa58>
 800b022:	ee18 1a10 	vmov	r1, s16
 800b026:	2201      	movs	r2, #1
 800b028:	4620      	mov	r0, r4
 800b02a:	f000 fac9 	bl	800b5c0 <__lshift>
 800b02e:	4631      	mov	r1, r6
 800b030:	ee08 0a10 	vmov	s16, r0
 800b034:	f000 fb34 	bl	800b6a0 <__mcmp>
 800b038:	2800      	cmp	r0, #0
 800b03a:	dc03      	bgt.n	800b044 <_dtoa_r+0xa9c>
 800b03c:	d1e0      	bne.n	800b000 <_dtoa_r+0xa58>
 800b03e:	f01a 0f01 	tst.w	sl, #1
 800b042:	d0dd      	beq.n	800b000 <_dtoa_r+0xa58>
 800b044:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b048:	d1d7      	bne.n	800affa <_dtoa_r+0xa52>
 800b04a:	2339      	movs	r3, #57	; 0x39
 800b04c:	f88b 3000 	strb.w	r3, [fp]
 800b050:	462b      	mov	r3, r5
 800b052:	461d      	mov	r5, r3
 800b054:	3b01      	subs	r3, #1
 800b056:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b05a:	2a39      	cmp	r2, #57	; 0x39
 800b05c:	d071      	beq.n	800b142 <_dtoa_r+0xb9a>
 800b05e:	3201      	adds	r2, #1
 800b060:	701a      	strb	r2, [r3, #0]
 800b062:	e746      	b.n	800aef2 <_dtoa_r+0x94a>
 800b064:	2a00      	cmp	r2, #0
 800b066:	dd07      	ble.n	800b078 <_dtoa_r+0xad0>
 800b068:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b06c:	d0ed      	beq.n	800b04a <_dtoa_r+0xaa2>
 800b06e:	f10a 0301 	add.w	r3, sl, #1
 800b072:	f88b 3000 	strb.w	r3, [fp]
 800b076:	e73c      	b.n	800aef2 <_dtoa_r+0x94a>
 800b078:	9b05      	ldr	r3, [sp, #20]
 800b07a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b07e:	4599      	cmp	r9, r3
 800b080:	d047      	beq.n	800b112 <_dtoa_r+0xb6a>
 800b082:	ee18 1a10 	vmov	r1, s16
 800b086:	2300      	movs	r3, #0
 800b088:	220a      	movs	r2, #10
 800b08a:	4620      	mov	r0, r4
 800b08c:	f000 f8e8 	bl	800b260 <__multadd>
 800b090:	45b8      	cmp	r8, r7
 800b092:	ee08 0a10 	vmov	s16, r0
 800b096:	f04f 0300 	mov.w	r3, #0
 800b09a:	f04f 020a 	mov.w	r2, #10
 800b09e:	4641      	mov	r1, r8
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	d106      	bne.n	800b0b2 <_dtoa_r+0xb0a>
 800b0a4:	f000 f8dc 	bl	800b260 <__multadd>
 800b0a8:	4680      	mov	r8, r0
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	f109 0901 	add.w	r9, r9, #1
 800b0b0:	e772      	b.n	800af98 <_dtoa_r+0x9f0>
 800b0b2:	f000 f8d5 	bl	800b260 <__multadd>
 800b0b6:	4639      	mov	r1, r7
 800b0b8:	4680      	mov	r8, r0
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	220a      	movs	r2, #10
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f000 f8ce 	bl	800b260 <__multadd>
 800b0c4:	4607      	mov	r7, r0
 800b0c6:	e7f1      	b.n	800b0ac <_dtoa_r+0xb04>
 800b0c8:	9b03      	ldr	r3, [sp, #12]
 800b0ca:	9302      	str	r3, [sp, #8]
 800b0cc:	9d01      	ldr	r5, [sp, #4]
 800b0ce:	ee18 0a10 	vmov	r0, s16
 800b0d2:	4631      	mov	r1, r6
 800b0d4:	f7ff f9dc 	bl	800a490 <quorem>
 800b0d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b0dc:	9b01      	ldr	r3, [sp, #4]
 800b0de:	f805 ab01 	strb.w	sl, [r5], #1
 800b0e2:	1aea      	subs	r2, r5, r3
 800b0e4:	9b02      	ldr	r3, [sp, #8]
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	dd09      	ble.n	800b0fe <_dtoa_r+0xb56>
 800b0ea:	ee18 1a10 	vmov	r1, s16
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	220a      	movs	r2, #10
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f000 f8b4 	bl	800b260 <__multadd>
 800b0f8:	ee08 0a10 	vmov	s16, r0
 800b0fc:	e7e7      	b.n	800b0ce <_dtoa_r+0xb26>
 800b0fe:	9b02      	ldr	r3, [sp, #8]
 800b100:	2b00      	cmp	r3, #0
 800b102:	bfc8      	it	gt
 800b104:	461d      	movgt	r5, r3
 800b106:	9b01      	ldr	r3, [sp, #4]
 800b108:	bfd8      	it	le
 800b10a:	2501      	movle	r5, #1
 800b10c:	441d      	add	r5, r3
 800b10e:	f04f 0800 	mov.w	r8, #0
 800b112:	ee18 1a10 	vmov	r1, s16
 800b116:	2201      	movs	r2, #1
 800b118:	4620      	mov	r0, r4
 800b11a:	f000 fa51 	bl	800b5c0 <__lshift>
 800b11e:	4631      	mov	r1, r6
 800b120:	ee08 0a10 	vmov	s16, r0
 800b124:	f000 fabc 	bl	800b6a0 <__mcmp>
 800b128:	2800      	cmp	r0, #0
 800b12a:	dc91      	bgt.n	800b050 <_dtoa_r+0xaa8>
 800b12c:	d102      	bne.n	800b134 <_dtoa_r+0xb8c>
 800b12e:	f01a 0f01 	tst.w	sl, #1
 800b132:	d18d      	bne.n	800b050 <_dtoa_r+0xaa8>
 800b134:	462b      	mov	r3, r5
 800b136:	461d      	mov	r5, r3
 800b138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b13c:	2a30      	cmp	r2, #48	; 0x30
 800b13e:	d0fa      	beq.n	800b136 <_dtoa_r+0xb8e>
 800b140:	e6d7      	b.n	800aef2 <_dtoa_r+0x94a>
 800b142:	9a01      	ldr	r2, [sp, #4]
 800b144:	429a      	cmp	r2, r3
 800b146:	d184      	bne.n	800b052 <_dtoa_r+0xaaa>
 800b148:	9b00      	ldr	r3, [sp, #0]
 800b14a:	3301      	adds	r3, #1
 800b14c:	9300      	str	r3, [sp, #0]
 800b14e:	2331      	movs	r3, #49	; 0x31
 800b150:	7013      	strb	r3, [r2, #0]
 800b152:	e6ce      	b.n	800aef2 <_dtoa_r+0x94a>
 800b154:	4b09      	ldr	r3, [pc, #36]	; (800b17c <_dtoa_r+0xbd4>)
 800b156:	f7ff ba95 	b.w	800a684 <_dtoa_r+0xdc>
 800b15a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f47f aa6e 	bne.w	800a63e <_dtoa_r+0x96>
 800b162:	4b07      	ldr	r3, [pc, #28]	; (800b180 <_dtoa_r+0xbd8>)
 800b164:	f7ff ba8e 	b.w	800a684 <_dtoa_r+0xdc>
 800b168:	9b02      	ldr	r3, [sp, #8]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	dcae      	bgt.n	800b0cc <_dtoa_r+0xb24>
 800b16e:	9b06      	ldr	r3, [sp, #24]
 800b170:	2b02      	cmp	r3, #2
 800b172:	f73f aea8 	bgt.w	800aec6 <_dtoa_r+0x91e>
 800b176:	e7a9      	b.n	800b0cc <_dtoa_r+0xb24>
 800b178:	0800cb9b 	.word	0x0800cb9b
 800b17c:	0800caf8 	.word	0x0800caf8
 800b180:	0800cb1c 	.word	0x0800cb1c

0800b184 <_localeconv_r>:
 800b184:	4800      	ldr	r0, [pc, #0]	; (800b188 <_localeconv_r+0x4>)
 800b186:	4770      	bx	lr
 800b188:	20000164 	.word	0x20000164

0800b18c <malloc>:
 800b18c:	4b02      	ldr	r3, [pc, #8]	; (800b198 <malloc+0xc>)
 800b18e:	4601      	mov	r1, r0
 800b190:	6818      	ldr	r0, [r3, #0]
 800b192:	f000 bc09 	b.w	800b9a8 <_malloc_r>
 800b196:	bf00      	nop
 800b198:	20000010 	.word	0x20000010

0800b19c <_Balloc>:
 800b19c:	b570      	push	{r4, r5, r6, lr}
 800b19e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	460d      	mov	r5, r1
 800b1a4:	b976      	cbnz	r6, 800b1c4 <_Balloc+0x28>
 800b1a6:	2010      	movs	r0, #16
 800b1a8:	f7ff fff0 	bl	800b18c <malloc>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	6260      	str	r0, [r4, #36]	; 0x24
 800b1b0:	b920      	cbnz	r0, 800b1bc <_Balloc+0x20>
 800b1b2:	4b18      	ldr	r3, [pc, #96]	; (800b214 <_Balloc+0x78>)
 800b1b4:	4818      	ldr	r0, [pc, #96]	; (800b218 <_Balloc+0x7c>)
 800b1b6:	2166      	movs	r1, #102	; 0x66
 800b1b8:	f000 fdd6 	bl	800bd68 <__assert_func>
 800b1bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1c0:	6006      	str	r6, [r0, #0]
 800b1c2:	60c6      	str	r6, [r0, #12]
 800b1c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1c6:	68f3      	ldr	r3, [r6, #12]
 800b1c8:	b183      	cbz	r3, 800b1ec <_Balloc+0x50>
 800b1ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1d2:	b9b8      	cbnz	r0, 800b204 <_Balloc+0x68>
 800b1d4:	2101      	movs	r1, #1
 800b1d6:	fa01 f605 	lsl.w	r6, r1, r5
 800b1da:	1d72      	adds	r2, r6, #5
 800b1dc:	0092      	lsls	r2, r2, #2
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f000 fb60 	bl	800b8a4 <_calloc_r>
 800b1e4:	b160      	cbz	r0, 800b200 <_Balloc+0x64>
 800b1e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1ea:	e00e      	b.n	800b20a <_Balloc+0x6e>
 800b1ec:	2221      	movs	r2, #33	; 0x21
 800b1ee:	2104      	movs	r1, #4
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f000 fb57 	bl	800b8a4 <_calloc_r>
 800b1f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1f8:	60f0      	str	r0, [r6, #12]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1e4      	bne.n	800b1ca <_Balloc+0x2e>
 800b200:	2000      	movs	r0, #0
 800b202:	bd70      	pop	{r4, r5, r6, pc}
 800b204:	6802      	ldr	r2, [r0, #0]
 800b206:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b20a:	2300      	movs	r3, #0
 800b20c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b210:	e7f7      	b.n	800b202 <_Balloc+0x66>
 800b212:	bf00      	nop
 800b214:	0800cb29 	.word	0x0800cb29
 800b218:	0800cbac 	.word	0x0800cbac

0800b21c <_Bfree>:
 800b21c:	b570      	push	{r4, r5, r6, lr}
 800b21e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b220:	4605      	mov	r5, r0
 800b222:	460c      	mov	r4, r1
 800b224:	b976      	cbnz	r6, 800b244 <_Bfree+0x28>
 800b226:	2010      	movs	r0, #16
 800b228:	f7ff ffb0 	bl	800b18c <malloc>
 800b22c:	4602      	mov	r2, r0
 800b22e:	6268      	str	r0, [r5, #36]	; 0x24
 800b230:	b920      	cbnz	r0, 800b23c <_Bfree+0x20>
 800b232:	4b09      	ldr	r3, [pc, #36]	; (800b258 <_Bfree+0x3c>)
 800b234:	4809      	ldr	r0, [pc, #36]	; (800b25c <_Bfree+0x40>)
 800b236:	218a      	movs	r1, #138	; 0x8a
 800b238:	f000 fd96 	bl	800bd68 <__assert_func>
 800b23c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b240:	6006      	str	r6, [r0, #0]
 800b242:	60c6      	str	r6, [r0, #12]
 800b244:	b13c      	cbz	r4, 800b256 <_Bfree+0x3a>
 800b246:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b248:	6862      	ldr	r2, [r4, #4]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b250:	6021      	str	r1, [r4, #0]
 800b252:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b256:	bd70      	pop	{r4, r5, r6, pc}
 800b258:	0800cb29 	.word	0x0800cb29
 800b25c:	0800cbac 	.word	0x0800cbac

0800b260 <__multadd>:
 800b260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b264:	690d      	ldr	r5, [r1, #16]
 800b266:	4607      	mov	r7, r0
 800b268:	460c      	mov	r4, r1
 800b26a:	461e      	mov	r6, r3
 800b26c:	f101 0c14 	add.w	ip, r1, #20
 800b270:	2000      	movs	r0, #0
 800b272:	f8dc 3000 	ldr.w	r3, [ip]
 800b276:	b299      	uxth	r1, r3
 800b278:	fb02 6101 	mla	r1, r2, r1, r6
 800b27c:	0c1e      	lsrs	r6, r3, #16
 800b27e:	0c0b      	lsrs	r3, r1, #16
 800b280:	fb02 3306 	mla	r3, r2, r6, r3
 800b284:	b289      	uxth	r1, r1
 800b286:	3001      	adds	r0, #1
 800b288:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b28c:	4285      	cmp	r5, r0
 800b28e:	f84c 1b04 	str.w	r1, [ip], #4
 800b292:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b296:	dcec      	bgt.n	800b272 <__multadd+0x12>
 800b298:	b30e      	cbz	r6, 800b2de <__multadd+0x7e>
 800b29a:	68a3      	ldr	r3, [r4, #8]
 800b29c:	42ab      	cmp	r3, r5
 800b29e:	dc19      	bgt.n	800b2d4 <__multadd+0x74>
 800b2a0:	6861      	ldr	r1, [r4, #4]
 800b2a2:	4638      	mov	r0, r7
 800b2a4:	3101      	adds	r1, #1
 800b2a6:	f7ff ff79 	bl	800b19c <_Balloc>
 800b2aa:	4680      	mov	r8, r0
 800b2ac:	b928      	cbnz	r0, 800b2ba <__multadd+0x5a>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	4b0c      	ldr	r3, [pc, #48]	; (800b2e4 <__multadd+0x84>)
 800b2b2:	480d      	ldr	r0, [pc, #52]	; (800b2e8 <__multadd+0x88>)
 800b2b4:	21b5      	movs	r1, #181	; 0xb5
 800b2b6:	f000 fd57 	bl	800bd68 <__assert_func>
 800b2ba:	6922      	ldr	r2, [r4, #16]
 800b2bc:	3202      	adds	r2, #2
 800b2be:	f104 010c 	add.w	r1, r4, #12
 800b2c2:	0092      	lsls	r2, r2, #2
 800b2c4:	300c      	adds	r0, #12
 800b2c6:	f7fe fc43 	bl	8009b50 <memcpy>
 800b2ca:	4621      	mov	r1, r4
 800b2cc:	4638      	mov	r0, r7
 800b2ce:	f7ff ffa5 	bl	800b21c <_Bfree>
 800b2d2:	4644      	mov	r4, r8
 800b2d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2d8:	3501      	adds	r5, #1
 800b2da:	615e      	str	r6, [r3, #20]
 800b2dc:	6125      	str	r5, [r4, #16]
 800b2de:	4620      	mov	r0, r4
 800b2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2e4:	0800cb9b 	.word	0x0800cb9b
 800b2e8:	0800cbac 	.word	0x0800cbac

0800b2ec <__hi0bits>:
 800b2ec:	0c03      	lsrs	r3, r0, #16
 800b2ee:	041b      	lsls	r3, r3, #16
 800b2f0:	b9d3      	cbnz	r3, 800b328 <__hi0bits+0x3c>
 800b2f2:	0400      	lsls	r0, r0, #16
 800b2f4:	2310      	movs	r3, #16
 800b2f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b2fa:	bf04      	itt	eq
 800b2fc:	0200      	lsleq	r0, r0, #8
 800b2fe:	3308      	addeq	r3, #8
 800b300:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b304:	bf04      	itt	eq
 800b306:	0100      	lsleq	r0, r0, #4
 800b308:	3304      	addeq	r3, #4
 800b30a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b30e:	bf04      	itt	eq
 800b310:	0080      	lsleq	r0, r0, #2
 800b312:	3302      	addeq	r3, #2
 800b314:	2800      	cmp	r0, #0
 800b316:	db05      	blt.n	800b324 <__hi0bits+0x38>
 800b318:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b31c:	f103 0301 	add.w	r3, r3, #1
 800b320:	bf08      	it	eq
 800b322:	2320      	moveq	r3, #32
 800b324:	4618      	mov	r0, r3
 800b326:	4770      	bx	lr
 800b328:	2300      	movs	r3, #0
 800b32a:	e7e4      	b.n	800b2f6 <__hi0bits+0xa>

0800b32c <__lo0bits>:
 800b32c:	6803      	ldr	r3, [r0, #0]
 800b32e:	f013 0207 	ands.w	r2, r3, #7
 800b332:	4601      	mov	r1, r0
 800b334:	d00b      	beq.n	800b34e <__lo0bits+0x22>
 800b336:	07da      	lsls	r2, r3, #31
 800b338:	d423      	bmi.n	800b382 <__lo0bits+0x56>
 800b33a:	0798      	lsls	r0, r3, #30
 800b33c:	bf49      	itett	mi
 800b33e:	085b      	lsrmi	r3, r3, #1
 800b340:	089b      	lsrpl	r3, r3, #2
 800b342:	2001      	movmi	r0, #1
 800b344:	600b      	strmi	r3, [r1, #0]
 800b346:	bf5c      	itt	pl
 800b348:	600b      	strpl	r3, [r1, #0]
 800b34a:	2002      	movpl	r0, #2
 800b34c:	4770      	bx	lr
 800b34e:	b298      	uxth	r0, r3
 800b350:	b9a8      	cbnz	r0, 800b37e <__lo0bits+0x52>
 800b352:	0c1b      	lsrs	r3, r3, #16
 800b354:	2010      	movs	r0, #16
 800b356:	b2da      	uxtb	r2, r3
 800b358:	b90a      	cbnz	r2, 800b35e <__lo0bits+0x32>
 800b35a:	3008      	adds	r0, #8
 800b35c:	0a1b      	lsrs	r3, r3, #8
 800b35e:	071a      	lsls	r2, r3, #28
 800b360:	bf04      	itt	eq
 800b362:	091b      	lsreq	r3, r3, #4
 800b364:	3004      	addeq	r0, #4
 800b366:	079a      	lsls	r2, r3, #30
 800b368:	bf04      	itt	eq
 800b36a:	089b      	lsreq	r3, r3, #2
 800b36c:	3002      	addeq	r0, #2
 800b36e:	07da      	lsls	r2, r3, #31
 800b370:	d403      	bmi.n	800b37a <__lo0bits+0x4e>
 800b372:	085b      	lsrs	r3, r3, #1
 800b374:	f100 0001 	add.w	r0, r0, #1
 800b378:	d005      	beq.n	800b386 <__lo0bits+0x5a>
 800b37a:	600b      	str	r3, [r1, #0]
 800b37c:	4770      	bx	lr
 800b37e:	4610      	mov	r0, r2
 800b380:	e7e9      	b.n	800b356 <__lo0bits+0x2a>
 800b382:	2000      	movs	r0, #0
 800b384:	4770      	bx	lr
 800b386:	2020      	movs	r0, #32
 800b388:	4770      	bx	lr
	...

0800b38c <__i2b>:
 800b38c:	b510      	push	{r4, lr}
 800b38e:	460c      	mov	r4, r1
 800b390:	2101      	movs	r1, #1
 800b392:	f7ff ff03 	bl	800b19c <_Balloc>
 800b396:	4602      	mov	r2, r0
 800b398:	b928      	cbnz	r0, 800b3a6 <__i2b+0x1a>
 800b39a:	4b05      	ldr	r3, [pc, #20]	; (800b3b0 <__i2b+0x24>)
 800b39c:	4805      	ldr	r0, [pc, #20]	; (800b3b4 <__i2b+0x28>)
 800b39e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b3a2:	f000 fce1 	bl	800bd68 <__assert_func>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	6144      	str	r4, [r0, #20]
 800b3aa:	6103      	str	r3, [r0, #16]
 800b3ac:	bd10      	pop	{r4, pc}
 800b3ae:	bf00      	nop
 800b3b0:	0800cb9b 	.word	0x0800cb9b
 800b3b4:	0800cbac 	.word	0x0800cbac

0800b3b8 <__multiply>:
 800b3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3bc:	4691      	mov	r9, r2
 800b3be:	690a      	ldr	r2, [r1, #16]
 800b3c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	bfb8      	it	lt
 800b3c8:	460b      	movlt	r3, r1
 800b3ca:	460c      	mov	r4, r1
 800b3cc:	bfbc      	itt	lt
 800b3ce:	464c      	movlt	r4, r9
 800b3d0:	4699      	movlt	r9, r3
 800b3d2:	6927      	ldr	r7, [r4, #16]
 800b3d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b3d8:	68a3      	ldr	r3, [r4, #8]
 800b3da:	6861      	ldr	r1, [r4, #4]
 800b3dc:	eb07 060a 	add.w	r6, r7, sl
 800b3e0:	42b3      	cmp	r3, r6
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	bfb8      	it	lt
 800b3e6:	3101      	addlt	r1, #1
 800b3e8:	f7ff fed8 	bl	800b19c <_Balloc>
 800b3ec:	b930      	cbnz	r0, 800b3fc <__multiply+0x44>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	4b44      	ldr	r3, [pc, #272]	; (800b504 <__multiply+0x14c>)
 800b3f2:	4845      	ldr	r0, [pc, #276]	; (800b508 <__multiply+0x150>)
 800b3f4:	f240 115d 	movw	r1, #349	; 0x15d
 800b3f8:	f000 fcb6 	bl	800bd68 <__assert_func>
 800b3fc:	f100 0514 	add.w	r5, r0, #20
 800b400:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b404:	462b      	mov	r3, r5
 800b406:	2200      	movs	r2, #0
 800b408:	4543      	cmp	r3, r8
 800b40a:	d321      	bcc.n	800b450 <__multiply+0x98>
 800b40c:	f104 0314 	add.w	r3, r4, #20
 800b410:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b414:	f109 0314 	add.w	r3, r9, #20
 800b418:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b41c:	9202      	str	r2, [sp, #8]
 800b41e:	1b3a      	subs	r2, r7, r4
 800b420:	3a15      	subs	r2, #21
 800b422:	f022 0203 	bic.w	r2, r2, #3
 800b426:	3204      	adds	r2, #4
 800b428:	f104 0115 	add.w	r1, r4, #21
 800b42c:	428f      	cmp	r7, r1
 800b42e:	bf38      	it	cc
 800b430:	2204      	movcc	r2, #4
 800b432:	9201      	str	r2, [sp, #4]
 800b434:	9a02      	ldr	r2, [sp, #8]
 800b436:	9303      	str	r3, [sp, #12]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d80c      	bhi.n	800b456 <__multiply+0x9e>
 800b43c:	2e00      	cmp	r6, #0
 800b43e:	dd03      	ble.n	800b448 <__multiply+0x90>
 800b440:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b444:	2b00      	cmp	r3, #0
 800b446:	d05a      	beq.n	800b4fe <__multiply+0x146>
 800b448:	6106      	str	r6, [r0, #16]
 800b44a:	b005      	add	sp, #20
 800b44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b450:	f843 2b04 	str.w	r2, [r3], #4
 800b454:	e7d8      	b.n	800b408 <__multiply+0x50>
 800b456:	f8b3 a000 	ldrh.w	sl, [r3]
 800b45a:	f1ba 0f00 	cmp.w	sl, #0
 800b45e:	d024      	beq.n	800b4aa <__multiply+0xf2>
 800b460:	f104 0e14 	add.w	lr, r4, #20
 800b464:	46a9      	mov	r9, r5
 800b466:	f04f 0c00 	mov.w	ip, #0
 800b46a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b46e:	f8d9 1000 	ldr.w	r1, [r9]
 800b472:	fa1f fb82 	uxth.w	fp, r2
 800b476:	b289      	uxth	r1, r1
 800b478:	fb0a 110b 	mla	r1, sl, fp, r1
 800b47c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b480:	f8d9 2000 	ldr.w	r2, [r9]
 800b484:	4461      	add	r1, ip
 800b486:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b48a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b48e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b492:	b289      	uxth	r1, r1
 800b494:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b498:	4577      	cmp	r7, lr
 800b49a:	f849 1b04 	str.w	r1, [r9], #4
 800b49e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4a2:	d8e2      	bhi.n	800b46a <__multiply+0xb2>
 800b4a4:	9a01      	ldr	r2, [sp, #4]
 800b4a6:	f845 c002 	str.w	ip, [r5, r2]
 800b4aa:	9a03      	ldr	r2, [sp, #12]
 800b4ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	f1b9 0f00 	cmp.w	r9, #0
 800b4b6:	d020      	beq.n	800b4fa <__multiply+0x142>
 800b4b8:	6829      	ldr	r1, [r5, #0]
 800b4ba:	f104 0c14 	add.w	ip, r4, #20
 800b4be:	46ae      	mov	lr, r5
 800b4c0:	f04f 0a00 	mov.w	sl, #0
 800b4c4:	f8bc b000 	ldrh.w	fp, [ip]
 800b4c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b4cc:	fb09 220b 	mla	r2, r9, fp, r2
 800b4d0:	4492      	add	sl, r2
 800b4d2:	b289      	uxth	r1, r1
 800b4d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b4d8:	f84e 1b04 	str.w	r1, [lr], #4
 800b4dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b4e0:	f8be 1000 	ldrh.w	r1, [lr]
 800b4e4:	0c12      	lsrs	r2, r2, #16
 800b4e6:	fb09 1102 	mla	r1, r9, r2, r1
 800b4ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b4ee:	4567      	cmp	r7, ip
 800b4f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b4f4:	d8e6      	bhi.n	800b4c4 <__multiply+0x10c>
 800b4f6:	9a01      	ldr	r2, [sp, #4]
 800b4f8:	50a9      	str	r1, [r5, r2]
 800b4fa:	3504      	adds	r5, #4
 800b4fc:	e79a      	b.n	800b434 <__multiply+0x7c>
 800b4fe:	3e01      	subs	r6, #1
 800b500:	e79c      	b.n	800b43c <__multiply+0x84>
 800b502:	bf00      	nop
 800b504:	0800cb9b 	.word	0x0800cb9b
 800b508:	0800cbac 	.word	0x0800cbac

0800b50c <__pow5mult>:
 800b50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b510:	4615      	mov	r5, r2
 800b512:	f012 0203 	ands.w	r2, r2, #3
 800b516:	4606      	mov	r6, r0
 800b518:	460f      	mov	r7, r1
 800b51a:	d007      	beq.n	800b52c <__pow5mult+0x20>
 800b51c:	4c25      	ldr	r4, [pc, #148]	; (800b5b4 <__pow5mult+0xa8>)
 800b51e:	3a01      	subs	r2, #1
 800b520:	2300      	movs	r3, #0
 800b522:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b526:	f7ff fe9b 	bl	800b260 <__multadd>
 800b52a:	4607      	mov	r7, r0
 800b52c:	10ad      	asrs	r5, r5, #2
 800b52e:	d03d      	beq.n	800b5ac <__pow5mult+0xa0>
 800b530:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b532:	b97c      	cbnz	r4, 800b554 <__pow5mult+0x48>
 800b534:	2010      	movs	r0, #16
 800b536:	f7ff fe29 	bl	800b18c <malloc>
 800b53a:	4602      	mov	r2, r0
 800b53c:	6270      	str	r0, [r6, #36]	; 0x24
 800b53e:	b928      	cbnz	r0, 800b54c <__pow5mult+0x40>
 800b540:	4b1d      	ldr	r3, [pc, #116]	; (800b5b8 <__pow5mult+0xac>)
 800b542:	481e      	ldr	r0, [pc, #120]	; (800b5bc <__pow5mult+0xb0>)
 800b544:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b548:	f000 fc0e 	bl	800bd68 <__assert_func>
 800b54c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b550:	6004      	str	r4, [r0, #0]
 800b552:	60c4      	str	r4, [r0, #12]
 800b554:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b55c:	b94c      	cbnz	r4, 800b572 <__pow5mult+0x66>
 800b55e:	f240 2171 	movw	r1, #625	; 0x271
 800b562:	4630      	mov	r0, r6
 800b564:	f7ff ff12 	bl	800b38c <__i2b>
 800b568:	2300      	movs	r3, #0
 800b56a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b56e:	4604      	mov	r4, r0
 800b570:	6003      	str	r3, [r0, #0]
 800b572:	f04f 0900 	mov.w	r9, #0
 800b576:	07eb      	lsls	r3, r5, #31
 800b578:	d50a      	bpl.n	800b590 <__pow5mult+0x84>
 800b57a:	4639      	mov	r1, r7
 800b57c:	4622      	mov	r2, r4
 800b57e:	4630      	mov	r0, r6
 800b580:	f7ff ff1a 	bl	800b3b8 <__multiply>
 800b584:	4639      	mov	r1, r7
 800b586:	4680      	mov	r8, r0
 800b588:	4630      	mov	r0, r6
 800b58a:	f7ff fe47 	bl	800b21c <_Bfree>
 800b58e:	4647      	mov	r7, r8
 800b590:	106d      	asrs	r5, r5, #1
 800b592:	d00b      	beq.n	800b5ac <__pow5mult+0xa0>
 800b594:	6820      	ldr	r0, [r4, #0]
 800b596:	b938      	cbnz	r0, 800b5a8 <__pow5mult+0x9c>
 800b598:	4622      	mov	r2, r4
 800b59a:	4621      	mov	r1, r4
 800b59c:	4630      	mov	r0, r6
 800b59e:	f7ff ff0b 	bl	800b3b8 <__multiply>
 800b5a2:	6020      	str	r0, [r4, #0]
 800b5a4:	f8c0 9000 	str.w	r9, [r0]
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	e7e4      	b.n	800b576 <__pow5mult+0x6a>
 800b5ac:	4638      	mov	r0, r7
 800b5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5b2:	bf00      	nop
 800b5b4:	0800ccf8 	.word	0x0800ccf8
 800b5b8:	0800cb29 	.word	0x0800cb29
 800b5bc:	0800cbac 	.word	0x0800cbac

0800b5c0 <__lshift>:
 800b5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	6849      	ldr	r1, [r1, #4]
 800b5c8:	6923      	ldr	r3, [r4, #16]
 800b5ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5ce:	68a3      	ldr	r3, [r4, #8]
 800b5d0:	4607      	mov	r7, r0
 800b5d2:	4691      	mov	r9, r2
 800b5d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5d8:	f108 0601 	add.w	r6, r8, #1
 800b5dc:	42b3      	cmp	r3, r6
 800b5de:	db0b      	blt.n	800b5f8 <__lshift+0x38>
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	f7ff fddb 	bl	800b19c <_Balloc>
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	b948      	cbnz	r0, 800b5fe <__lshift+0x3e>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	4b2a      	ldr	r3, [pc, #168]	; (800b698 <__lshift+0xd8>)
 800b5ee:	482b      	ldr	r0, [pc, #172]	; (800b69c <__lshift+0xdc>)
 800b5f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b5f4:	f000 fbb8 	bl	800bd68 <__assert_func>
 800b5f8:	3101      	adds	r1, #1
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	e7ee      	b.n	800b5dc <__lshift+0x1c>
 800b5fe:	2300      	movs	r3, #0
 800b600:	f100 0114 	add.w	r1, r0, #20
 800b604:	f100 0210 	add.w	r2, r0, #16
 800b608:	4618      	mov	r0, r3
 800b60a:	4553      	cmp	r3, sl
 800b60c:	db37      	blt.n	800b67e <__lshift+0xbe>
 800b60e:	6920      	ldr	r0, [r4, #16]
 800b610:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b614:	f104 0314 	add.w	r3, r4, #20
 800b618:	f019 091f 	ands.w	r9, r9, #31
 800b61c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b620:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b624:	d02f      	beq.n	800b686 <__lshift+0xc6>
 800b626:	f1c9 0e20 	rsb	lr, r9, #32
 800b62a:	468a      	mov	sl, r1
 800b62c:	f04f 0c00 	mov.w	ip, #0
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	fa02 f209 	lsl.w	r2, r2, r9
 800b636:	ea42 020c 	orr.w	r2, r2, ip
 800b63a:	f84a 2b04 	str.w	r2, [sl], #4
 800b63e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b642:	4298      	cmp	r0, r3
 800b644:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b648:	d8f2      	bhi.n	800b630 <__lshift+0x70>
 800b64a:	1b03      	subs	r3, r0, r4
 800b64c:	3b15      	subs	r3, #21
 800b64e:	f023 0303 	bic.w	r3, r3, #3
 800b652:	3304      	adds	r3, #4
 800b654:	f104 0215 	add.w	r2, r4, #21
 800b658:	4290      	cmp	r0, r2
 800b65a:	bf38      	it	cc
 800b65c:	2304      	movcc	r3, #4
 800b65e:	f841 c003 	str.w	ip, [r1, r3]
 800b662:	f1bc 0f00 	cmp.w	ip, #0
 800b666:	d001      	beq.n	800b66c <__lshift+0xac>
 800b668:	f108 0602 	add.w	r6, r8, #2
 800b66c:	3e01      	subs	r6, #1
 800b66e:	4638      	mov	r0, r7
 800b670:	612e      	str	r6, [r5, #16]
 800b672:	4621      	mov	r1, r4
 800b674:	f7ff fdd2 	bl	800b21c <_Bfree>
 800b678:	4628      	mov	r0, r5
 800b67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b67e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b682:	3301      	adds	r3, #1
 800b684:	e7c1      	b.n	800b60a <__lshift+0x4a>
 800b686:	3904      	subs	r1, #4
 800b688:	f853 2b04 	ldr.w	r2, [r3], #4
 800b68c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b690:	4298      	cmp	r0, r3
 800b692:	d8f9      	bhi.n	800b688 <__lshift+0xc8>
 800b694:	e7ea      	b.n	800b66c <__lshift+0xac>
 800b696:	bf00      	nop
 800b698:	0800cb9b 	.word	0x0800cb9b
 800b69c:	0800cbac 	.word	0x0800cbac

0800b6a0 <__mcmp>:
 800b6a0:	b530      	push	{r4, r5, lr}
 800b6a2:	6902      	ldr	r2, [r0, #16]
 800b6a4:	690c      	ldr	r4, [r1, #16]
 800b6a6:	1b12      	subs	r2, r2, r4
 800b6a8:	d10e      	bne.n	800b6c8 <__mcmp+0x28>
 800b6aa:	f100 0314 	add.w	r3, r0, #20
 800b6ae:	3114      	adds	r1, #20
 800b6b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b6b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b6b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b6bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b6c0:	42a5      	cmp	r5, r4
 800b6c2:	d003      	beq.n	800b6cc <__mcmp+0x2c>
 800b6c4:	d305      	bcc.n	800b6d2 <__mcmp+0x32>
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	bd30      	pop	{r4, r5, pc}
 800b6cc:	4283      	cmp	r3, r0
 800b6ce:	d3f3      	bcc.n	800b6b8 <__mcmp+0x18>
 800b6d0:	e7fa      	b.n	800b6c8 <__mcmp+0x28>
 800b6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d6:	e7f7      	b.n	800b6c8 <__mcmp+0x28>

0800b6d8 <__mdiff>:
 800b6d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	460c      	mov	r4, r1
 800b6de:	4606      	mov	r6, r0
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	4690      	mov	r8, r2
 800b6e6:	f7ff ffdb 	bl	800b6a0 <__mcmp>
 800b6ea:	1e05      	subs	r5, r0, #0
 800b6ec:	d110      	bne.n	800b710 <__mdiff+0x38>
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	f7ff fd53 	bl	800b19c <_Balloc>
 800b6f6:	b930      	cbnz	r0, 800b706 <__mdiff+0x2e>
 800b6f8:	4b3a      	ldr	r3, [pc, #232]	; (800b7e4 <__mdiff+0x10c>)
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	f240 2132 	movw	r1, #562	; 0x232
 800b700:	4839      	ldr	r0, [pc, #228]	; (800b7e8 <__mdiff+0x110>)
 800b702:	f000 fb31 	bl	800bd68 <__assert_func>
 800b706:	2301      	movs	r3, #1
 800b708:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b70c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b710:	bfa4      	itt	ge
 800b712:	4643      	movge	r3, r8
 800b714:	46a0      	movge	r8, r4
 800b716:	4630      	mov	r0, r6
 800b718:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b71c:	bfa6      	itte	ge
 800b71e:	461c      	movge	r4, r3
 800b720:	2500      	movge	r5, #0
 800b722:	2501      	movlt	r5, #1
 800b724:	f7ff fd3a 	bl	800b19c <_Balloc>
 800b728:	b920      	cbnz	r0, 800b734 <__mdiff+0x5c>
 800b72a:	4b2e      	ldr	r3, [pc, #184]	; (800b7e4 <__mdiff+0x10c>)
 800b72c:	4602      	mov	r2, r0
 800b72e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b732:	e7e5      	b.n	800b700 <__mdiff+0x28>
 800b734:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b738:	6926      	ldr	r6, [r4, #16]
 800b73a:	60c5      	str	r5, [r0, #12]
 800b73c:	f104 0914 	add.w	r9, r4, #20
 800b740:	f108 0514 	add.w	r5, r8, #20
 800b744:	f100 0e14 	add.w	lr, r0, #20
 800b748:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b74c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b750:	f108 0210 	add.w	r2, r8, #16
 800b754:	46f2      	mov	sl, lr
 800b756:	2100      	movs	r1, #0
 800b758:	f859 3b04 	ldr.w	r3, [r9], #4
 800b75c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b760:	fa1f f883 	uxth.w	r8, r3
 800b764:	fa11 f18b 	uxtah	r1, r1, fp
 800b768:	0c1b      	lsrs	r3, r3, #16
 800b76a:	eba1 0808 	sub.w	r8, r1, r8
 800b76e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b772:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b776:	fa1f f888 	uxth.w	r8, r8
 800b77a:	1419      	asrs	r1, r3, #16
 800b77c:	454e      	cmp	r6, r9
 800b77e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b782:	f84a 3b04 	str.w	r3, [sl], #4
 800b786:	d8e7      	bhi.n	800b758 <__mdiff+0x80>
 800b788:	1b33      	subs	r3, r6, r4
 800b78a:	3b15      	subs	r3, #21
 800b78c:	f023 0303 	bic.w	r3, r3, #3
 800b790:	3304      	adds	r3, #4
 800b792:	3415      	adds	r4, #21
 800b794:	42a6      	cmp	r6, r4
 800b796:	bf38      	it	cc
 800b798:	2304      	movcc	r3, #4
 800b79a:	441d      	add	r5, r3
 800b79c:	4473      	add	r3, lr
 800b79e:	469e      	mov	lr, r3
 800b7a0:	462e      	mov	r6, r5
 800b7a2:	4566      	cmp	r6, ip
 800b7a4:	d30e      	bcc.n	800b7c4 <__mdiff+0xec>
 800b7a6:	f10c 0203 	add.w	r2, ip, #3
 800b7aa:	1b52      	subs	r2, r2, r5
 800b7ac:	f022 0203 	bic.w	r2, r2, #3
 800b7b0:	3d03      	subs	r5, #3
 800b7b2:	45ac      	cmp	ip, r5
 800b7b4:	bf38      	it	cc
 800b7b6:	2200      	movcc	r2, #0
 800b7b8:	441a      	add	r2, r3
 800b7ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b7be:	b17b      	cbz	r3, 800b7e0 <__mdiff+0x108>
 800b7c0:	6107      	str	r7, [r0, #16]
 800b7c2:	e7a3      	b.n	800b70c <__mdiff+0x34>
 800b7c4:	f856 8b04 	ldr.w	r8, [r6], #4
 800b7c8:	fa11 f288 	uxtah	r2, r1, r8
 800b7cc:	1414      	asrs	r4, r2, #16
 800b7ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b7d2:	b292      	uxth	r2, r2
 800b7d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b7d8:	f84e 2b04 	str.w	r2, [lr], #4
 800b7dc:	1421      	asrs	r1, r4, #16
 800b7de:	e7e0      	b.n	800b7a2 <__mdiff+0xca>
 800b7e0:	3f01      	subs	r7, #1
 800b7e2:	e7ea      	b.n	800b7ba <__mdiff+0xe2>
 800b7e4:	0800cb9b 	.word	0x0800cb9b
 800b7e8:	0800cbac 	.word	0x0800cbac

0800b7ec <__d2b>:
 800b7ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7f0:	4689      	mov	r9, r1
 800b7f2:	2101      	movs	r1, #1
 800b7f4:	ec57 6b10 	vmov	r6, r7, d0
 800b7f8:	4690      	mov	r8, r2
 800b7fa:	f7ff fccf 	bl	800b19c <_Balloc>
 800b7fe:	4604      	mov	r4, r0
 800b800:	b930      	cbnz	r0, 800b810 <__d2b+0x24>
 800b802:	4602      	mov	r2, r0
 800b804:	4b25      	ldr	r3, [pc, #148]	; (800b89c <__d2b+0xb0>)
 800b806:	4826      	ldr	r0, [pc, #152]	; (800b8a0 <__d2b+0xb4>)
 800b808:	f240 310a 	movw	r1, #778	; 0x30a
 800b80c:	f000 faac 	bl	800bd68 <__assert_func>
 800b810:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b814:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b818:	bb35      	cbnz	r5, 800b868 <__d2b+0x7c>
 800b81a:	2e00      	cmp	r6, #0
 800b81c:	9301      	str	r3, [sp, #4]
 800b81e:	d028      	beq.n	800b872 <__d2b+0x86>
 800b820:	4668      	mov	r0, sp
 800b822:	9600      	str	r6, [sp, #0]
 800b824:	f7ff fd82 	bl	800b32c <__lo0bits>
 800b828:	9900      	ldr	r1, [sp, #0]
 800b82a:	b300      	cbz	r0, 800b86e <__d2b+0x82>
 800b82c:	9a01      	ldr	r2, [sp, #4]
 800b82e:	f1c0 0320 	rsb	r3, r0, #32
 800b832:	fa02 f303 	lsl.w	r3, r2, r3
 800b836:	430b      	orrs	r3, r1
 800b838:	40c2      	lsrs	r2, r0
 800b83a:	6163      	str	r3, [r4, #20]
 800b83c:	9201      	str	r2, [sp, #4]
 800b83e:	9b01      	ldr	r3, [sp, #4]
 800b840:	61a3      	str	r3, [r4, #24]
 800b842:	2b00      	cmp	r3, #0
 800b844:	bf14      	ite	ne
 800b846:	2202      	movne	r2, #2
 800b848:	2201      	moveq	r2, #1
 800b84a:	6122      	str	r2, [r4, #16]
 800b84c:	b1d5      	cbz	r5, 800b884 <__d2b+0x98>
 800b84e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b852:	4405      	add	r5, r0
 800b854:	f8c9 5000 	str.w	r5, [r9]
 800b858:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b85c:	f8c8 0000 	str.w	r0, [r8]
 800b860:	4620      	mov	r0, r4
 800b862:	b003      	add	sp, #12
 800b864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b86c:	e7d5      	b.n	800b81a <__d2b+0x2e>
 800b86e:	6161      	str	r1, [r4, #20]
 800b870:	e7e5      	b.n	800b83e <__d2b+0x52>
 800b872:	a801      	add	r0, sp, #4
 800b874:	f7ff fd5a 	bl	800b32c <__lo0bits>
 800b878:	9b01      	ldr	r3, [sp, #4]
 800b87a:	6163      	str	r3, [r4, #20]
 800b87c:	2201      	movs	r2, #1
 800b87e:	6122      	str	r2, [r4, #16]
 800b880:	3020      	adds	r0, #32
 800b882:	e7e3      	b.n	800b84c <__d2b+0x60>
 800b884:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b888:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b88c:	f8c9 0000 	str.w	r0, [r9]
 800b890:	6918      	ldr	r0, [r3, #16]
 800b892:	f7ff fd2b 	bl	800b2ec <__hi0bits>
 800b896:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b89a:	e7df      	b.n	800b85c <__d2b+0x70>
 800b89c:	0800cb9b 	.word	0x0800cb9b
 800b8a0:	0800cbac 	.word	0x0800cbac

0800b8a4 <_calloc_r>:
 800b8a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8a6:	fba1 2402 	umull	r2, r4, r1, r2
 800b8aa:	b94c      	cbnz	r4, 800b8c0 <_calloc_r+0x1c>
 800b8ac:	4611      	mov	r1, r2
 800b8ae:	9201      	str	r2, [sp, #4]
 800b8b0:	f000 f87a 	bl	800b9a8 <_malloc_r>
 800b8b4:	9a01      	ldr	r2, [sp, #4]
 800b8b6:	4605      	mov	r5, r0
 800b8b8:	b930      	cbnz	r0, 800b8c8 <_calloc_r+0x24>
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	b003      	add	sp, #12
 800b8be:	bd30      	pop	{r4, r5, pc}
 800b8c0:	220c      	movs	r2, #12
 800b8c2:	6002      	str	r2, [r0, #0]
 800b8c4:	2500      	movs	r5, #0
 800b8c6:	e7f8      	b.n	800b8ba <_calloc_r+0x16>
 800b8c8:	4621      	mov	r1, r4
 800b8ca:	f7fe f94f 	bl	8009b6c <memset>
 800b8ce:	e7f4      	b.n	800b8ba <_calloc_r+0x16>

0800b8d0 <_free_r>:
 800b8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8d2:	2900      	cmp	r1, #0
 800b8d4:	d044      	beq.n	800b960 <_free_r+0x90>
 800b8d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8da:	9001      	str	r0, [sp, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f1a1 0404 	sub.w	r4, r1, #4
 800b8e2:	bfb8      	it	lt
 800b8e4:	18e4      	addlt	r4, r4, r3
 800b8e6:	f000 fa9b 	bl	800be20 <__malloc_lock>
 800b8ea:	4a1e      	ldr	r2, [pc, #120]	; (800b964 <_free_r+0x94>)
 800b8ec:	9801      	ldr	r0, [sp, #4]
 800b8ee:	6813      	ldr	r3, [r2, #0]
 800b8f0:	b933      	cbnz	r3, 800b900 <_free_r+0x30>
 800b8f2:	6063      	str	r3, [r4, #4]
 800b8f4:	6014      	str	r4, [r2, #0]
 800b8f6:	b003      	add	sp, #12
 800b8f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8fc:	f000 ba96 	b.w	800be2c <__malloc_unlock>
 800b900:	42a3      	cmp	r3, r4
 800b902:	d908      	bls.n	800b916 <_free_r+0x46>
 800b904:	6825      	ldr	r5, [r4, #0]
 800b906:	1961      	adds	r1, r4, r5
 800b908:	428b      	cmp	r3, r1
 800b90a:	bf01      	itttt	eq
 800b90c:	6819      	ldreq	r1, [r3, #0]
 800b90e:	685b      	ldreq	r3, [r3, #4]
 800b910:	1949      	addeq	r1, r1, r5
 800b912:	6021      	streq	r1, [r4, #0]
 800b914:	e7ed      	b.n	800b8f2 <_free_r+0x22>
 800b916:	461a      	mov	r2, r3
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	b10b      	cbz	r3, 800b920 <_free_r+0x50>
 800b91c:	42a3      	cmp	r3, r4
 800b91e:	d9fa      	bls.n	800b916 <_free_r+0x46>
 800b920:	6811      	ldr	r1, [r2, #0]
 800b922:	1855      	adds	r5, r2, r1
 800b924:	42a5      	cmp	r5, r4
 800b926:	d10b      	bne.n	800b940 <_free_r+0x70>
 800b928:	6824      	ldr	r4, [r4, #0]
 800b92a:	4421      	add	r1, r4
 800b92c:	1854      	adds	r4, r2, r1
 800b92e:	42a3      	cmp	r3, r4
 800b930:	6011      	str	r1, [r2, #0]
 800b932:	d1e0      	bne.n	800b8f6 <_free_r+0x26>
 800b934:	681c      	ldr	r4, [r3, #0]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	6053      	str	r3, [r2, #4]
 800b93a:	4421      	add	r1, r4
 800b93c:	6011      	str	r1, [r2, #0]
 800b93e:	e7da      	b.n	800b8f6 <_free_r+0x26>
 800b940:	d902      	bls.n	800b948 <_free_r+0x78>
 800b942:	230c      	movs	r3, #12
 800b944:	6003      	str	r3, [r0, #0]
 800b946:	e7d6      	b.n	800b8f6 <_free_r+0x26>
 800b948:	6825      	ldr	r5, [r4, #0]
 800b94a:	1961      	adds	r1, r4, r5
 800b94c:	428b      	cmp	r3, r1
 800b94e:	bf04      	itt	eq
 800b950:	6819      	ldreq	r1, [r3, #0]
 800b952:	685b      	ldreq	r3, [r3, #4]
 800b954:	6063      	str	r3, [r4, #4]
 800b956:	bf04      	itt	eq
 800b958:	1949      	addeq	r1, r1, r5
 800b95a:	6021      	streq	r1, [r4, #0]
 800b95c:	6054      	str	r4, [r2, #4]
 800b95e:	e7ca      	b.n	800b8f6 <_free_r+0x26>
 800b960:	b003      	add	sp, #12
 800b962:	bd30      	pop	{r4, r5, pc}
 800b964:	200049f4 	.word	0x200049f4

0800b968 <sbrk_aligned>:
 800b968:	b570      	push	{r4, r5, r6, lr}
 800b96a:	4e0e      	ldr	r6, [pc, #56]	; (800b9a4 <sbrk_aligned+0x3c>)
 800b96c:	460c      	mov	r4, r1
 800b96e:	6831      	ldr	r1, [r6, #0]
 800b970:	4605      	mov	r5, r0
 800b972:	b911      	cbnz	r1, 800b97a <sbrk_aligned+0x12>
 800b974:	f000 f9e8 	bl	800bd48 <_sbrk_r>
 800b978:	6030      	str	r0, [r6, #0]
 800b97a:	4621      	mov	r1, r4
 800b97c:	4628      	mov	r0, r5
 800b97e:	f000 f9e3 	bl	800bd48 <_sbrk_r>
 800b982:	1c43      	adds	r3, r0, #1
 800b984:	d00a      	beq.n	800b99c <sbrk_aligned+0x34>
 800b986:	1cc4      	adds	r4, r0, #3
 800b988:	f024 0403 	bic.w	r4, r4, #3
 800b98c:	42a0      	cmp	r0, r4
 800b98e:	d007      	beq.n	800b9a0 <sbrk_aligned+0x38>
 800b990:	1a21      	subs	r1, r4, r0
 800b992:	4628      	mov	r0, r5
 800b994:	f000 f9d8 	bl	800bd48 <_sbrk_r>
 800b998:	3001      	adds	r0, #1
 800b99a:	d101      	bne.n	800b9a0 <sbrk_aligned+0x38>
 800b99c:	f04f 34ff 	mov.w	r4, #4294967295
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	bd70      	pop	{r4, r5, r6, pc}
 800b9a4:	200049f8 	.word	0x200049f8

0800b9a8 <_malloc_r>:
 800b9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ac:	1ccd      	adds	r5, r1, #3
 800b9ae:	f025 0503 	bic.w	r5, r5, #3
 800b9b2:	3508      	adds	r5, #8
 800b9b4:	2d0c      	cmp	r5, #12
 800b9b6:	bf38      	it	cc
 800b9b8:	250c      	movcc	r5, #12
 800b9ba:	2d00      	cmp	r5, #0
 800b9bc:	4607      	mov	r7, r0
 800b9be:	db01      	blt.n	800b9c4 <_malloc_r+0x1c>
 800b9c0:	42a9      	cmp	r1, r5
 800b9c2:	d905      	bls.n	800b9d0 <_malloc_r+0x28>
 800b9c4:	230c      	movs	r3, #12
 800b9c6:	603b      	str	r3, [r7, #0]
 800b9c8:	2600      	movs	r6, #0
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d0:	4e2e      	ldr	r6, [pc, #184]	; (800ba8c <_malloc_r+0xe4>)
 800b9d2:	f000 fa25 	bl	800be20 <__malloc_lock>
 800b9d6:	6833      	ldr	r3, [r6, #0]
 800b9d8:	461c      	mov	r4, r3
 800b9da:	bb34      	cbnz	r4, 800ba2a <_malloc_r+0x82>
 800b9dc:	4629      	mov	r1, r5
 800b9de:	4638      	mov	r0, r7
 800b9e0:	f7ff ffc2 	bl	800b968 <sbrk_aligned>
 800b9e4:	1c43      	adds	r3, r0, #1
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	d14d      	bne.n	800ba86 <_malloc_r+0xde>
 800b9ea:	6834      	ldr	r4, [r6, #0]
 800b9ec:	4626      	mov	r6, r4
 800b9ee:	2e00      	cmp	r6, #0
 800b9f0:	d140      	bne.n	800ba74 <_malloc_r+0xcc>
 800b9f2:	6823      	ldr	r3, [r4, #0]
 800b9f4:	4631      	mov	r1, r6
 800b9f6:	4638      	mov	r0, r7
 800b9f8:	eb04 0803 	add.w	r8, r4, r3
 800b9fc:	f000 f9a4 	bl	800bd48 <_sbrk_r>
 800ba00:	4580      	cmp	r8, r0
 800ba02:	d13a      	bne.n	800ba7a <_malloc_r+0xd2>
 800ba04:	6821      	ldr	r1, [r4, #0]
 800ba06:	3503      	adds	r5, #3
 800ba08:	1a6d      	subs	r5, r5, r1
 800ba0a:	f025 0503 	bic.w	r5, r5, #3
 800ba0e:	3508      	adds	r5, #8
 800ba10:	2d0c      	cmp	r5, #12
 800ba12:	bf38      	it	cc
 800ba14:	250c      	movcc	r5, #12
 800ba16:	4629      	mov	r1, r5
 800ba18:	4638      	mov	r0, r7
 800ba1a:	f7ff ffa5 	bl	800b968 <sbrk_aligned>
 800ba1e:	3001      	adds	r0, #1
 800ba20:	d02b      	beq.n	800ba7a <_malloc_r+0xd2>
 800ba22:	6823      	ldr	r3, [r4, #0]
 800ba24:	442b      	add	r3, r5
 800ba26:	6023      	str	r3, [r4, #0]
 800ba28:	e00e      	b.n	800ba48 <_malloc_r+0xa0>
 800ba2a:	6822      	ldr	r2, [r4, #0]
 800ba2c:	1b52      	subs	r2, r2, r5
 800ba2e:	d41e      	bmi.n	800ba6e <_malloc_r+0xc6>
 800ba30:	2a0b      	cmp	r2, #11
 800ba32:	d916      	bls.n	800ba62 <_malloc_r+0xba>
 800ba34:	1961      	adds	r1, r4, r5
 800ba36:	42a3      	cmp	r3, r4
 800ba38:	6025      	str	r5, [r4, #0]
 800ba3a:	bf18      	it	ne
 800ba3c:	6059      	strne	r1, [r3, #4]
 800ba3e:	6863      	ldr	r3, [r4, #4]
 800ba40:	bf08      	it	eq
 800ba42:	6031      	streq	r1, [r6, #0]
 800ba44:	5162      	str	r2, [r4, r5]
 800ba46:	604b      	str	r3, [r1, #4]
 800ba48:	4638      	mov	r0, r7
 800ba4a:	f104 060b 	add.w	r6, r4, #11
 800ba4e:	f000 f9ed 	bl	800be2c <__malloc_unlock>
 800ba52:	f026 0607 	bic.w	r6, r6, #7
 800ba56:	1d23      	adds	r3, r4, #4
 800ba58:	1af2      	subs	r2, r6, r3
 800ba5a:	d0b6      	beq.n	800b9ca <_malloc_r+0x22>
 800ba5c:	1b9b      	subs	r3, r3, r6
 800ba5e:	50a3      	str	r3, [r4, r2]
 800ba60:	e7b3      	b.n	800b9ca <_malloc_r+0x22>
 800ba62:	6862      	ldr	r2, [r4, #4]
 800ba64:	42a3      	cmp	r3, r4
 800ba66:	bf0c      	ite	eq
 800ba68:	6032      	streq	r2, [r6, #0]
 800ba6a:	605a      	strne	r2, [r3, #4]
 800ba6c:	e7ec      	b.n	800ba48 <_malloc_r+0xa0>
 800ba6e:	4623      	mov	r3, r4
 800ba70:	6864      	ldr	r4, [r4, #4]
 800ba72:	e7b2      	b.n	800b9da <_malloc_r+0x32>
 800ba74:	4634      	mov	r4, r6
 800ba76:	6876      	ldr	r6, [r6, #4]
 800ba78:	e7b9      	b.n	800b9ee <_malloc_r+0x46>
 800ba7a:	230c      	movs	r3, #12
 800ba7c:	603b      	str	r3, [r7, #0]
 800ba7e:	4638      	mov	r0, r7
 800ba80:	f000 f9d4 	bl	800be2c <__malloc_unlock>
 800ba84:	e7a1      	b.n	800b9ca <_malloc_r+0x22>
 800ba86:	6025      	str	r5, [r4, #0]
 800ba88:	e7de      	b.n	800ba48 <_malloc_r+0xa0>
 800ba8a:	bf00      	nop
 800ba8c:	200049f4 	.word	0x200049f4

0800ba90 <__ssputs_r>:
 800ba90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba94:	688e      	ldr	r6, [r1, #8]
 800ba96:	429e      	cmp	r6, r3
 800ba98:	4682      	mov	sl, r0
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	4690      	mov	r8, r2
 800ba9e:	461f      	mov	r7, r3
 800baa0:	d838      	bhi.n	800bb14 <__ssputs_r+0x84>
 800baa2:	898a      	ldrh	r2, [r1, #12]
 800baa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800baa8:	d032      	beq.n	800bb10 <__ssputs_r+0x80>
 800baaa:	6825      	ldr	r5, [r4, #0]
 800baac:	6909      	ldr	r1, [r1, #16]
 800baae:	eba5 0901 	sub.w	r9, r5, r1
 800bab2:	6965      	ldr	r5, [r4, #20]
 800bab4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bab8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800babc:	3301      	adds	r3, #1
 800babe:	444b      	add	r3, r9
 800bac0:	106d      	asrs	r5, r5, #1
 800bac2:	429d      	cmp	r5, r3
 800bac4:	bf38      	it	cc
 800bac6:	461d      	movcc	r5, r3
 800bac8:	0553      	lsls	r3, r2, #21
 800baca:	d531      	bpl.n	800bb30 <__ssputs_r+0xa0>
 800bacc:	4629      	mov	r1, r5
 800bace:	f7ff ff6b 	bl	800b9a8 <_malloc_r>
 800bad2:	4606      	mov	r6, r0
 800bad4:	b950      	cbnz	r0, 800baec <__ssputs_r+0x5c>
 800bad6:	230c      	movs	r3, #12
 800bad8:	f8ca 3000 	str.w	r3, [sl]
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bae2:	81a3      	strh	r3, [r4, #12]
 800bae4:	f04f 30ff 	mov.w	r0, #4294967295
 800bae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baec:	6921      	ldr	r1, [r4, #16]
 800baee:	464a      	mov	r2, r9
 800baf0:	f7fe f82e 	bl	8009b50 <memcpy>
 800baf4:	89a3      	ldrh	r3, [r4, #12]
 800baf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bafa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bafe:	81a3      	strh	r3, [r4, #12]
 800bb00:	6126      	str	r6, [r4, #16]
 800bb02:	6165      	str	r5, [r4, #20]
 800bb04:	444e      	add	r6, r9
 800bb06:	eba5 0509 	sub.w	r5, r5, r9
 800bb0a:	6026      	str	r6, [r4, #0]
 800bb0c:	60a5      	str	r5, [r4, #8]
 800bb0e:	463e      	mov	r6, r7
 800bb10:	42be      	cmp	r6, r7
 800bb12:	d900      	bls.n	800bb16 <__ssputs_r+0x86>
 800bb14:	463e      	mov	r6, r7
 800bb16:	6820      	ldr	r0, [r4, #0]
 800bb18:	4632      	mov	r2, r6
 800bb1a:	4641      	mov	r1, r8
 800bb1c:	f000 f966 	bl	800bdec <memmove>
 800bb20:	68a3      	ldr	r3, [r4, #8]
 800bb22:	1b9b      	subs	r3, r3, r6
 800bb24:	60a3      	str	r3, [r4, #8]
 800bb26:	6823      	ldr	r3, [r4, #0]
 800bb28:	4433      	add	r3, r6
 800bb2a:	6023      	str	r3, [r4, #0]
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	e7db      	b.n	800bae8 <__ssputs_r+0x58>
 800bb30:	462a      	mov	r2, r5
 800bb32:	f000 f981 	bl	800be38 <_realloc_r>
 800bb36:	4606      	mov	r6, r0
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	d1e1      	bne.n	800bb00 <__ssputs_r+0x70>
 800bb3c:	6921      	ldr	r1, [r4, #16]
 800bb3e:	4650      	mov	r0, sl
 800bb40:	f7ff fec6 	bl	800b8d0 <_free_r>
 800bb44:	e7c7      	b.n	800bad6 <__ssputs_r+0x46>
	...

0800bb48 <_svfiprintf_r>:
 800bb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4c:	4698      	mov	r8, r3
 800bb4e:	898b      	ldrh	r3, [r1, #12]
 800bb50:	061b      	lsls	r3, r3, #24
 800bb52:	b09d      	sub	sp, #116	; 0x74
 800bb54:	4607      	mov	r7, r0
 800bb56:	460d      	mov	r5, r1
 800bb58:	4614      	mov	r4, r2
 800bb5a:	d50e      	bpl.n	800bb7a <_svfiprintf_r+0x32>
 800bb5c:	690b      	ldr	r3, [r1, #16]
 800bb5e:	b963      	cbnz	r3, 800bb7a <_svfiprintf_r+0x32>
 800bb60:	2140      	movs	r1, #64	; 0x40
 800bb62:	f7ff ff21 	bl	800b9a8 <_malloc_r>
 800bb66:	6028      	str	r0, [r5, #0]
 800bb68:	6128      	str	r0, [r5, #16]
 800bb6a:	b920      	cbnz	r0, 800bb76 <_svfiprintf_r+0x2e>
 800bb6c:	230c      	movs	r3, #12
 800bb6e:	603b      	str	r3, [r7, #0]
 800bb70:	f04f 30ff 	mov.w	r0, #4294967295
 800bb74:	e0d1      	b.n	800bd1a <_svfiprintf_r+0x1d2>
 800bb76:	2340      	movs	r3, #64	; 0x40
 800bb78:	616b      	str	r3, [r5, #20]
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb7e:	2320      	movs	r3, #32
 800bb80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb84:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb88:	2330      	movs	r3, #48	; 0x30
 800bb8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd34 <_svfiprintf_r+0x1ec>
 800bb8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb92:	f04f 0901 	mov.w	r9, #1
 800bb96:	4623      	mov	r3, r4
 800bb98:	469a      	mov	sl, r3
 800bb9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb9e:	b10a      	cbz	r2, 800bba4 <_svfiprintf_r+0x5c>
 800bba0:	2a25      	cmp	r2, #37	; 0x25
 800bba2:	d1f9      	bne.n	800bb98 <_svfiprintf_r+0x50>
 800bba4:	ebba 0b04 	subs.w	fp, sl, r4
 800bba8:	d00b      	beq.n	800bbc2 <_svfiprintf_r+0x7a>
 800bbaa:	465b      	mov	r3, fp
 800bbac:	4622      	mov	r2, r4
 800bbae:	4629      	mov	r1, r5
 800bbb0:	4638      	mov	r0, r7
 800bbb2:	f7ff ff6d 	bl	800ba90 <__ssputs_r>
 800bbb6:	3001      	adds	r0, #1
 800bbb8:	f000 80aa 	beq.w	800bd10 <_svfiprintf_r+0x1c8>
 800bbbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbbe:	445a      	add	r2, fp
 800bbc0:	9209      	str	r2, [sp, #36]	; 0x24
 800bbc2:	f89a 3000 	ldrb.w	r3, [sl]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	f000 80a2 	beq.w	800bd10 <_svfiprintf_r+0x1c8>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	f04f 32ff 	mov.w	r2, #4294967295
 800bbd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbd6:	f10a 0a01 	add.w	sl, sl, #1
 800bbda:	9304      	str	r3, [sp, #16]
 800bbdc:	9307      	str	r3, [sp, #28]
 800bbde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbe2:	931a      	str	r3, [sp, #104]	; 0x68
 800bbe4:	4654      	mov	r4, sl
 800bbe6:	2205      	movs	r2, #5
 800bbe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbec:	4851      	ldr	r0, [pc, #324]	; (800bd34 <_svfiprintf_r+0x1ec>)
 800bbee:	f7f4 faff 	bl	80001f0 <memchr>
 800bbf2:	9a04      	ldr	r2, [sp, #16]
 800bbf4:	b9d8      	cbnz	r0, 800bc2e <_svfiprintf_r+0xe6>
 800bbf6:	06d0      	lsls	r0, r2, #27
 800bbf8:	bf44      	itt	mi
 800bbfa:	2320      	movmi	r3, #32
 800bbfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc00:	0711      	lsls	r1, r2, #28
 800bc02:	bf44      	itt	mi
 800bc04:	232b      	movmi	r3, #43	; 0x2b
 800bc06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc0a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc0e:	2b2a      	cmp	r3, #42	; 0x2a
 800bc10:	d015      	beq.n	800bc3e <_svfiprintf_r+0xf6>
 800bc12:	9a07      	ldr	r2, [sp, #28]
 800bc14:	4654      	mov	r4, sl
 800bc16:	2000      	movs	r0, #0
 800bc18:	f04f 0c0a 	mov.w	ip, #10
 800bc1c:	4621      	mov	r1, r4
 800bc1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc22:	3b30      	subs	r3, #48	; 0x30
 800bc24:	2b09      	cmp	r3, #9
 800bc26:	d94e      	bls.n	800bcc6 <_svfiprintf_r+0x17e>
 800bc28:	b1b0      	cbz	r0, 800bc58 <_svfiprintf_r+0x110>
 800bc2a:	9207      	str	r2, [sp, #28]
 800bc2c:	e014      	b.n	800bc58 <_svfiprintf_r+0x110>
 800bc2e:	eba0 0308 	sub.w	r3, r0, r8
 800bc32:	fa09 f303 	lsl.w	r3, r9, r3
 800bc36:	4313      	orrs	r3, r2
 800bc38:	9304      	str	r3, [sp, #16]
 800bc3a:	46a2      	mov	sl, r4
 800bc3c:	e7d2      	b.n	800bbe4 <_svfiprintf_r+0x9c>
 800bc3e:	9b03      	ldr	r3, [sp, #12]
 800bc40:	1d19      	adds	r1, r3, #4
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	9103      	str	r1, [sp, #12]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	bfbb      	ittet	lt
 800bc4a:	425b      	neglt	r3, r3
 800bc4c:	f042 0202 	orrlt.w	r2, r2, #2
 800bc50:	9307      	strge	r3, [sp, #28]
 800bc52:	9307      	strlt	r3, [sp, #28]
 800bc54:	bfb8      	it	lt
 800bc56:	9204      	strlt	r2, [sp, #16]
 800bc58:	7823      	ldrb	r3, [r4, #0]
 800bc5a:	2b2e      	cmp	r3, #46	; 0x2e
 800bc5c:	d10c      	bne.n	800bc78 <_svfiprintf_r+0x130>
 800bc5e:	7863      	ldrb	r3, [r4, #1]
 800bc60:	2b2a      	cmp	r3, #42	; 0x2a
 800bc62:	d135      	bne.n	800bcd0 <_svfiprintf_r+0x188>
 800bc64:	9b03      	ldr	r3, [sp, #12]
 800bc66:	1d1a      	adds	r2, r3, #4
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	9203      	str	r2, [sp, #12]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	bfb8      	it	lt
 800bc70:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc74:	3402      	adds	r4, #2
 800bc76:	9305      	str	r3, [sp, #20]
 800bc78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd44 <_svfiprintf_r+0x1fc>
 800bc7c:	7821      	ldrb	r1, [r4, #0]
 800bc7e:	2203      	movs	r2, #3
 800bc80:	4650      	mov	r0, sl
 800bc82:	f7f4 fab5 	bl	80001f0 <memchr>
 800bc86:	b140      	cbz	r0, 800bc9a <_svfiprintf_r+0x152>
 800bc88:	2340      	movs	r3, #64	; 0x40
 800bc8a:	eba0 000a 	sub.w	r0, r0, sl
 800bc8e:	fa03 f000 	lsl.w	r0, r3, r0
 800bc92:	9b04      	ldr	r3, [sp, #16]
 800bc94:	4303      	orrs	r3, r0
 800bc96:	3401      	adds	r4, #1
 800bc98:	9304      	str	r3, [sp, #16]
 800bc9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc9e:	4826      	ldr	r0, [pc, #152]	; (800bd38 <_svfiprintf_r+0x1f0>)
 800bca0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bca4:	2206      	movs	r2, #6
 800bca6:	f7f4 faa3 	bl	80001f0 <memchr>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	d038      	beq.n	800bd20 <_svfiprintf_r+0x1d8>
 800bcae:	4b23      	ldr	r3, [pc, #140]	; (800bd3c <_svfiprintf_r+0x1f4>)
 800bcb0:	bb1b      	cbnz	r3, 800bcfa <_svfiprintf_r+0x1b2>
 800bcb2:	9b03      	ldr	r3, [sp, #12]
 800bcb4:	3307      	adds	r3, #7
 800bcb6:	f023 0307 	bic.w	r3, r3, #7
 800bcba:	3308      	adds	r3, #8
 800bcbc:	9303      	str	r3, [sp, #12]
 800bcbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcc0:	4433      	add	r3, r6
 800bcc2:	9309      	str	r3, [sp, #36]	; 0x24
 800bcc4:	e767      	b.n	800bb96 <_svfiprintf_r+0x4e>
 800bcc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcca:	460c      	mov	r4, r1
 800bccc:	2001      	movs	r0, #1
 800bcce:	e7a5      	b.n	800bc1c <_svfiprintf_r+0xd4>
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	3401      	adds	r4, #1
 800bcd4:	9305      	str	r3, [sp, #20]
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	f04f 0c0a 	mov.w	ip, #10
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bce2:	3a30      	subs	r2, #48	; 0x30
 800bce4:	2a09      	cmp	r2, #9
 800bce6:	d903      	bls.n	800bcf0 <_svfiprintf_r+0x1a8>
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d0c5      	beq.n	800bc78 <_svfiprintf_r+0x130>
 800bcec:	9105      	str	r1, [sp, #20]
 800bcee:	e7c3      	b.n	800bc78 <_svfiprintf_r+0x130>
 800bcf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e7f0      	b.n	800bcdc <_svfiprintf_r+0x194>
 800bcfa:	ab03      	add	r3, sp, #12
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	462a      	mov	r2, r5
 800bd00:	4b0f      	ldr	r3, [pc, #60]	; (800bd40 <_svfiprintf_r+0x1f8>)
 800bd02:	a904      	add	r1, sp, #16
 800bd04:	4638      	mov	r0, r7
 800bd06:	f7fd ffd9 	bl	8009cbc <_printf_float>
 800bd0a:	1c42      	adds	r2, r0, #1
 800bd0c:	4606      	mov	r6, r0
 800bd0e:	d1d6      	bne.n	800bcbe <_svfiprintf_r+0x176>
 800bd10:	89ab      	ldrh	r3, [r5, #12]
 800bd12:	065b      	lsls	r3, r3, #25
 800bd14:	f53f af2c 	bmi.w	800bb70 <_svfiprintf_r+0x28>
 800bd18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd1a:	b01d      	add	sp, #116	; 0x74
 800bd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd20:	ab03      	add	r3, sp, #12
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	462a      	mov	r2, r5
 800bd26:	4b06      	ldr	r3, [pc, #24]	; (800bd40 <_svfiprintf_r+0x1f8>)
 800bd28:	a904      	add	r1, sp, #16
 800bd2a:	4638      	mov	r0, r7
 800bd2c:	f7fe fa6a 	bl	800a204 <_printf_i>
 800bd30:	e7eb      	b.n	800bd0a <_svfiprintf_r+0x1c2>
 800bd32:	bf00      	nop
 800bd34:	0800cd04 	.word	0x0800cd04
 800bd38:	0800cd0e 	.word	0x0800cd0e
 800bd3c:	08009cbd 	.word	0x08009cbd
 800bd40:	0800ba91 	.word	0x0800ba91
 800bd44:	0800cd0a 	.word	0x0800cd0a

0800bd48 <_sbrk_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	4d06      	ldr	r5, [pc, #24]	; (800bd64 <_sbrk_r+0x1c>)
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	4604      	mov	r4, r0
 800bd50:	4608      	mov	r0, r1
 800bd52:	602b      	str	r3, [r5, #0]
 800bd54:	f7f6 feca 	bl	8002aec <_sbrk>
 800bd58:	1c43      	adds	r3, r0, #1
 800bd5a:	d102      	bne.n	800bd62 <_sbrk_r+0x1a>
 800bd5c:	682b      	ldr	r3, [r5, #0]
 800bd5e:	b103      	cbz	r3, 800bd62 <_sbrk_r+0x1a>
 800bd60:	6023      	str	r3, [r4, #0]
 800bd62:	bd38      	pop	{r3, r4, r5, pc}
 800bd64:	200049fc 	.word	0x200049fc

0800bd68 <__assert_func>:
 800bd68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd6a:	4614      	mov	r4, r2
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	4b09      	ldr	r3, [pc, #36]	; (800bd94 <__assert_func+0x2c>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4605      	mov	r5, r0
 800bd74:	68d8      	ldr	r0, [r3, #12]
 800bd76:	b14c      	cbz	r4, 800bd8c <__assert_func+0x24>
 800bd78:	4b07      	ldr	r3, [pc, #28]	; (800bd98 <__assert_func+0x30>)
 800bd7a:	9100      	str	r1, [sp, #0]
 800bd7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd80:	4906      	ldr	r1, [pc, #24]	; (800bd9c <__assert_func+0x34>)
 800bd82:	462b      	mov	r3, r5
 800bd84:	f000 f80e 	bl	800bda4 <fiprintf>
 800bd88:	f000 faac 	bl	800c2e4 <abort>
 800bd8c:	4b04      	ldr	r3, [pc, #16]	; (800bda0 <__assert_func+0x38>)
 800bd8e:	461c      	mov	r4, r3
 800bd90:	e7f3      	b.n	800bd7a <__assert_func+0x12>
 800bd92:	bf00      	nop
 800bd94:	20000010 	.word	0x20000010
 800bd98:	0800cd15 	.word	0x0800cd15
 800bd9c:	0800cd22 	.word	0x0800cd22
 800bda0:	0800cd50 	.word	0x0800cd50

0800bda4 <fiprintf>:
 800bda4:	b40e      	push	{r1, r2, r3}
 800bda6:	b503      	push	{r0, r1, lr}
 800bda8:	4601      	mov	r1, r0
 800bdaa:	ab03      	add	r3, sp, #12
 800bdac:	4805      	ldr	r0, [pc, #20]	; (800bdc4 <fiprintf+0x20>)
 800bdae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdb2:	6800      	ldr	r0, [r0, #0]
 800bdb4:	9301      	str	r3, [sp, #4]
 800bdb6:	f000 f897 	bl	800bee8 <_vfiprintf_r>
 800bdba:	b002      	add	sp, #8
 800bdbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdc0:	b003      	add	sp, #12
 800bdc2:	4770      	bx	lr
 800bdc4:	20000010 	.word	0x20000010

0800bdc8 <__ascii_mbtowc>:
 800bdc8:	b082      	sub	sp, #8
 800bdca:	b901      	cbnz	r1, 800bdce <__ascii_mbtowc+0x6>
 800bdcc:	a901      	add	r1, sp, #4
 800bdce:	b142      	cbz	r2, 800bde2 <__ascii_mbtowc+0x1a>
 800bdd0:	b14b      	cbz	r3, 800bde6 <__ascii_mbtowc+0x1e>
 800bdd2:	7813      	ldrb	r3, [r2, #0]
 800bdd4:	600b      	str	r3, [r1, #0]
 800bdd6:	7812      	ldrb	r2, [r2, #0]
 800bdd8:	1e10      	subs	r0, r2, #0
 800bdda:	bf18      	it	ne
 800bddc:	2001      	movne	r0, #1
 800bdde:	b002      	add	sp, #8
 800bde0:	4770      	bx	lr
 800bde2:	4610      	mov	r0, r2
 800bde4:	e7fb      	b.n	800bdde <__ascii_mbtowc+0x16>
 800bde6:	f06f 0001 	mvn.w	r0, #1
 800bdea:	e7f8      	b.n	800bdde <__ascii_mbtowc+0x16>

0800bdec <memmove>:
 800bdec:	4288      	cmp	r0, r1
 800bdee:	b510      	push	{r4, lr}
 800bdf0:	eb01 0402 	add.w	r4, r1, r2
 800bdf4:	d902      	bls.n	800bdfc <memmove+0x10>
 800bdf6:	4284      	cmp	r4, r0
 800bdf8:	4623      	mov	r3, r4
 800bdfa:	d807      	bhi.n	800be0c <memmove+0x20>
 800bdfc:	1e43      	subs	r3, r0, #1
 800bdfe:	42a1      	cmp	r1, r4
 800be00:	d008      	beq.n	800be14 <memmove+0x28>
 800be02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be0a:	e7f8      	b.n	800bdfe <memmove+0x12>
 800be0c:	4402      	add	r2, r0
 800be0e:	4601      	mov	r1, r0
 800be10:	428a      	cmp	r2, r1
 800be12:	d100      	bne.n	800be16 <memmove+0x2a>
 800be14:	bd10      	pop	{r4, pc}
 800be16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be1e:	e7f7      	b.n	800be10 <memmove+0x24>

0800be20 <__malloc_lock>:
 800be20:	4801      	ldr	r0, [pc, #4]	; (800be28 <__malloc_lock+0x8>)
 800be22:	f000 bc1f 	b.w	800c664 <__retarget_lock_acquire_recursive>
 800be26:	bf00      	nop
 800be28:	20004a00 	.word	0x20004a00

0800be2c <__malloc_unlock>:
 800be2c:	4801      	ldr	r0, [pc, #4]	; (800be34 <__malloc_unlock+0x8>)
 800be2e:	f000 bc1a 	b.w	800c666 <__retarget_lock_release_recursive>
 800be32:	bf00      	nop
 800be34:	20004a00 	.word	0x20004a00

0800be38 <_realloc_r>:
 800be38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be3c:	4680      	mov	r8, r0
 800be3e:	4614      	mov	r4, r2
 800be40:	460e      	mov	r6, r1
 800be42:	b921      	cbnz	r1, 800be4e <_realloc_r+0x16>
 800be44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be48:	4611      	mov	r1, r2
 800be4a:	f7ff bdad 	b.w	800b9a8 <_malloc_r>
 800be4e:	b92a      	cbnz	r2, 800be5c <_realloc_r+0x24>
 800be50:	f7ff fd3e 	bl	800b8d0 <_free_r>
 800be54:	4625      	mov	r5, r4
 800be56:	4628      	mov	r0, r5
 800be58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be5c:	f000 fc6a 	bl	800c734 <_malloc_usable_size_r>
 800be60:	4284      	cmp	r4, r0
 800be62:	4607      	mov	r7, r0
 800be64:	d802      	bhi.n	800be6c <_realloc_r+0x34>
 800be66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be6a:	d812      	bhi.n	800be92 <_realloc_r+0x5a>
 800be6c:	4621      	mov	r1, r4
 800be6e:	4640      	mov	r0, r8
 800be70:	f7ff fd9a 	bl	800b9a8 <_malloc_r>
 800be74:	4605      	mov	r5, r0
 800be76:	2800      	cmp	r0, #0
 800be78:	d0ed      	beq.n	800be56 <_realloc_r+0x1e>
 800be7a:	42bc      	cmp	r4, r7
 800be7c:	4622      	mov	r2, r4
 800be7e:	4631      	mov	r1, r6
 800be80:	bf28      	it	cs
 800be82:	463a      	movcs	r2, r7
 800be84:	f7fd fe64 	bl	8009b50 <memcpy>
 800be88:	4631      	mov	r1, r6
 800be8a:	4640      	mov	r0, r8
 800be8c:	f7ff fd20 	bl	800b8d0 <_free_r>
 800be90:	e7e1      	b.n	800be56 <_realloc_r+0x1e>
 800be92:	4635      	mov	r5, r6
 800be94:	e7df      	b.n	800be56 <_realloc_r+0x1e>

0800be96 <__sfputc_r>:
 800be96:	6893      	ldr	r3, [r2, #8]
 800be98:	3b01      	subs	r3, #1
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	b410      	push	{r4}
 800be9e:	6093      	str	r3, [r2, #8]
 800bea0:	da08      	bge.n	800beb4 <__sfputc_r+0x1e>
 800bea2:	6994      	ldr	r4, [r2, #24]
 800bea4:	42a3      	cmp	r3, r4
 800bea6:	db01      	blt.n	800beac <__sfputc_r+0x16>
 800bea8:	290a      	cmp	r1, #10
 800beaa:	d103      	bne.n	800beb4 <__sfputc_r+0x1e>
 800beac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800beb0:	f000 b94a 	b.w	800c148 <__swbuf_r>
 800beb4:	6813      	ldr	r3, [r2, #0]
 800beb6:	1c58      	adds	r0, r3, #1
 800beb8:	6010      	str	r0, [r2, #0]
 800beba:	7019      	strb	r1, [r3, #0]
 800bebc:	4608      	mov	r0, r1
 800bebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <__sfputs_r>:
 800bec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bec6:	4606      	mov	r6, r0
 800bec8:	460f      	mov	r7, r1
 800beca:	4614      	mov	r4, r2
 800becc:	18d5      	adds	r5, r2, r3
 800bece:	42ac      	cmp	r4, r5
 800bed0:	d101      	bne.n	800bed6 <__sfputs_r+0x12>
 800bed2:	2000      	movs	r0, #0
 800bed4:	e007      	b.n	800bee6 <__sfputs_r+0x22>
 800bed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beda:	463a      	mov	r2, r7
 800bedc:	4630      	mov	r0, r6
 800bede:	f7ff ffda 	bl	800be96 <__sfputc_r>
 800bee2:	1c43      	adds	r3, r0, #1
 800bee4:	d1f3      	bne.n	800bece <__sfputs_r+0xa>
 800bee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bee8 <_vfiprintf_r>:
 800bee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beec:	460d      	mov	r5, r1
 800beee:	b09d      	sub	sp, #116	; 0x74
 800bef0:	4614      	mov	r4, r2
 800bef2:	4698      	mov	r8, r3
 800bef4:	4606      	mov	r6, r0
 800bef6:	b118      	cbz	r0, 800bf00 <_vfiprintf_r+0x18>
 800bef8:	6983      	ldr	r3, [r0, #24]
 800befa:	b90b      	cbnz	r3, 800bf00 <_vfiprintf_r+0x18>
 800befc:	f000 fb14 	bl	800c528 <__sinit>
 800bf00:	4b89      	ldr	r3, [pc, #548]	; (800c128 <_vfiprintf_r+0x240>)
 800bf02:	429d      	cmp	r5, r3
 800bf04:	d11b      	bne.n	800bf3e <_vfiprintf_r+0x56>
 800bf06:	6875      	ldr	r5, [r6, #4]
 800bf08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf0a:	07d9      	lsls	r1, r3, #31
 800bf0c:	d405      	bmi.n	800bf1a <_vfiprintf_r+0x32>
 800bf0e:	89ab      	ldrh	r3, [r5, #12]
 800bf10:	059a      	lsls	r2, r3, #22
 800bf12:	d402      	bmi.n	800bf1a <_vfiprintf_r+0x32>
 800bf14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf16:	f000 fba5 	bl	800c664 <__retarget_lock_acquire_recursive>
 800bf1a:	89ab      	ldrh	r3, [r5, #12]
 800bf1c:	071b      	lsls	r3, r3, #28
 800bf1e:	d501      	bpl.n	800bf24 <_vfiprintf_r+0x3c>
 800bf20:	692b      	ldr	r3, [r5, #16]
 800bf22:	b9eb      	cbnz	r3, 800bf60 <_vfiprintf_r+0x78>
 800bf24:	4629      	mov	r1, r5
 800bf26:	4630      	mov	r0, r6
 800bf28:	f000 f96e 	bl	800c208 <__swsetup_r>
 800bf2c:	b1c0      	cbz	r0, 800bf60 <_vfiprintf_r+0x78>
 800bf2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf30:	07dc      	lsls	r4, r3, #31
 800bf32:	d50e      	bpl.n	800bf52 <_vfiprintf_r+0x6a>
 800bf34:	f04f 30ff 	mov.w	r0, #4294967295
 800bf38:	b01d      	add	sp, #116	; 0x74
 800bf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf3e:	4b7b      	ldr	r3, [pc, #492]	; (800c12c <_vfiprintf_r+0x244>)
 800bf40:	429d      	cmp	r5, r3
 800bf42:	d101      	bne.n	800bf48 <_vfiprintf_r+0x60>
 800bf44:	68b5      	ldr	r5, [r6, #8]
 800bf46:	e7df      	b.n	800bf08 <_vfiprintf_r+0x20>
 800bf48:	4b79      	ldr	r3, [pc, #484]	; (800c130 <_vfiprintf_r+0x248>)
 800bf4a:	429d      	cmp	r5, r3
 800bf4c:	bf08      	it	eq
 800bf4e:	68f5      	ldreq	r5, [r6, #12]
 800bf50:	e7da      	b.n	800bf08 <_vfiprintf_r+0x20>
 800bf52:	89ab      	ldrh	r3, [r5, #12]
 800bf54:	0598      	lsls	r0, r3, #22
 800bf56:	d4ed      	bmi.n	800bf34 <_vfiprintf_r+0x4c>
 800bf58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf5a:	f000 fb84 	bl	800c666 <__retarget_lock_release_recursive>
 800bf5e:	e7e9      	b.n	800bf34 <_vfiprintf_r+0x4c>
 800bf60:	2300      	movs	r3, #0
 800bf62:	9309      	str	r3, [sp, #36]	; 0x24
 800bf64:	2320      	movs	r3, #32
 800bf66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf6e:	2330      	movs	r3, #48	; 0x30
 800bf70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c134 <_vfiprintf_r+0x24c>
 800bf74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf78:	f04f 0901 	mov.w	r9, #1
 800bf7c:	4623      	mov	r3, r4
 800bf7e:	469a      	mov	sl, r3
 800bf80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf84:	b10a      	cbz	r2, 800bf8a <_vfiprintf_r+0xa2>
 800bf86:	2a25      	cmp	r2, #37	; 0x25
 800bf88:	d1f9      	bne.n	800bf7e <_vfiprintf_r+0x96>
 800bf8a:	ebba 0b04 	subs.w	fp, sl, r4
 800bf8e:	d00b      	beq.n	800bfa8 <_vfiprintf_r+0xc0>
 800bf90:	465b      	mov	r3, fp
 800bf92:	4622      	mov	r2, r4
 800bf94:	4629      	mov	r1, r5
 800bf96:	4630      	mov	r0, r6
 800bf98:	f7ff ff94 	bl	800bec4 <__sfputs_r>
 800bf9c:	3001      	adds	r0, #1
 800bf9e:	f000 80aa 	beq.w	800c0f6 <_vfiprintf_r+0x20e>
 800bfa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfa4:	445a      	add	r2, fp
 800bfa6:	9209      	str	r2, [sp, #36]	; 0x24
 800bfa8:	f89a 3000 	ldrb.w	r3, [sl]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	f000 80a2 	beq.w	800c0f6 <_vfiprintf_r+0x20e>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	f04f 32ff 	mov.w	r2, #4294967295
 800bfb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfbc:	f10a 0a01 	add.w	sl, sl, #1
 800bfc0:	9304      	str	r3, [sp, #16]
 800bfc2:	9307      	str	r3, [sp, #28]
 800bfc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfc8:	931a      	str	r3, [sp, #104]	; 0x68
 800bfca:	4654      	mov	r4, sl
 800bfcc:	2205      	movs	r2, #5
 800bfce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfd2:	4858      	ldr	r0, [pc, #352]	; (800c134 <_vfiprintf_r+0x24c>)
 800bfd4:	f7f4 f90c 	bl	80001f0 <memchr>
 800bfd8:	9a04      	ldr	r2, [sp, #16]
 800bfda:	b9d8      	cbnz	r0, 800c014 <_vfiprintf_r+0x12c>
 800bfdc:	06d1      	lsls	r1, r2, #27
 800bfde:	bf44      	itt	mi
 800bfe0:	2320      	movmi	r3, #32
 800bfe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfe6:	0713      	lsls	r3, r2, #28
 800bfe8:	bf44      	itt	mi
 800bfea:	232b      	movmi	r3, #43	; 0x2b
 800bfec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bff0:	f89a 3000 	ldrb.w	r3, [sl]
 800bff4:	2b2a      	cmp	r3, #42	; 0x2a
 800bff6:	d015      	beq.n	800c024 <_vfiprintf_r+0x13c>
 800bff8:	9a07      	ldr	r2, [sp, #28]
 800bffa:	4654      	mov	r4, sl
 800bffc:	2000      	movs	r0, #0
 800bffe:	f04f 0c0a 	mov.w	ip, #10
 800c002:	4621      	mov	r1, r4
 800c004:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c008:	3b30      	subs	r3, #48	; 0x30
 800c00a:	2b09      	cmp	r3, #9
 800c00c:	d94e      	bls.n	800c0ac <_vfiprintf_r+0x1c4>
 800c00e:	b1b0      	cbz	r0, 800c03e <_vfiprintf_r+0x156>
 800c010:	9207      	str	r2, [sp, #28]
 800c012:	e014      	b.n	800c03e <_vfiprintf_r+0x156>
 800c014:	eba0 0308 	sub.w	r3, r0, r8
 800c018:	fa09 f303 	lsl.w	r3, r9, r3
 800c01c:	4313      	orrs	r3, r2
 800c01e:	9304      	str	r3, [sp, #16]
 800c020:	46a2      	mov	sl, r4
 800c022:	e7d2      	b.n	800bfca <_vfiprintf_r+0xe2>
 800c024:	9b03      	ldr	r3, [sp, #12]
 800c026:	1d19      	adds	r1, r3, #4
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	9103      	str	r1, [sp, #12]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	bfbb      	ittet	lt
 800c030:	425b      	neglt	r3, r3
 800c032:	f042 0202 	orrlt.w	r2, r2, #2
 800c036:	9307      	strge	r3, [sp, #28]
 800c038:	9307      	strlt	r3, [sp, #28]
 800c03a:	bfb8      	it	lt
 800c03c:	9204      	strlt	r2, [sp, #16]
 800c03e:	7823      	ldrb	r3, [r4, #0]
 800c040:	2b2e      	cmp	r3, #46	; 0x2e
 800c042:	d10c      	bne.n	800c05e <_vfiprintf_r+0x176>
 800c044:	7863      	ldrb	r3, [r4, #1]
 800c046:	2b2a      	cmp	r3, #42	; 0x2a
 800c048:	d135      	bne.n	800c0b6 <_vfiprintf_r+0x1ce>
 800c04a:	9b03      	ldr	r3, [sp, #12]
 800c04c:	1d1a      	adds	r2, r3, #4
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	9203      	str	r2, [sp, #12]
 800c052:	2b00      	cmp	r3, #0
 800c054:	bfb8      	it	lt
 800c056:	f04f 33ff 	movlt.w	r3, #4294967295
 800c05a:	3402      	adds	r4, #2
 800c05c:	9305      	str	r3, [sp, #20]
 800c05e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c144 <_vfiprintf_r+0x25c>
 800c062:	7821      	ldrb	r1, [r4, #0]
 800c064:	2203      	movs	r2, #3
 800c066:	4650      	mov	r0, sl
 800c068:	f7f4 f8c2 	bl	80001f0 <memchr>
 800c06c:	b140      	cbz	r0, 800c080 <_vfiprintf_r+0x198>
 800c06e:	2340      	movs	r3, #64	; 0x40
 800c070:	eba0 000a 	sub.w	r0, r0, sl
 800c074:	fa03 f000 	lsl.w	r0, r3, r0
 800c078:	9b04      	ldr	r3, [sp, #16]
 800c07a:	4303      	orrs	r3, r0
 800c07c:	3401      	adds	r4, #1
 800c07e:	9304      	str	r3, [sp, #16]
 800c080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c084:	482c      	ldr	r0, [pc, #176]	; (800c138 <_vfiprintf_r+0x250>)
 800c086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c08a:	2206      	movs	r2, #6
 800c08c:	f7f4 f8b0 	bl	80001f0 <memchr>
 800c090:	2800      	cmp	r0, #0
 800c092:	d03f      	beq.n	800c114 <_vfiprintf_r+0x22c>
 800c094:	4b29      	ldr	r3, [pc, #164]	; (800c13c <_vfiprintf_r+0x254>)
 800c096:	bb1b      	cbnz	r3, 800c0e0 <_vfiprintf_r+0x1f8>
 800c098:	9b03      	ldr	r3, [sp, #12]
 800c09a:	3307      	adds	r3, #7
 800c09c:	f023 0307 	bic.w	r3, r3, #7
 800c0a0:	3308      	adds	r3, #8
 800c0a2:	9303      	str	r3, [sp, #12]
 800c0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a6:	443b      	add	r3, r7
 800c0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c0aa:	e767      	b.n	800bf7c <_vfiprintf_r+0x94>
 800c0ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0b0:	460c      	mov	r4, r1
 800c0b2:	2001      	movs	r0, #1
 800c0b4:	e7a5      	b.n	800c002 <_vfiprintf_r+0x11a>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	3401      	adds	r4, #1
 800c0ba:	9305      	str	r3, [sp, #20]
 800c0bc:	4619      	mov	r1, r3
 800c0be:	f04f 0c0a 	mov.w	ip, #10
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0c8:	3a30      	subs	r2, #48	; 0x30
 800c0ca:	2a09      	cmp	r2, #9
 800c0cc:	d903      	bls.n	800c0d6 <_vfiprintf_r+0x1ee>
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d0c5      	beq.n	800c05e <_vfiprintf_r+0x176>
 800c0d2:	9105      	str	r1, [sp, #20]
 800c0d4:	e7c3      	b.n	800c05e <_vfiprintf_r+0x176>
 800c0d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0da:	4604      	mov	r4, r0
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e7f0      	b.n	800c0c2 <_vfiprintf_r+0x1da>
 800c0e0:	ab03      	add	r3, sp, #12
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	462a      	mov	r2, r5
 800c0e6:	4b16      	ldr	r3, [pc, #88]	; (800c140 <_vfiprintf_r+0x258>)
 800c0e8:	a904      	add	r1, sp, #16
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	f7fd fde6 	bl	8009cbc <_printf_float>
 800c0f0:	4607      	mov	r7, r0
 800c0f2:	1c78      	adds	r0, r7, #1
 800c0f4:	d1d6      	bne.n	800c0a4 <_vfiprintf_r+0x1bc>
 800c0f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0f8:	07d9      	lsls	r1, r3, #31
 800c0fa:	d405      	bmi.n	800c108 <_vfiprintf_r+0x220>
 800c0fc:	89ab      	ldrh	r3, [r5, #12]
 800c0fe:	059a      	lsls	r2, r3, #22
 800c100:	d402      	bmi.n	800c108 <_vfiprintf_r+0x220>
 800c102:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c104:	f000 faaf 	bl	800c666 <__retarget_lock_release_recursive>
 800c108:	89ab      	ldrh	r3, [r5, #12]
 800c10a:	065b      	lsls	r3, r3, #25
 800c10c:	f53f af12 	bmi.w	800bf34 <_vfiprintf_r+0x4c>
 800c110:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c112:	e711      	b.n	800bf38 <_vfiprintf_r+0x50>
 800c114:	ab03      	add	r3, sp, #12
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	462a      	mov	r2, r5
 800c11a:	4b09      	ldr	r3, [pc, #36]	; (800c140 <_vfiprintf_r+0x258>)
 800c11c:	a904      	add	r1, sp, #16
 800c11e:	4630      	mov	r0, r6
 800c120:	f7fe f870 	bl	800a204 <_printf_i>
 800c124:	e7e4      	b.n	800c0f0 <_vfiprintf_r+0x208>
 800c126:	bf00      	nop
 800c128:	0800ce7c 	.word	0x0800ce7c
 800c12c:	0800ce9c 	.word	0x0800ce9c
 800c130:	0800ce5c 	.word	0x0800ce5c
 800c134:	0800cd04 	.word	0x0800cd04
 800c138:	0800cd0e 	.word	0x0800cd0e
 800c13c:	08009cbd 	.word	0x08009cbd
 800c140:	0800bec5 	.word	0x0800bec5
 800c144:	0800cd0a 	.word	0x0800cd0a

0800c148 <__swbuf_r>:
 800c148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14a:	460e      	mov	r6, r1
 800c14c:	4614      	mov	r4, r2
 800c14e:	4605      	mov	r5, r0
 800c150:	b118      	cbz	r0, 800c15a <__swbuf_r+0x12>
 800c152:	6983      	ldr	r3, [r0, #24]
 800c154:	b90b      	cbnz	r3, 800c15a <__swbuf_r+0x12>
 800c156:	f000 f9e7 	bl	800c528 <__sinit>
 800c15a:	4b21      	ldr	r3, [pc, #132]	; (800c1e0 <__swbuf_r+0x98>)
 800c15c:	429c      	cmp	r4, r3
 800c15e:	d12b      	bne.n	800c1b8 <__swbuf_r+0x70>
 800c160:	686c      	ldr	r4, [r5, #4]
 800c162:	69a3      	ldr	r3, [r4, #24]
 800c164:	60a3      	str	r3, [r4, #8]
 800c166:	89a3      	ldrh	r3, [r4, #12]
 800c168:	071a      	lsls	r2, r3, #28
 800c16a:	d52f      	bpl.n	800c1cc <__swbuf_r+0x84>
 800c16c:	6923      	ldr	r3, [r4, #16]
 800c16e:	b36b      	cbz	r3, 800c1cc <__swbuf_r+0x84>
 800c170:	6923      	ldr	r3, [r4, #16]
 800c172:	6820      	ldr	r0, [r4, #0]
 800c174:	1ac0      	subs	r0, r0, r3
 800c176:	6963      	ldr	r3, [r4, #20]
 800c178:	b2f6      	uxtb	r6, r6
 800c17a:	4283      	cmp	r3, r0
 800c17c:	4637      	mov	r7, r6
 800c17e:	dc04      	bgt.n	800c18a <__swbuf_r+0x42>
 800c180:	4621      	mov	r1, r4
 800c182:	4628      	mov	r0, r5
 800c184:	f000 f93c 	bl	800c400 <_fflush_r>
 800c188:	bb30      	cbnz	r0, 800c1d8 <__swbuf_r+0x90>
 800c18a:	68a3      	ldr	r3, [r4, #8]
 800c18c:	3b01      	subs	r3, #1
 800c18e:	60a3      	str	r3, [r4, #8]
 800c190:	6823      	ldr	r3, [r4, #0]
 800c192:	1c5a      	adds	r2, r3, #1
 800c194:	6022      	str	r2, [r4, #0]
 800c196:	701e      	strb	r6, [r3, #0]
 800c198:	6963      	ldr	r3, [r4, #20]
 800c19a:	3001      	adds	r0, #1
 800c19c:	4283      	cmp	r3, r0
 800c19e:	d004      	beq.n	800c1aa <__swbuf_r+0x62>
 800c1a0:	89a3      	ldrh	r3, [r4, #12]
 800c1a2:	07db      	lsls	r3, r3, #31
 800c1a4:	d506      	bpl.n	800c1b4 <__swbuf_r+0x6c>
 800c1a6:	2e0a      	cmp	r6, #10
 800c1a8:	d104      	bne.n	800c1b4 <__swbuf_r+0x6c>
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	f000 f927 	bl	800c400 <_fflush_r>
 800c1b2:	b988      	cbnz	r0, 800c1d8 <__swbuf_r+0x90>
 800c1b4:	4638      	mov	r0, r7
 800c1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1b8:	4b0a      	ldr	r3, [pc, #40]	; (800c1e4 <__swbuf_r+0x9c>)
 800c1ba:	429c      	cmp	r4, r3
 800c1bc:	d101      	bne.n	800c1c2 <__swbuf_r+0x7a>
 800c1be:	68ac      	ldr	r4, [r5, #8]
 800c1c0:	e7cf      	b.n	800c162 <__swbuf_r+0x1a>
 800c1c2:	4b09      	ldr	r3, [pc, #36]	; (800c1e8 <__swbuf_r+0xa0>)
 800c1c4:	429c      	cmp	r4, r3
 800c1c6:	bf08      	it	eq
 800c1c8:	68ec      	ldreq	r4, [r5, #12]
 800c1ca:	e7ca      	b.n	800c162 <__swbuf_r+0x1a>
 800c1cc:	4621      	mov	r1, r4
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	f000 f81a 	bl	800c208 <__swsetup_r>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d0cb      	beq.n	800c170 <__swbuf_r+0x28>
 800c1d8:	f04f 37ff 	mov.w	r7, #4294967295
 800c1dc:	e7ea      	b.n	800c1b4 <__swbuf_r+0x6c>
 800c1de:	bf00      	nop
 800c1e0:	0800ce7c 	.word	0x0800ce7c
 800c1e4:	0800ce9c 	.word	0x0800ce9c
 800c1e8:	0800ce5c 	.word	0x0800ce5c

0800c1ec <__ascii_wctomb>:
 800c1ec:	b149      	cbz	r1, 800c202 <__ascii_wctomb+0x16>
 800c1ee:	2aff      	cmp	r2, #255	; 0xff
 800c1f0:	bf85      	ittet	hi
 800c1f2:	238a      	movhi	r3, #138	; 0x8a
 800c1f4:	6003      	strhi	r3, [r0, #0]
 800c1f6:	700a      	strbls	r2, [r1, #0]
 800c1f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800c1fc:	bf98      	it	ls
 800c1fe:	2001      	movls	r0, #1
 800c200:	4770      	bx	lr
 800c202:	4608      	mov	r0, r1
 800c204:	4770      	bx	lr
	...

0800c208 <__swsetup_r>:
 800c208:	4b32      	ldr	r3, [pc, #200]	; (800c2d4 <__swsetup_r+0xcc>)
 800c20a:	b570      	push	{r4, r5, r6, lr}
 800c20c:	681d      	ldr	r5, [r3, #0]
 800c20e:	4606      	mov	r6, r0
 800c210:	460c      	mov	r4, r1
 800c212:	b125      	cbz	r5, 800c21e <__swsetup_r+0x16>
 800c214:	69ab      	ldr	r3, [r5, #24]
 800c216:	b913      	cbnz	r3, 800c21e <__swsetup_r+0x16>
 800c218:	4628      	mov	r0, r5
 800c21a:	f000 f985 	bl	800c528 <__sinit>
 800c21e:	4b2e      	ldr	r3, [pc, #184]	; (800c2d8 <__swsetup_r+0xd0>)
 800c220:	429c      	cmp	r4, r3
 800c222:	d10f      	bne.n	800c244 <__swsetup_r+0x3c>
 800c224:	686c      	ldr	r4, [r5, #4]
 800c226:	89a3      	ldrh	r3, [r4, #12]
 800c228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c22c:	0719      	lsls	r1, r3, #28
 800c22e:	d42c      	bmi.n	800c28a <__swsetup_r+0x82>
 800c230:	06dd      	lsls	r5, r3, #27
 800c232:	d411      	bmi.n	800c258 <__swsetup_r+0x50>
 800c234:	2309      	movs	r3, #9
 800c236:	6033      	str	r3, [r6, #0]
 800c238:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c23c:	81a3      	strh	r3, [r4, #12]
 800c23e:	f04f 30ff 	mov.w	r0, #4294967295
 800c242:	e03e      	b.n	800c2c2 <__swsetup_r+0xba>
 800c244:	4b25      	ldr	r3, [pc, #148]	; (800c2dc <__swsetup_r+0xd4>)
 800c246:	429c      	cmp	r4, r3
 800c248:	d101      	bne.n	800c24e <__swsetup_r+0x46>
 800c24a:	68ac      	ldr	r4, [r5, #8]
 800c24c:	e7eb      	b.n	800c226 <__swsetup_r+0x1e>
 800c24e:	4b24      	ldr	r3, [pc, #144]	; (800c2e0 <__swsetup_r+0xd8>)
 800c250:	429c      	cmp	r4, r3
 800c252:	bf08      	it	eq
 800c254:	68ec      	ldreq	r4, [r5, #12]
 800c256:	e7e6      	b.n	800c226 <__swsetup_r+0x1e>
 800c258:	0758      	lsls	r0, r3, #29
 800c25a:	d512      	bpl.n	800c282 <__swsetup_r+0x7a>
 800c25c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c25e:	b141      	cbz	r1, 800c272 <__swsetup_r+0x6a>
 800c260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c264:	4299      	cmp	r1, r3
 800c266:	d002      	beq.n	800c26e <__swsetup_r+0x66>
 800c268:	4630      	mov	r0, r6
 800c26a:	f7ff fb31 	bl	800b8d0 <_free_r>
 800c26e:	2300      	movs	r3, #0
 800c270:	6363      	str	r3, [r4, #52]	; 0x34
 800c272:	89a3      	ldrh	r3, [r4, #12]
 800c274:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c278:	81a3      	strh	r3, [r4, #12]
 800c27a:	2300      	movs	r3, #0
 800c27c:	6063      	str	r3, [r4, #4]
 800c27e:	6923      	ldr	r3, [r4, #16]
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	89a3      	ldrh	r3, [r4, #12]
 800c284:	f043 0308 	orr.w	r3, r3, #8
 800c288:	81a3      	strh	r3, [r4, #12]
 800c28a:	6923      	ldr	r3, [r4, #16]
 800c28c:	b94b      	cbnz	r3, 800c2a2 <__swsetup_r+0x9a>
 800c28e:	89a3      	ldrh	r3, [r4, #12]
 800c290:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c298:	d003      	beq.n	800c2a2 <__swsetup_r+0x9a>
 800c29a:	4621      	mov	r1, r4
 800c29c:	4630      	mov	r0, r6
 800c29e:	f000 fa09 	bl	800c6b4 <__smakebuf_r>
 800c2a2:	89a0      	ldrh	r0, [r4, #12]
 800c2a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2a8:	f010 0301 	ands.w	r3, r0, #1
 800c2ac:	d00a      	beq.n	800c2c4 <__swsetup_r+0xbc>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	60a3      	str	r3, [r4, #8]
 800c2b2:	6963      	ldr	r3, [r4, #20]
 800c2b4:	425b      	negs	r3, r3
 800c2b6:	61a3      	str	r3, [r4, #24]
 800c2b8:	6923      	ldr	r3, [r4, #16]
 800c2ba:	b943      	cbnz	r3, 800c2ce <__swsetup_r+0xc6>
 800c2bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c2c0:	d1ba      	bne.n	800c238 <__swsetup_r+0x30>
 800c2c2:	bd70      	pop	{r4, r5, r6, pc}
 800c2c4:	0781      	lsls	r1, r0, #30
 800c2c6:	bf58      	it	pl
 800c2c8:	6963      	ldrpl	r3, [r4, #20]
 800c2ca:	60a3      	str	r3, [r4, #8]
 800c2cc:	e7f4      	b.n	800c2b8 <__swsetup_r+0xb0>
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	e7f7      	b.n	800c2c2 <__swsetup_r+0xba>
 800c2d2:	bf00      	nop
 800c2d4:	20000010 	.word	0x20000010
 800c2d8:	0800ce7c 	.word	0x0800ce7c
 800c2dc:	0800ce9c 	.word	0x0800ce9c
 800c2e0:	0800ce5c 	.word	0x0800ce5c

0800c2e4 <abort>:
 800c2e4:	b508      	push	{r3, lr}
 800c2e6:	2006      	movs	r0, #6
 800c2e8:	f000 fa54 	bl	800c794 <raise>
 800c2ec:	2001      	movs	r0, #1
 800c2ee:	f7f6 fb85 	bl	80029fc <_exit>
	...

0800c2f4 <__sflush_r>:
 800c2f4:	898a      	ldrh	r2, [r1, #12]
 800c2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2fa:	4605      	mov	r5, r0
 800c2fc:	0710      	lsls	r0, r2, #28
 800c2fe:	460c      	mov	r4, r1
 800c300:	d458      	bmi.n	800c3b4 <__sflush_r+0xc0>
 800c302:	684b      	ldr	r3, [r1, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	dc05      	bgt.n	800c314 <__sflush_r+0x20>
 800c308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	dc02      	bgt.n	800c314 <__sflush_r+0x20>
 800c30e:	2000      	movs	r0, #0
 800c310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c316:	2e00      	cmp	r6, #0
 800c318:	d0f9      	beq.n	800c30e <__sflush_r+0x1a>
 800c31a:	2300      	movs	r3, #0
 800c31c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c320:	682f      	ldr	r7, [r5, #0]
 800c322:	602b      	str	r3, [r5, #0]
 800c324:	d032      	beq.n	800c38c <__sflush_r+0x98>
 800c326:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c328:	89a3      	ldrh	r3, [r4, #12]
 800c32a:	075a      	lsls	r2, r3, #29
 800c32c:	d505      	bpl.n	800c33a <__sflush_r+0x46>
 800c32e:	6863      	ldr	r3, [r4, #4]
 800c330:	1ac0      	subs	r0, r0, r3
 800c332:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c334:	b10b      	cbz	r3, 800c33a <__sflush_r+0x46>
 800c336:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c338:	1ac0      	subs	r0, r0, r3
 800c33a:	2300      	movs	r3, #0
 800c33c:	4602      	mov	r2, r0
 800c33e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c340:	6a21      	ldr	r1, [r4, #32]
 800c342:	4628      	mov	r0, r5
 800c344:	47b0      	blx	r6
 800c346:	1c43      	adds	r3, r0, #1
 800c348:	89a3      	ldrh	r3, [r4, #12]
 800c34a:	d106      	bne.n	800c35a <__sflush_r+0x66>
 800c34c:	6829      	ldr	r1, [r5, #0]
 800c34e:	291d      	cmp	r1, #29
 800c350:	d82c      	bhi.n	800c3ac <__sflush_r+0xb8>
 800c352:	4a2a      	ldr	r2, [pc, #168]	; (800c3fc <__sflush_r+0x108>)
 800c354:	40ca      	lsrs	r2, r1
 800c356:	07d6      	lsls	r6, r2, #31
 800c358:	d528      	bpl.n	800c3ac <__sflush_r+0xb8>
 800c35a:	2200      	movs	r2, #0
 800c35c:	6062      	str	r2, [r4, #4]
 800c35e:	04d9      	lsls	r1, r3, #19
 800c360:	6922      	ldr	r2, [r4, #16]
 800c362:	6022      	str	r2, [r4, #0]
 800c364:	d504      	bpl.n	800c370 <__sflush_r+0x7c>
 800c366:	1c42      	adds	r2, r0, #1
 800c368:	d101      	bne.n	800c36e <__sflush_r+0x7a>
 800c36a:	682b      	ldr	r3, [r5, #0]
 800c36c:	b903      	cbnz	r3, 800c370 <__sflush_r+0x7c>
 800c36e:	6560      	str	r0, [r4, #84]	; 0x54
 800c370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c372:	602f      	str	r7, [r5, #0]
 800c374:	2900      	cmp	r1, #0
 800c376:	d0ca      	beq.n	800c30e <__sflush_r+0x1a>
 800c378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c37c:	4299      	cmp	r1, r3
 800c37e:	d002      	beq.n	800c386 <__sflush_r+0x92>
 800c380:	4628      	mov	r0, r5
 800c382:	f7ff faa5 	bl	800b8d0 <_free_r>
 800c386:	2000      	movs	r0, #0
 800c388:	6360      	str	r0, [r4, #52]	; 0x34
 800c38a:	e7c1      	b.n	800c310 <__sflush_r+0x1c>
 800c38c:	6a21      	ldr	r1, [r4, #32]
 800c38e:	2301      	movs	r3, #1
 800c390:	4628      	mov	r0, r5
 800c392:	47b0      	blx	r6
 800c394:	1c41      	adds	r1, r0, #1
 800c396:	d1c7      	bne.n	800c328 <__sflush_r+0x34>
 800c398:	682b      	ldr	r3, [r5, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d0c4      	beq.n	800c328 <__sflush_r+0x34>
 800c39e:	2b1d      	cmp	r3, #29
 800c3a0:	d001      	beq.n	800c3a6 <__sflush_r+0xb2>
 800c3a2:	2b16      	cmp	r3, #22
 800c3a4:	d101      	bne.n	800c3aa <__sflush_r+0xb6>
 800c3a6:	602f      	str	r7, [r5, #0]
 800c3a8:	e7b1      	b.n	800c30e <__sflush_r+0x1a>
 800c3aa:	89a3      	ldrh	r3, [r4, #12]
 800c3ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3b0:	81a3      	strh	r3, [r4, #12]
 800c3b2:	e7ad      	b.n	800c310 <__sflush_r+0x1c>
 800c3b4:	690f      	ldr	r7, [r1, #16]
 800c3b6:	2f00      	cmp	r7, #0
 800c3b8:	d0a9      	beq.n	800c30e <__sflush_r+0x1a>
 800c3ba:	0793      	lsls	r3, r2, #30
 800c3bc:	680e      	ldr	r6, [r1, #0]
 800c3be:	bf08      	it	eq
 800c3c0:	694b      	ldreq	r3, [r1, #20]
 800c3c2:	600f      	str	r7, [r1, #0]
 800c3c4:	bf18      	it	ne
 800c3c6:	2300      	movne	r3, #0
 800c3c8:	eba6 0807 	sub.w	r8, r6, r7
 800c3cc:	608b      	str	r3, [r1, #8]
 800c3ce:	f1b8 0f00 	cmp.w	r8, #0
 800c3d2:	dd9c      	ble.n	800c30e <__sflush_r+0x1a>
 800c3d4:	6a21      	ldr	r1, [r4, #32]
 800c3d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3d8:	4643      	mov	r3, r8
 800c3da:	463a      	mov	r2, r7
 800c3dc:	4628      	mov	r0, r5
 800c3de:	47b0      	blx	r6
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	dc06      	bgt.n	800c3f2 <__sflush_r+0xfe>
 800c3e4:	89a3      	ldrh	r3, [r4, #12]
 800c3e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ea:	81a3      	strh	r3, [r4, #12]
 800c3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f0:	e78e      	b.n	800c310 <__sflush_r+0x1c>
 800c3f2:	4407      	add	r7, r0
 800c3f4:	eba8 0800 	sub.w	r8, r8, r0
 800c3f8:	e7e9      	b.n	800c3ce <__sflush_r+0xda>
 800c3fa:	bf00      	nop
 800c3fc:	20400001 	.word	0x20400001

0800c400 <_fflush_r>:
 800c400:	b538      	push	{r3, r4, r5, lr}
 800c402:	690b      	ldr	r3, [r1, #16]
 800c404:	4605      	mov	r5, r0
 800c406:	460c      	mov	r4, r1
 800c408:	b913      	cbnz	r3, 800c410 <_fflush_r+0x10>
 800c40a:	2500      	movs	r5, #0
 800c40c:	4628      	mov	r0, r5
 800c40e:	bd38      	pop	{r3, r4, r5, pc}
 800c410:	b118      	cbz	r0, 800c41a <_fflush_r+0x1a>
 800c412:	6983      	ldr	r3, [r0, #24]
 800c414:	b90b      	cbnz	r3, 800c41a <_fflush_r+0x1a>
 800c416:	f000 f887 	bl	800c528 <__sinit>
 800c41a:	4b14      	ldr	r3, [pc, #80]	; (800c46c <_fflush_r+0x6c>)
 800c41c:	429c      	cmp	r4, r3
 800c41e:	d11b      	bne.n	800c458 <_fflush_r+0x58>
 800c420:	686c      	ldr	r4, [r5, #4]
 800c422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d0ef      	beq.n	800c40a <_fflush_r+0xa>
 800c42a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c42c:	07d0      	lsls	r0, r2, #31
 800c42e:	d404      	bmi.n	800c43a <_fflush_r+0x3a>
 800c430:	0599      	lsls	r1, r3, #22
 800c432:	d402      	bmi.n	800c43a <_fflush_r+0x3a>
 800c434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c436:	f000 f915 	bl	800c664 <__retarget_lock_acquire_recursive>
 800c43a:	4628      	mov	r0, r5
 800c43c:	4621      	mov	r1, r4
 800c43e:	f7ff ff59 	bl	800c2f4 <__sflush_r>
 800c442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c444:	07da      	lsls	r2, r3, #31
 800c446:	4605      	mov	r5, r0
 800c448:	d4e0      	bmi.n	800c40c <_fflush_r+0xc>
 800c44a:	89a3      	ldrh	r3, [r4, #12]
 800c44c:	059b      	lsls	r3, r3, #22
 800c44e:	d4dd      	bmi.n	800c40c <_fflush_r+0xc>
 800c450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c452:	f000 f908 	bl	800c666 <__retarget_lock_release_recursive>
 800c456:	e7d9      	b.n	800c40c <_fflush_r+0xc>
 800c458:	4b05      	ldr	r3, [pc, #20]	; (800c470 <_fflush_r+0x70>)
 800c45a:	429c      	cmp	r4, r3
 800c45c:	d101      	bne.n	800c462 <_fflush_r+0x62>
 800c45e:	68ac      	ldr	r4, [r5, #8]
 800c460:	e7df      	b.n	800c422 <_fflush_r+0x22>
 800c462:	4b04      	ldr	r3, [pc, #16]	; (800c474 <_fflush_r+0x74>)
 800c464:	429c      	cmp	r4, r3
 800c466:	bf08      	it	eq
 800c468:	68ec      	ldreq	r4, [r5, #12]
 800c46a:	e7da      	b.n	800c422 <_fflush_r+0x22>
 800c46c:	0800ce7c 	.word	0x0800ce7c
 800c470:	0800ce9c 	.word	0x0800ce9c
 800c474:	0800ce5c 	.word	0x0800ce5c

0800c478 <std>:
 800c478:	2300      	movs	r3, #0
 800c47a:	b510      	push	{r4, lr}
 800c47c:	4604      	mov	r4, r0
 800c47e:	e9c0 3300 	strd	r3, r3, [r0]
 800c482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c486:	6083      	str	r3, [r0, #8]
 800c488:	8181      	strh	r1, [r0, #12]
 800c48a:	6643      	str	r3, [r0, #100]	; 0x64
 800c48c:	81c2      	strh	r2, [r0, #14]
 800c48e:	6183      	str	r3, [r0, #24]
 800c490:	4619      	mov	r1, r3
 800c492:	2208      	movs	r2, #8
 800c494:	305c      	adds	r0, #92	; 0x5c
 800c496:	f7fd fb69 	bl	8009b6c <memset>
 800c49a:	4b05      	ldr	r3, [pc, #20]	; (800c4b0 <std+0x38>)
 800c49c:	6263      	str	r3, [r4, #36]	; 0x24
 800c49e:	4b05      	ldr	r3, [pc, #20]	; (800c4b4 <std+0x3c>)
 800c4a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4a2:	4b05      	ldr	r3, [pc, #20]	; (800c4b8 <std+0x40>)
 800c4a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4a6:	4b05      	ldr	r3, [pc, #20]	; (800c4bc <std+0x44>)
 800c4a8:	6224      	str	r4, [r4, #32]
 800c4aa:	6323      	str	r3, [r4, #48]	; 0x30
 800c4ac:	bd10      	pop	{r4, pc}
 800c4ae:	bf00      	nop
 800c4b0:	0800c7cd 	.word	0x0800c7cd
 800c4b4:	0800c7ef 	.word	0x0800c7ef
 800c4b8:	0800c827 	.word	0x0800c827
 800c4bc:	0800c84b 	.word	0x0800c84b

0800c4c0 <_cleanup_r>:
 800c4c0:	4901      	ldr	r1, [pc, #4]	; (800c4c8 <_cleanup_r+0x8>)
 800c4c2:	f000 b8af 	b.w	800c624 <_fwalk_reent>
 800c4c6:	bf00      	nop
 800c4c8:	0800c401 	.word	0x0800c401

0800c4cc <__sfmoreglue>:
 800c4cc:	b570      	push	{r4, r5, r6, lr}
 800c4ce:	2268      	movs	r2, #104	; 0x68
 800c4d0:	1e4d      	subs	r5, r1, #1
 800c4d2:	4355      	muls	r5, r2
 800c4d4:	460e      	mov	r6, r1
 800c4d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c4da:	f7ff fa65 	bl	800b9a8 <_malloc_r>
 800c4de:	4604      	mov	r4, r0
 800c4e0:	b140      	cbz	r0, 800c4f4 <__sfmoreglue+0x28>
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	e9c0 1600 	strd	r1, r6, [r0]
 800c4e8:	300c      	adds	r0, #12
 800c4ea:	60a0      	str	r0, [r4, #8]
 800c4ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c4f0:	f7fd fb3c 	bl	8009b6c <memset>
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	bd70      	pop	{r4, r5, r6, pc}

0800c4f8 <__sfp_lock_acquire>:
 800c4f8:	4801      	ldr	r0, [pc, #4]	; (800c500 <__sfp_lock_acquire+0x8>)
 800c4fa:	f000 b8b3 	b.w	800c664 <__retarget_lock_acquire_recursive>
 800c4fe:	bf00      	nop
 800c500:	20004a01 	.word	0x20004a01

0800c504 <__sfp_lock_release>:
 800c504:	4801      	ldr	r0, [pc, #4]	; (800c50c <__sfp_lock_release+0x8>)
 800c506:	f000 b8ae 	b.w	800c666 <__retarget_lock_release_recursive>
 800c50a:	bf00      	nop
 800c50c:	20004a01 	.word	0x20004a01

0800c510 <__sinit_lock_acquire>:
 800c510:	4801      	ldr	r0, [pc, #4]	; (800c518 <__sinit_lock_acquire+0x8>)
 800c512:	f000 b8a7 	b.w	800c664 <__retarget_lock_acquire_recursive>
 800c516:	bf00      	nop
 800c518:	20004a02 	.word	0x20004a02

0800c51c <__sinit_lock_release>:
 800c51c:	4801      	ldr	r0, [pc, #4]	; (800c524 <__sinit_lock_release+0x8>)
 800c51e:	f000 b8a2 	b.w	800c666 <__retarget_lock_release_recursive>
 800c522:	bf00      	nop
 800c524:	20004a02 	.word	0x20004a02

0800c528 <__sinit>:
 800c528:	b510      	push	{r4, lr}
 800c52a:	4604      	mov	r4, r0
 800c52c:	f7ff fff0 	bl	800c510 <__sinit_lock_acquire>
 800c530:	69a3      	ldr	r3, [r4, #24]
 800c532:	b11b      	cbz	r3, 800c53c <__sinit+0x14>
 800c534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c538:	f7ff bff0 	b.w	800c51c <__sinit_lock_release>
 800c53c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c540:	6523      	str	r3, [r4, #80]	; 0x50
 800c542:	4b13      	ldr	r3, [pc, #76]	; (800c590 <__sinit+0x68>)
 800c544:	4a13      	ldr	r2, [pc, #76]	; (800c594 <__sinit+0x6c>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	62a2      	str	r2, [r4, #40]	; 0x28
 800c54a:	42a3      	cmp	r3, r4
 800c54c:	bf04      	itt	eq
 800c54e:	2301      	moveq	r3, #1
 800c550:	61a3      	streq	r3, [r4, #24]
 800c552:	4620      	mov	r0, r4
 800c554:	f000 f820 	bl	800c598 <__sfp>
 800c558:	6060      	str	r0, [r4, #4]
 800c55a:	4620      	mov	r0, r4
 800c55c:	f000 f81c 	bl	800c598 <__sfp>
 800c560:	60a0      	str	r0, [r4, #8]
 800c562:	4620      	mov	r0, r4
 800c564:	f000 f818 	bl	800c598 <__sfp>
 800c568:	2200      	movs	r2, #0
 800c56a:	60e0      	str	r0, [r4, #12]
 800c56c:	2104      	movs	r1, #4
 800c56e:	6860      	ldr	r0, [r4, #4]
 800c570:	f7ff ff82 	bl	800c478 <std>
 800c574:	68a0      	ldr	r0, [r4, #8]
 800c576:	2201      	movs	r2, #1
 800c578:	2109      	movs	r1, #9
 800c57a:	f7ff ff7d 	bl	800c478 <std>
 800c57e:	68e0      	ldr	r0, [r4, #12]
 800c580:	2202      	movs	r2, #2
 800c582:	2112      	movs	r1, #18
 800c584:	f7ff ff78 	bl	800c478 <std>
 800c588:	2301      	movs	r3, #1
 800c58a:	61a3      	str	r3, [r4, #24]
 800c58c:	e7d2      	b.n	800c534 <__sinit+0xc>
 800c58e:	bf00      	nop
 800c590:	0800cae4 	.word	0x0800cae4
 800c594:	0800c4c1 	.word	0x0800c4c1

0800c598 <__sfp>:
 800c598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c59a:	4607      	mov	r7, r0
 800c59c:	f7ff ffac 	bl	800c4f8 <__sfp_lock_acquire>
 800c5a0:	4b1e      	ldr	r3, [pc, #120]	; (800c61c <__sfp+0x84>)
 800c5a2:	681e      	ldr	r6, [r3, #0]
 800c5a4:	69b3      	ldr	r3, [r6, #24]
 800c5a6:	b913      	cbnz	r3, 800c5ae <__sfp+0x16>
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	f7ff ffbd 	bl	800c528 <__sinit>
 800c5ae:	3648      	adds	r6, #72	; 0x48
 800c5b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	d503      	bpl.n	800c5c0 <__sfp+0x28>
 800c5b8:	6833      	ldr	r3, [r6, #0]
 800c5ba:	b30b      	cbz	r3, 800c600 <__sfp+0x68>
 800c5bc:	6836      	ldr	r6, [r6, #0]
 800c5be:	e7f7      	b.n	800c5b0 <__sfp+0x18>
 800c5c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c5c4:	b9d5      	cbnz	r5, 800c5fc <__sfp+0x64>
 800c5c6:	4b16      	ldr	r3, [pc, #88]	; (800c620 <__sfp+0x88>)
 800c5c8:	60e3      	str	r3, [r4, #12]
 800c5ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5ce:	6665      	str	r5, [r4, #100]	; 0x64
 800c5d0:	f000 f847 	bl	800c662 <__retarget_lock_init_recursive>
 800c5d4:	f7ff ff96 	bl	800c504 <__sfp_lock_release>
 800c5d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c5dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c5e0:	6025      	str	r5, [r4, #0]
 800c5e2:	61a5      	str	r5, [r4, #24]
 800c5e4:	2208      	movs	r2, #8
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c5ec:	f7fd fabe 	bl	8009b6c <memset>
 800c5f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c5f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5fc:	3468      	adds	r4, #104	; 0x68
 800c5fe:	e7d9      	b.n	800c5b4 <__sfp+0x1c>
 800c600:	2104      	movs	r1, #4
 800c602:	4638      	mov	r0, r7
 800c604:	f7ff ff62 	bl	800c4cc <__sfmoreglue>
 800c608:	4604      	mov	r4, r0
 800c60a:	6030      	str	r0, [r6, #0]
 800c60c:	2800      	cmp	r0, #0
 800c60e:	d1d5      	bne.n	800c5bc <__sfp+0x24>
 800c610:	f7ff ff78 	bl	800c504 <__sfp_lock_release>
 800c614:	230c      	movs	r3, #12
 800c616:	603b      	str	r3, [r7, #0]
 800c618:	e7ee      	b.n	800c5f8 <__sfp+0x60>
 800c61a:	bf00      	nop
 800c61c:	0800cae4 	.word	0x0800cae4
 800c620:	ffff0001 	.word	0xffff0001

0800c624 <_fwalk_reent>:
 800c624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c628:	4606      	mov	r6, r0
 800c62a:	4688      	mov	r8, r1
 800c62c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c630:	2700      	movs	r7, #0
 800c632:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c636:	f1b9 0901 	subs.w	r9, r9, #1
 800c63a:	d505      	bpl.n	800c648 <_fwalk_reent+0x24>
 800c63c:	6824      	ldr	r4, [r4, #0]
 800c63e:	2c00      	cmp	r4, #0
 800c640:	d1f7      	bne.n	800c632 <_fwalk_reent+0xe>
 800c642:	4638      	mov	r0, r7
 800c644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c648:	89ab      	ldrh	r3, [r5, #12]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d907      	bls.n	800c65e <_fwalk_reent+0x3a>
 800c64e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c652:	3301      	adds	r3, #1
 800c654:	d003      	beq.n	800c65e <_fwalk_reent+0x3a>
 800c656:	4629      	mov	r1, r5
 800c658:	4630      	mov	r0, r6
 800c65a:	47c0      	blx	r8
 800c65c:	4307      	orrs	r7, r0
 800c65e:	3568      	adds	r5, #104	; 0x68
 800c660:	e7e9      	b.n	800c636 <_fwalk_reent+0x12>

0800c662 <__retarget_lock_init_recursive>:
 800c662:	4770      	bx	lr

0800c664 <__retarget_lock_acquire_recursive>:
 800c664:	4770      	bx	lr

0800c666 <__retarget_lock_release_recursive>:
 800c666:	4770      	bx	lr

0800c668 <__swhatbuf_r>:
 800c668:	b570      	push	{r4, r5, r6, lr}
 800c66a:	460e      	mov	r6, r1
 800c66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c670:	2900      	cmp	r1, #0
 800c672:	b096      	sub	sp, #88	; 0x58
 800c674:	4614      	mov	r4, r2
 800c676:	461d      	mov	r5, r3
 800c678:	da08      	bge.n	800c68c <__swhatbuf_r+0x24>
 800c67a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c67e:	2200      	movs	r2, #0
 800c680:	602a      	str	r2, [r5, #0]
 800c682:	061a      	lsls	r2, r3, #24
 800c684:	d410      	bmi.n	800c6a8 <__swhatbuf_r+0x40>
 800c686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c68a:	e00e      	b.n	800c6aa <__swhatbuf_r+0x42>
 800c68c:	466a      	mov	r2, sp
 800c68e:	f000 f903 	bl	800c898 <_fstat_r>
 800c692:	2800      	cmp	r0, #0
 800c694:	dbf1      	blt.n	800c67a <__swhatbuf_r+0x12>
 800c696:	9a01      	ldr	r2, [sp, #4]
 800c698:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c69c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c6a0:	425a      	negs	r2, r3
 800c6a2:	415a      	adcs	r2, r3
 800c6a4:	602a      	str	r2, [r5, #0]
 800c6a6:	e7ee      	b.n	800c686 <__swhatbuf_r+0x1e>
 800c6a8:	2340      	movs	r3, #64	; 0x40
 800c6aa:	2000      	movs	r0, #0
 800c6ac:	6023      	str	r3, [r4, #0]
 800c6ae:	b016      	add	sp, #88	; 0x58
 800c6b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c6b4 <__smakebuf_r>:
 800c6b4:	898b      	ldrh	r3, [r1, #12]
 800c6b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6b8:	079d      	lsls	r5, r3, #30
 800c6ba:	4606      	mov	r6, r0
 800c6bc:	460c      	mov	r4, r1
 800c6be:	d507      	bpl.n	800c6d0 <__smakebuf_r+0x1c>
 800c6c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6c4:	6023      	str	r3, [r4, #0]
 800c6c6:	6123      	str	r3, [r4, #16]
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	6163      	str	r3, [r4, #20]
 800c6cc:	b002      	add	sp, #8
 800c6ce:	bd70      	pop	{r4, r5, r6, pc}
 800c6d0:	ab01      	add	r3, sp, #4
 800c6d2:	466a      	mov	r2, sp
 800c6d4:	f7ff ffc8 	bl	800c668 <__swhatbuf_r>
 800c6d8:	9900      	ldr	r1, [sp, #0]
 800c6da:	4605      	mov	r5, r0
 800c6dc:	4630      	mov	r0, r6
 800c6de:	f7ff f963 	bl	800b9a8 <_malloc_r>
 800c6e2:	b948      	cbnz	r0, 800c6f8 <__smakebuf_r+0x44>
 800c6e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6e8:	059a      	lsls	r2, r3, #22
 800c6ea:	d4ef      	bmi.n	800c6cc <__smakebuf_r+0x18>
 800c6ec:	f023 0303 	bic.w	r3, r3, #3
 800c6f0:	f043 0302 	orr.w	r3, r3, #2
 800c6f4:	81a3      	strh	r3, [r4, #12]
 800c6f6:	e7e3      	b.n	800c6c0 <__smakebuf_r+0xc>
 800c6f8:	4b0d      	ldr	r3, [pc, #52]	; (800c730 <__smakebuf_r+0x7c>)
 800c6fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800c6fc:	89a3      	ldrh	r3, [r4, #12]
 800c6fe:	6020      	str	r0, [r4, #0]
 800c700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c704:	81a3      	strh	r3, [r4, #12]
 800c706:	9b00      	ldr	r3, [sp, #0]
 800c708:	6163      	str	r3, [r4, #20]
 800c70a:	9b01      	ldr	r3, [sp, #4]
 800c70c:	6120      	str	r0, [r4, #16]
 800c70e:	b15b      	cbz	r3, 800c728 <__smakebuf_r+0x74>
 800c710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c714:	4630      	mov	r0, r6
 800c716:	f000 f8d1 	bl	800c8bc <_isatty_r>
 800c71a:	b128      	cbz	r0, 800c728 <__smakebuf_r+0x74>
 800c71c:	89a3      	ldrh	r3, [r4, #12]
 800c71e:	f023 0303 	bic.w	r3, r3, #3
 800c722:	f043 0301 	orr.w	r3, r3, #1
 800c726:	81a3      	strh	r3, [r4, #12]
 800c728:	89a0      	ldrh	r0, [r4, #12]
 800c72a:	4305      	orrs	r5, r0
 800c72c:	81a5      	strh	r5, [r4, #12]
 800c72e:	e7cd      	b.n	800c6cc <__smakebuf_r+0x18>
 800c730:	0800c4c1 	.word	0x0800c4c1

0800c734 <_malloc_usable_size_r>:
 800c734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c738:	1f18      	subs	r0, r3, #4
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	bfbc      	itt	lt
 800c73e:	580b      	ldrlt	r3, [r1, r0]
 800c740:	18c0      	addlt	r0, r0, r3
 800c742:	4770      	bx	lr

0800c744 <_raise_r>:
 800c744:	291f      	cmp	r1, #31
 800c746:	b538      	push	{r3, r4, r5, lr}
 800c748:	4604      	mov	r4, r0
 800c74a:	460d      	mov	r5, r1
 800c74c:	d904      	bls.n	800c758 <_raise_r+0x14>
 800c74e:	2316      	movs	r3, #22
 800c750:	6003      	str	r3, [r0, #0]
 800c752:	f04f 30ff 	mov.w	r0, #4294967295
 800c756:	bd38      	pop	{r3, r4, r5, pc}
 800c758:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c75a:	b112      	cbz	r2, 800c762 <_raise_r+0x1e>
 800c75c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c760:	b94b      	cbnz	r3, 800c776 <_raise_r+0x32>
 800c762:	4620      	mov	r0, r4
 800c764:	f000 f830 	bl	800c7c8 <_getpid_r>
 800c768:	462a      	mov	r2, r5
 800c76a:	4601      	mov	r1, r0
 800c76c:	4620      	mov	r0, r4
 800c76e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c772:	f000 b817 	b.w	800c7a4 <_kill_r>
 800c776:	2b01      	cmp	r3, #1
 800c778:	d00a      	beq.n	800c790 <_raise_r+0x4c>
 800c77a:	1c59      	adds	r1, r3, #1
 800c77c:	d103      	bne.n	800c786 <_raise_r+0x42>
 800c77e:	2316      	movs	r3, #22
 800c780:	6003      	str	r3, [r0, #0]
 800c782:	2001      	movs	r0, #1
 800c784:	e7e7      	b.n	800c756 <_raise_r+0x12>
 800c786:	2400      	movs	r4, #0
 800c788:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c78c:	4628      	mov	r0, r5
 800c78e:	4798      	blx	r3
 800c790:	2000      	movs	r0, #0
 800c792:	e7e0      	b.n	800c756 <_raise_r+0x12>

0800c794 <raise>:
 800c794:	4b02      	ldr	r3, [pc, #8]	; (800c7a0 <raise+0xc>)
 800c796:	4601      	mov	r1, r0
 800c798:	6818      	ldr	r0, [r3, #0]
 800c79a:	f7ff bfd3 	b.w	800c744 <_raise_r>
 800c79e:	bf00      	nop
 800c7a0:	20000010 	.word	0x20000010

0800c7a4 <_kill_r>:
 800c7a4:	b538      	push	{r3, r4, r5, lr}
 800c7a6:	4d07      	ldr	r5, [pc, #28]	; (800c7c4 <_kill_r+0x20>)
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	4604      	mov	r4, r0
 800c7ac:	4608      	mov	r0, r1
 800c7ae:	4611      	mov	r1, r2
 800c7b0:	602b      	str	r3, [r5, #0]
 800c7b2:	f7f6 f913 	bl	80029dc <_kill>
 800c7b6:	1c43      	adds	r3, r0, #1
 800c7b8:	d102      	bne.n	800c7c0 <_kill_r+0x1c>
 800c7ba:	682b      	ldr	r3, [r5, #0]
 800c7bc:	b103      	cbz	r3, 800c7c0 <_kill_r+0x1c>
 800c7be:	6023      	str	r3, [r4, #0]
 800c7c0:	bd38      	pop	{r3, r4, r5, pc}
 800c7c2:	bf00      	nop
 800c7c4:	200049fc 	.word	0x200049fc

0800c7c8 <_getpid_r>:
 800c7c8:	f7f6 b900 	b.w	80029cc <_getpid>

0800c7cc <__sread>:
 800c7cc:	b510      	push	{r4, lr}
 800c7ce:	460c      	mov	r4, r1
 800c7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7d4:	f000 f894 	bl	800c900 <_read_r>
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	bfab      	itete	ge
 800c7dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c7de:	89a3      	ldrhlt	r3, [r4, #12]
 800c7e0:	181b      	addge	r3, r3, r0
 800c7e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c7e6:	bfac      	ite	ge
 800c7e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c7ea:	81a3      	strhlt	r3, [r4, #12]
 800c7ec:	bd10      	pop	{r4, pc}

0800c7ee <__swrite>:
 800c7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f2:	461f      	mov	r7, r3
 800c7f4:	898b      	ldrh	r3, [r1, #12]
 800c7f6:	05db      	lsls	r3, r3, #23
 800c7f8:	4605      	mov	r5, r0
 800c7fa:	460c      	mov	r4, r1
 800c7fc:	4616      	mov	r6, r2
 800c7fe:	d505      	bpl.n	800c80c <__swrite+0x1e>
 800c800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c804:	2302      	movs	r3, #2
 800c806:	2200      	movs	r2, #0
 800c808:	f000 f868 	bl	800c8dc <_lseek_r>
 800c80c:	89a3      	ldrh	r3, [r4, #12]
 800c80e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c816:	81a3      	strh	r3, [r4, #12]
 800c818:	4632      	mov	r2, r6
 800c81a:	463b      	mov	r3, r7
 800c81c:	4628      	mov	r0, r5
 800c81e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c822:	f000 b817 	b.w	800c854 <_write_r>

0800c826 <__sseek>:
 800c826:	b510      	push	{r4, lr}
 800c828:	460c      	mov	r4, r1
 800c82a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c82e:	f000 f855 	bl	800c8dc <_lseek_r>
 800c832:	1c43      	adds	r3, r0, #1
 800c834:	89a3      	ldrh	r3, [r4, #12]
 800c836:	bf15      	itete	ne
 800c838:	6560      	strne	r0, [r4, #84]	; 0x54
 800c83a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c83e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c842:	81a3      	strheq	r3, [r4, #12]
 800c844:	bf18      	it	ne
 800c846:	81a3      	strhne	r3, [r4, #12]
 800c848:	bd10      	pop	{r4, pc}

0800c84a <__sclose>:
 800c84a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c84e:	f000 b813 	b.w	800c878 <_close_r>
	...

0800c854 <_write_r>:
 800c854:	b538      	push	{r3, r4, r5, lr}
 800c856:	4d07      	ldr	r5, [pc, #28]	; (800c874 <_write_r+0x20>)
 800c858:	4604      	mov	r4, r0
 800c85a:	4608      	mov	r0, r1
 800c85c:	4611      	mov	r1, r2
 800c85e:	2200      	movs	r2, #0
 800c860:	602a      	str	r2, [r5, #0]
 800c862:	461a      	mov	r2, r3
 800c864:	f7f6 f8f1 	bl	8002a4a <_write>
 800c868:	1c43      	adds	r3, r0, #1
 800c86a:	d102      	bne.n	800c872 <_write_r+0x1e>
 800c86c:	682b      	ldr	r3, [r5, #0]
 800c86e:	b103      	cbz	r3, 800c872 <_write_r+0x1e>
 800c870:	6023      	str	r3, [r4, #0]
 800c872:	bd38      	pop	{r3, r4, r5, pc}
 800c874:	200049fc 	.word	0x200049fc

0800c878 <_close_r>:
 800c878:	b538      	push	{r3, r4, r5, lr}
 800c87a:	4d06      	ldr	r5, [pc, #24]	; (800c894 <_close_r+0x1c>)
 800c87c:	2300      	movs	r3, #0
 800c87e:	4604      	mov	r4, r0
 800c880:	4608      	mov	r0, r1
 800c882:	602b      	str	r3, [r5, #0]
 800c884:	f7f6 f8fd 	bl	8002a82 <_close>
 800c888:	1c43      	adds	r3, r0, #1
 800c88a:	d102      	bne.n	800c892 <_close_r+0x1a>
 800c88c:	682b      	ldr	r3, [r5, #0]
 800c88e:	b103      	cbz	r3, 800c892 <_close_r+0x1a>
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	bd38      	pop	{r3, r4, r5, pc}
 800c894:	200049fc 	.word	0x200049fc

0800c898 <_fstat_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4d07      	ldr	r5, [pc, #28]	; (800c8b8 <_fstat_r+0x20>)
 800c89c:	2300      	movs	r3, #0
 800c89e:	4604      	mov	r4, r0
 800c8a0:	4608      	mov	r0, r1
 800c8a2:	4611      	mov	r1, r2
 800c8a4:	602b      	str	r3, [r5, #0]
 800c8a6:	f7f6 f8f8 	bl	8002a9a <_fstat>
 800c8aa:	1c43      	adds	r3, r0, #1
 800c8ac:	d102      	bne.n	800c8b4 <_fstat_r+0x1c>
 800c8ae:	682b      	ldr	r3, [r5, #0]
 800c8b0:	b103      	cbz	r3, 800c8b4 <_fstat_r+0x1c>
 800c8b2:	6023      	str	r3, [r4, #0]
 800c8b4:	bd38      	pop	{r3, r4, r5, pc}
 800c8b6:	bf00      	nop
 800c8b8:	200049fc 	.word	0x200049fc

0800c8bc <_isatty_r>:
 800c8bc:	b538      	push	{r3, r4, r5, lr}
 800c8be:	4d06      	ldr	r5, [pc, #24]	; (800c8d8 <_isatty_r+0x1c>)
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	4608      	mov	r0, r1
 800c8c6:	602b      	str	r3, [r5, #0]
 800c8c8:	f7f6 f8f7 	bl	8002aba <_isatty>
 800c8cc:	1c43      	adds	r3, r0, #1
 800c8ce:	d102      	bne.n	800c8d6 <_isatty_r+0x1a>
 800c8d0:	682b      	ldr	r3, [r5, #0]
 800c8d2:	b103      	cbz	r3, 800c8d6 <_isatty_r+0x1a>
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	bd38      	pop	{r3, r4, r5, pc}
 800c8d8:	200049fc 	.word	0x200049fc

0800c8dc <_lseek_r>:
 800c8dc:	b538      	push	{r3, r4, r5, lr}
 800c8de:	4d07      	ldr	r5, [pc, #28]	; (800c8fc <_lseek_r+0x20>)
 800c8e0:	4604      	mov	r4, r0
 800c8e2:	4608      	mov	r0, r1
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	602a      	str	r2, [r5, #0]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	f7f6 f8f0 	bl	8002ad0 <_lseek>
 800c8f0:	1c43      	adds	r3, r0, #1
 800c8f2:	d102      	bne.n	800c8fa <_lseek_r+0x1e>
 800c8f4:	682b      	ldr	r3, [r5, #0]
 800c8f6:	b103      	cbz	r3, 800c8fa <_lseek_r+0x1e>
 800c8f8:	6023      	str	r3, [r4, #0]
 800c8fa:	bd38      	pop	{r3, r4, r5, pc}
 800c8fc:	200049fc 	.word	0x200049fc

0800c900 <_read_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4d07      	ldr	r5, [pc, #28]	; (800c920 <_read_r+0x20>)
 800c904:	4604      	mov	r4, r0
 800c906:	4608      	mov	r0, r1
 800c908:	4611      	mov	r1, r2
 800c90a:	2200      	movs	r2, #0
 800c90c:	602a      	str	r2, [r5, #0]
 800c90e:	461a      	mov	r2, r3
 800c910:	f7f6 f87e 	bl	8002a10 <_read>
 800c914:	1c43      	adds	r3, r0, #1
 800c916:	d102      	bne.n	800c91e <_read_r+0x1e>
 800c918:	682b      	ldr	r3, [r5, #0]
 800c91a:	b103      	cbz	r3, 800c91e <_read_r+0x1e>
 800c91c:	6023      	str	r3, [r4, #0]
 800c91e:	bd38      	pop	{r3, r4, r5, pc}
 800c920:	200049fc 	.word	0x200049fc

0800c924 <_init>:
 800c924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c926:	bf00      	nop
 800c928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c92a:	bc08      	pop	{r3}
 800c92c:	469e      	mov	lr, r3
 800c92e:	4770      	bx	lr

0800c930 <_fini>:
 800c930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c932:	bf00      	nop
 800c934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c936:	bc08      	pop	{r3}
 800c938:	469e      	mov	lr, r3
 800c93a:	4770      	bx	lr
